Last login: Wed Sep 13 15:28:42 on ttys004

If intern or devservers are unavailable, use the `ohno` tool.
`ohno sev0` in SEV0 scenarios, `ohno devserver` for devserver access
Run `touch ~/.hushlogin` to suppress this message.

(base) soyeonm@soyeonm-mbp OGN % open tmp
(base) soyeonm@soyeonm-mbp OGN % python
iPython 3.10.9 (main, Mar  1 2023, 12:33:47) [Clang 14.0.6 ] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> import json
>>> a = json.
KeyboardInterrupt
>>> a = json.load(open('/Users/soyeonm/Documents/SocialNavigation/habitat-lab_soyeonm/data/datasets/tiffany/aug16/fbe_balanced_gen.json', 'r'))
>>> a['episodes'][20]
{'episode_id': '20', 'scene_id': 'data/fpss/fphab/scenes-uncluttered/104862681_172226874.scene_instance.json', 'scene_dataset_config': 'data/fpss/fphab/fphab-uncluttered.scene_dataset_config.json', 'additional_obj_config_paths': ['data/objects/ycb/configs/', 'data/objects/amazon_berkeley/configs/', 'data/objects/google_object_dataset/configs/'], 'start_position': [0, 0, 0], 'start_rotation': [0, 0, 0, 1], 'info': {'object_labels': {'B07B8W8FBV_:0000': 'any_targets|0', 'B075HR7KY9_:0000': 'any_targets|1'}}, 'ao_states': {}, 'rigid_objs': [['B07B8W8FBV.object_config.json', [[-0.58781, -0.00093, 0.809, -8.23959], [0.00069, 1.0, 0.00165, 0.98861], [-0.809, 0.00153, -0.58781, -9.23383], [0.0, 0.0, 0.0, 1.0]]], ['B075HR7KY9.object_config.json', [[-0.61838, -0.00161, 0.78588, -14.20349], [-0.00157, 1.0, 0.00082, 0.58], [-0.78588, -0.00073, -0.61838, -13.98057], [0.0, 0.0, 0.0, 1.0]]], ['ASICS_GELBlur33_20_GS_BlackWhiteSafety_Orange.object_config.json', [[0.76184, 0.13028, 0.63453, -15.76866], [-0.14865, 0.98859, -0.02449, 0.94372], [-0.63048, -0.07566, 0.77251, -4.92811], [0.0, 0.0, 0.0, 1.0]]], ['SpiderMan_Titan_Hero_12Inch_Action_Figure_oo1qph4wwiW.object_config.json', [[0.30594, 0.15576, -0.93922, -6.051], [-0.09366, 0.98667, 0.13312, 1.59943], [0.94743, 0.04724, 0.31645, -3.30421], [0.0, 0.0, 0.0, 1.0]]], ['B07MBFDKYY.object_config.json', [[-0.76035, -0.00334, 0.64951, -6.02034], [0.03446, 0.99837, 0.04547, 0.84109], [-0.64861, 0.05695, -0.75899, -5.07458], [0.0, 0.0, 0.0, 1.0]]], ['SpiderMan_Titan_Hero_12Inch_Action_Figure_oo1qph4wwiW.object_config.json', [[0.41864, -0.04284, -0.90714, -2.29468], [0.00273, 0.99894, -0.04591, 0.58279], [0.90815, 0.01674, 0.41832, -13.80268], [0.0, 0.0, 0.0, 1.0]]], ['Spritz_Easter_Basket_Plastic_Teal.object_config.json', [[0.27212, 0.00132, 0.96226, -5.97962], [-0.01194, 0.99993, 0.00201, 2.27409], [-0.96219, -0.01204, 0.27212, -13.77036], [0.0, 0.0, 0.0, 1.0]]]], 'targets': {'B07B8W8FBV_:0000': [[0.98591, 0.0, -0.1673, -6.86561], [0.0, 1.0, 0.0, 0.84466], [0.1673, 0.0, 0.98591, -7.57225], [0.0, 0.0, 0.0, 1.0]], 'B075HR7KY9_:0000': [[-0.99964, 0.0, 0.0268, -5.64368], [0.0, 1.0, 0.0, 0.84242], [-0.0268, 0.0, -0.99964, -8.09807], [0.0, 0.0, 0.0, 1.0]]}, 'markers': [], 'target_receptacles': [['983ef4ef38a08850204a31986545f0e01a8dc0af_:0000', None], ['0c4ab4d4ccdc801b4093f10a9aa9c0bfd08ab584_:0001', None]], 'goal_receptacles': [['ccf98b91d53cfe0bacac44d699765b96c2ae346e_part_2_:0000', None], ['29851ebf2741441607a1ab9cd16950540ed60477_:0000', None]], 'name_to_receptacle': {'B07B8W8FBV_:0000': '983ef4ef38a08850204a31986545f0e01a8dc0af_:0000|receptacle_mesh_983ef4ef38a08850204a31986545f0e01a8dc0af.0000', 'B075HR7KY9_:0000': '0c4ab4d4ccdc801b4093f10a9aa9c0bfd08ab584_:0001|receptacle_mesh_0c4ab4d4ccdc801b4093f10a9aa9c0bfd08ab584.0001', 'ASICS_GELBlur33_20_GS_BlackWhiteSafety_Orange_:0000': '344c2a19e66ea9e13136cd49d4cf633654d69bd6_part_2_:0000|receptacle_mesh_344c2a19e66ea9e13136cd49d4cf633654d69bd6_part_2.0001', 'SpiderMan_Titan_Hero_12Inch_Action_Figure_oo1qph4wwiW_:0000': '61da788a7fd67fe1a1bf270e16f458caadb0225e_:0000|receptacle_mesh_61da788a7fd67fe1a1bf270e16f458caadb0225e.0009', 'B07MBFDKYY_:0000': '61da788a7fd67fe1a1bf270e16f458caadb0225e_:0000|receptacle_mesh_61da788a7fd67fe1a1bf270e16f458caadb0225e.0015', 'B075HR7DM7_:0000': '344c2a19e66ea9e13136cd49d4cf633654d69bd6_part_2_:0000|receptacle_mesh_344c2a19e66ea9e13136cd49d4cf633654d69bd6_part_2.0011', 'SpiderMan_Titan_Hero_12Inch_Action_Figure_oo1qph4wwiW_:0001': '0c4ab4d4ccdc801b4093f10a9aa9c0bfd08ab584_:0000|receptacle_mesh_0c4ab4d4ccdc801b4093f10a9aa9c0bfd08ab584.0001', 'Spritz_Easter_Basket_Plastic_Teal_:0000': '722d9b8b0d8ad98e8798840b918121d2c126fa26_:0001|receptacle_mesh_722d9b8b0d8ad98e8798840b918121d2c126fa26.0000'}}
>>> a['episodes'][18]
{'episode_id': '18', 'scene_id': 'data/fpss/fphab/scenes-uncluttered/104862660_172226844.scene_instance.json', 'scene_dataset_config': 'data/fpss/fphab/fphab-uncluttered.scene_dataset_config.json', 'additional_obj_config_paths': ['data/objects/ycb/configs/', 'data/objects/amazon_berkeley/configs/', 'data/objects/google_object_dataset/configs/'], 'start_position': [0, 0, 0], 'start_rotation': [0, 0, 0, 1], 'info': {'object_labels': {'Cole_Hardware_Dishtowel_Blue_:0000': 'any_targets|0', 'B075HR7DM7_:0000': 'any_targets|1'}}, 'ao_states': {}, 'rigid_objs': [['Cole_Hardware_Dishtowel_Blue.object_config.json', [[0.95064, 0.04676, 0.30676, -1.28954], [-0.05526, 0.99829, 0.01909, 0.60672], [-0.30534, -0.0351, 0.9516, -4.60728], [0.0, 0.0, 0.0, 1.0]]], ['B075HR7DM7.object_config.json', [[-0.24587, 0.00011, -0.9693, -0.37873], [0.00019, 1.0, 7e-05, 0.57484], [0.9693, -0.00016, -0.24587, -3.30235], [0.0, 0.0, 0.0, 1.0]]], ['B07JLBDT51.object_config.json', [[-0.73208, -0.00971, -0.68115, -4.73761], [-0.0108, 0.99994, -0.00265, 0.95983], [0.68113, 0.00541, -0.73214, -2.42174], [0.0, 0.0, 0.0, 1.0]]], ['B07B8NVHX1.object_config.json', [[-0.73239, 0.05874, 0.67835, -0.71247], [0.036, 0.99822, -0.04757, 0.70882], [-0.67994, -0.01042, -0.7332, -4.57229], [0.0, 0.0, 0.0, 1.0]]], ['Blackcurrant_Lutein.object_config.json', [[-0.51476, 0.00741, -0.85731, -0.60756], [0.00932, 0.99995, 0.00305, 0.82861], [0.85729, -0.00642, -0.5148, -0.26417], [0.0, 0.0, 0.0, 1.0]]]], 'targets': {'Cole_Hardware_Dishtowel_Blue_:0000': [[-0.66159, 0.0, 0.74987, -0.25777], [0.0, 1.0, 0.0, 0.72519], [-0.74987, 0.0, -0.66159, -1.00197], [0.0, 0.0, 0.0, 1.0]], 'B075HR7DM7_:0000': [[-0.91288, 0.0, 0.40823, -10.59381], [0.0, 1.0, 0.0, 0.62369], [-0.40823, 0.0, -0.91288, 1.96671], [0.0, 0.0, 0.0, 1.0]]}, 'markers': [], 'target_receptacles': [['2686944679d3a20f8024747c31a244a9e9310ff3_:0000', None], ['725c5e0c013448a939b748491fe3262b0fb3185e_:0000', None]], 'goal_receptacles': [['6cd2dc2611c27f758c972b4874efad8c8cbd5d29_:0000', None], ['906d71ff11f2bdcea5d37916ed1fd0c77259579d_:0000', None]], 'name_to_receptacle': {'Cole_Hardware_Dishtowel_Blue_:0000': '2686944679d3a20f8024747c31a244a9e9310ff3_:0000|receptacle_mesh_2686944679d3a20f8024747c31a244a9e9310ff3.0003', 'B075HR7DM7_:0000': '725c5e0c013448a939b748491fe3262b0fb3185e_:0000|receptacle_mesh_725c5e0c013448a939b748491fe3262b0fb3185e.0000', 'B07JLBDT51_:0000': '21d8ce05e5b4ff0b35244d2b5f8073cf4d28f04d_:0001|receptacle_mesh_21d8ce05e5b4ff0b35244d2b5f8073cf4d28f04d.0002', 'B07B8NVHX1_:0000': '2686944679d3a20f8024747c31a244a9e9310ff3_:0000|receptacle_mesh_2686944679d3a20f8024747c31a244a9e9310ff3.0006', 'Blackcurrant_Lutein_:0000': 'ea4826625a4ad17e2bd2f4013acdb1c26b568999_:0000|receptacle_mesh_ea4826625a4ad17e2bd2f4013acdb1c26b568999.0011'}}
>>> exit()
(base) soyeonm@soyeonm-mbp OGN % git status
On branch SIRO_aug20_mapping
Your branch is up to date with 'origin/SIRO_aug20_mapping'.

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   agents/sem_exp.py
	modified:   config/panoptic_fbe.yaml
	modified:   envs/habitat/objectgoal_env.py

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	0.png
	102.png
	1055/
	106.png
	11/
	117.png
	57/
	83/
	FP0A.png
	FP8_0.png
	FP8_177.png
	FP8_178.png
	aa.p
	aa.png
	aa1.png
	agent_first_rgb/
	agent_third_rgb/
	collision_map.p
	debug_exp_pred.p
	debug_fmm_dist146.png
	debug_map_pred.p
	debug_planning_window.p
	debug_start.p
	depth_159.png
	depth_160.png
	depth_229.png
	depth_3.png
	exp_mul_noboundary.png
	exp_mul_yesboundary.png
	fbe_maps/
	fmm_dist.png
	fmm_dist_check_goal_broken_184.p
	fmm_dist_re.png
	fp.png
	fp0.png
	fp173.png
	fp190.png
	fp1_238.png
	fp_0.png
	fp_146.png
	goal.p
	goal.png
	goal300.png
	goal301.png
	goal_check_goal_broken_184.p
	goal_plus.png
	goal_stg.png
	goalre301.png
	grid_229.png
	head.png
	human_traj_debug/
	human_trajectory.p
	human_trajectory_re.p
	jul8_100.png
	jul8_101_toilet.png
	jul8_102.png
	mul.png
	mul_0.0.png
	mul_new.png
	mul_noboundary.png
	mul_yesboundary.png
	ogn_57_0.png
	person_first_rgb/
	person_third_rgb/
	phase1_read_actions_pickles/aug_16_panoptic_fbe/
	phase1_read_actions_pickles_sim_link/
	planner_outputs/
	planner_outputs_7_45am_agentstate/
	planner_outputs_fbe/
	planner_outputs_selem5_aug3/
	planning_window_check_goal_broken_184.p
	rep_52_fake_person.png
	rep_53_fake_person.png
	rep_fake_person.png
	rgb_159.png
	start_check_goal_broken_184.p
	test_fmm_dist_229229.png
	tiffany_utils/
	topdown.png
	topdown/
	topdown_sem.png
	traversable_check_goal_broken_184.p
	traversible300.png
	traversible301.png
	traversible_229.png
	traversible_fake_229.png
	visited.p

no changes added to commit (use "git add" and/or "git commit -a")
(base) soyeonm@soyeonm-mbp OGN % git add -u
(base) soyeonm@soyeonm-mbp OGN % git commit -m "working for replay_fbe_actions episode 18"
[SIRO_aug20_mapping dc3e9d3] working for replay_fbe_actions episode 18
 3 files changed, 16 insertions(+), 13 deletions(-)
(base) soyeonm@soyeonm-mbp OGN % git push
Enumerating objects: 17, done.
Counting objects: 100% (17/17), done.
Delta compression using up to 10 threads
Compressing objects: 100% (9/9), done.
Writing objects: 100% (9/9), 1020 bytes | 1020.00 KiB/s, done.
Total 9 (delta 6), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (6/6), completed with 6 local objects.
To https://github.com/devendrachaplot/OGN.git
   0dde080..dc3e9d3  SIRO_aug20_mapping -> SIRO_aug20_mapping
(base) soyeonm@soyeonm-mbp OGN % git status
On branch SIRO_aug20_mapping
Your branch is up to date with 'origin/SIRO_aug20_mapping'.

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   agents/sem_exp.py

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	0.png
	102.png
	1055/
	106.png
	11/
	117.png
	57/
	83/
	FP0A.png
	FP8_0.png
	FP8_177.png
	FP8_178.png
	aa.p
	aa.png
	aa1.png
	agent_first_rgb/
	agent_third_rgb/
	collision_map.p
	debug_exp_pred.p
	debug_fmm_dist146.png
	debug_map_pred.p
	debug_planning_window.p
	debug_start.p
	depth_159.png
	depth_160.png
	depth_229.png
	depth_3.png
	exp_mul_noboundary.png
	exp_mul_yesboundary.png
	fbe_maps/
	fmm_dist.png
	fmm_dist_check_goal_broken_184.p
	fmm_dist_re.png
	fp.png
	fp0.png
	fp173.png
	fp190.png
	fp1_238.png
	fp_0.png
	fp_146.png
	goal.p
	goal.png
	goal300.png
	goal301.png
	goal_check_goal_broken_184.p
	goal_plus.png
	goal_stg.png
	goalre301.png
	grid_229.png
	head.png
	human_traj_debug/
	human_trajectory.p
	human_trajectory_re.p
	jul8_100.png
	jul8_101_toilet.png
	jul8_102.png
	mul.png
	mul_0.0.png
	mul_new.png
	mul_noboundary.png
	mul_yesboundary.png
	ogn_57_0.png
	person_first_rgb/
	person_third_rgb/
	phase1_read_actions_pickles/aug_16_panoptic_fbe/
	phase1_read_actions_pickles_sim_link/
	planner_outputs/
	planner_outputs_7_45am_agentstate/
	planner_outputs_fbe/
	planner_outputs_selem5_aug3/
	planning_window_check_goal_broken_184.p
	rep_52_fake_person.png
	rep_53_fake_person.png
	rep_fake_person.png
	rgb_159.png
	start_check_goal_broken_184.p
	test_fmm_dist_229229.png
	tiffany_utils/
	topdown.png
	topdown/
	topdown_sem.png
	traversable_check_goal_broken_184.p
	traversible300.png
	traversible301.png
	traversible_229.png
	traversible_fake_229.png
	visited.p

no changes added to commit (use "git add" and/or "git commit -a")
(base) soyeonm@soyeonm-mbp OGN % git add -u 
(base) soyeonm@soyeonm-mbp OGN % git commit -m "replay working without planning"
[SIRO_aug20_mapping 92035ad] replay working without planning
 1 file changed, 4 insertions(+), 1 deletion(-)
(base) soyeonm@soyeonm-mbp OGN % git push
Enumerating objects: 7, done.
Counting objects: 100% (7/7), done.
Delta compression using up to 10 threads
Compressing objects: 100% (4/4), done.
Writing objects: 100% (4/4), 454 bytes | 454.00 KiB/s, done.
Total 4 (delta 2), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (2/2), completed with 2 local objects.
To https://github.com/devendrachaplot/OGN.git
   dc3e9d3..92035ad  SIRO_aug20_mapping -> SIRO_aug20_mapping
(base) soyeonm@soyeonm-mbp OGN % python
iPython 3.10.9 (main, Mar  1 2023, 12:33:47) [Clang 14.0.6 ] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> import pickle
>>> a = pickle.load(open('/Users/soyeonm/Documents/SocialNavigation/OGN/fbe_maps/aug20_937pm/success_spot_init/18/visited_pos.p', 'rb')) 
>>> a[144]
{'agent0_rot': 2.0596389770507812, 'agent0_pos': array([-5.445575  ,  0.16957763, -0.37416795], dtype=float32), 'agent1_rot': 0.42580000956984954, 'agent1_pos': array([-3.0352597 ,  0.16957766, -3.1002562 ], dtype=float32)}
>>> a[145]
{'agent0_rot': 2.0596394538879395, 'agent0_pos': array([-5.523843  ,  0.16957763, -0.22702181], dtype=float32), 'agent1_rot': 0.42580000956984954, 'agent1_pos': array([-3.0352597 ,  0.16957766, -3.1002562 ], dtype=float32)}
>>> /Users/soyeonm/Documents/SocialNavigation/OGN/tmp/dump/aug20_937pm/episodes/thread_0/eps_18/0-2-Vis-0.png 
KeyboardInterrupt
>>> /Users/soyeonm/Documents/SocialNavigation/OGN/tmp/dump/sep_17_replay_18_just_do/episodes/thread_0/eps_0/0-1-Vis-145.png /Users/soyeonm/Documents/SocialNavigation/OGN/tmp/dump/aug20_937pm/episodes/thread_0/eps_18/0-2-Vis-145.png 
KeyboardInterrupt
>>> exit()
(base) soyeonm@soyeonm-mbp OGN % python
iPython 3.10.9 (main, Mar  1 2023, 12:33:47) [Clang 14.0.6 ] on darwin
Type "help", "copyright", "credits" or "license" for more information.
m>>> import pickle
>>> map = pickle.load(open('/Users/soyeonm/Documents/SocialNavigation/OGN/fbe_maps/sep_17_replay_18_just_map_with_sp_only/success_spot_init/18/fbe_map.p', 'rb'))

>>> 
>>> import cv2
>>> 
>>> map.shape
torch.Size([17, 720, 720])
>>> map[0]
tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]])
>>> cv2.imshow('map0', map[0].numpy()); cv2.waitKey(1)
-1
>>> #Let's first dilate
>>> import skimage.morphology

>>> 
>>> selem = skimage.morphology.disk(10)
>>> obs_map = map[0].numpy()
>>> dilate10 = skimage.morphology.binary_dilation(obs_map, selem)
>>> cv2.imshow('map_dilate10', dilate10); cv2.waitKey(1)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
cv2.error: OpenCV(4.7.0) :-1: error: (-5:Bad argument) in function 'imshow'
> Overload resolution failed:
>  - mat data type = 0 is not supported
>  - Expected Ptr<cv::cuda::GpuMat> for argument 'mat'
>  - Expected Ptr<cv::UMat> for argument 'mat'

>>> cv2.imshow('map_dilate10', dilate10.astype(float)); cv2.waitKey(1)
-1
>>> selem = skimage.morphology.disk(5)
>>> dilate5 = skimage.morphology.binary_dilation(obs_map, selem)
>>> cv2.imshow('map_dilate5', dilate5.astype(float)); cv2.waitKey(1)
-1
>>> import json
>>> import cv2
>>> import random
>>> img = cv2.imread('/Users/soyeonm/Downloads/floorplan_img.jpg')
>>> 
>>> gray = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)
>>> 
>>> _, thresh = cv2.threshold(gray, 127, 255, cv2.THRESH_BINARY)
>>> cv2.imshow("thresh", thresh)
>>> 
>>> mor_img = cv2.morphologyEx(thresh, cv2.MORPH_OPEN, (5, 5), iterations=3)
>>> 
>>> _, contours, _ = cv2.findContours(mor_img, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: not enough values to unpack (expected 3, got 2)
>>> cv2.findContours(mor_img, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
((array([[[   0,    0]],

       [[   0, 1079]],

       [[1439, 1079]],

       [[1439,    0]]], dtype=int32), array([[[ 233, 1052]],

       [[ 234, 1051]],

       [[ 235, 1052]],

       [[ 234, 1053]]], dtype=int32), array([[[ 202, 1052]],

       [[ 203, 1051]],

       [[ 204, 1052]],

       [[ 203, 1053]]], dtype=int32), array([[[ 241, 1046]],

       [[ 242, 1045]],

       [[ 243, 1046]],

       [[ 242, 1047]]], dtype=int32), array([[[ 244, 1042]],

       [[ 245, 1041]],

       [[ 246, 1042]],

       [[ 245, 1043]]], dtype=int32), array([[[ 191, 1042]],

       [[ 192, 1041]],

       [[ 193, 1042]],

       [[ 192, 1043]]], dtype=int32), array([[[ 773, 1038]],

       [[ 774, 1037]],

       [[ 775, 1038]],

       [[ 774, 1039]]], dtype=int32), array([[[ 321, 1038]],

       [[ 322, 1037]],

       [[ 323, 1038]],

       [[ 322, 1039]]], dtype=int32), array([[[1100, 1037]],

       [[1101, 1036]],

       [[1102, 1036]],

       [[1103, 1037]],

       [[1102, 1038]],

       [[1101, 1038]]], dtype=int32), array([[[ 774, 1037]],

       [[ 775, 1036]],

       [[ 776, 1037]],

       [[ 775, 1038]]], dtype=int32), array([[[ 588, 1037]],

       [[ 589, 1036]],

       [[ 590, 1036]],

       [[ 591, 1037]],

       [[ 590, 1038]],

       [[ 589, 1038]]], dtype=int32), array([[[ 571, 1037]],

       [[ 572, 1036]],

       [[ 573, 1036]],

       [[ 574, 1037]],

       [[ 573, 1038]],

       [[ 572, 1038]]], dtype=int32), array([[[ 320, 1037]],

       [[ 321, 1036]],

       [[ 322, 1037]],

       [[ 321, 1038]]], dtype=int32), array([[[ 789, 1036]],

       [[ 790, 1035]],

       [[ 791, 1035]],

       [[ 793, 1037]],

       [[ 792, 1038]],

       [[ 791, 1038]]], dtype=int32), array([[[ 775, 1036]],

       [[ 776, 1035]],

       [[ 777, 1035]],

       [[ 778, 1036]],

       [[ 777, 1037]],

       [[ 776, 1037]]], dtype=int32), array([[[ 587, 1036]],

       [[ 588, 1035]],

       [[ 589, 1036]],

       [[ 588, 1037]]], dtype=int32), array([[[ 573, 1036]],

       [[ 574, 1035]],

       [[ 575, 1036]],

       [[ 574, 1037]]], dtype=int32), array([[[ 318, 1036]],

       [[ 319, 1035]],

       [[ 320, 1035]],

       [[ 321, 1036]],

       [[ 320, 1037]],

       [[ 319, 1037]]], dtype=int32), array([[[ 188, 1036]],

       [[ 189, 1035]],

       [[ 190, 1036]],

       [[ 189, 1037]]], dtype=int32), array([[[ 311, 1027]],

       [[ 312, 1026]],

       [[ 313, 1027]],

       [[ 313, 1029]],

       [[ 315, 1029]],

       [[ 317, 1027]],

       [[ 318, 1027]],

       [[ 319, 1026]],

       [[ 320, 1027]],

       [[ 320, 1030]],

       [[ 416, 1030]],

       [[ 417, 1031]],

       [[ 416, 1032]],

       [[ 319, 1032]],

       [[ 319, 1035]],

       [[ 318, 1036]],

       [[ 317, 1035]],

       [[ 316, 1035]],

       [[ 314, 1033]],

       [[ 313, 1034]],

       [[ 313, 1037]],

       [[ 312, 1038]],

       [[ 311, 1037]]], dtype=int32), array([[[1109, 1026]],

       [[1110, 1025]],

       [[1111, 1026]],

       [[1111, 1037]],

       [[1110, 1038]],

       [[1109, 1037]],

       [[1109, 1033]],

       [[1107, 1035]],

       [[1106, 1035]],

       [[1104, 1037]],

       [[1103, 1037]],

       [[1102, 1036]],

       [[1103, 1035]],

       [[1103, 1032]],

       [[ 978, 1032]],

       [[ 977, 1031]],

       [[ 978, 1030]],

       [[1102, 1030]],

       [[1102, 1027]],

       [[1103, 1026]],

       [[1104, 1026]],

       [[1106, 1028]],

       [[1107, 1028]],

       [[1109, 1030]]], dtype=int32), array([[[1101, 1026]],

       [[1102, 1025]],

       [[1103, 1026]],

       [[1102, 1027]]], dtype=int32), array([[[ 790, 1026]],

       [[ 791, 1025]],

       [[ 792, 1025]],

       [[ 793, 1026]],

       [[ 792, 1027]],

       [[ 791, 1027]]], dtype=int32), array([[[ 774, 1026]],

       [[ 775, 1025]],

       [[ 776, 1025]],

       [[ 778, 1027]],

       [[ 779, 1027]],

       [[ 781, 1029]],

       [[ 782, 1029]],

       [[ 782, 1026]],

       [[ 783, 1025]],

       [[ 784, 1025]],

       [[ 785, 1026]],

       [[ 785, 1029]],

       [[ 786, 1029]],

       [[ 788, 1027]],

       [[ 789, 1027]],

       [[ 790, 1026]],

       [[ 791, 1027]],

       [[ 791, 1030]],

       [[ 915, 1030]],

       [[ 916, 1031]],

       [[ 915, 1032]],

       [[ 790, 1032]],

       [[ 790, 1035]],

       [[ 789, 1036]],

       [[ 788, 1036]],

       [[ 786, 1034]],

       [[ 785, 1034]],

       [[ 785, 1037]],

       [[ 784, 1038]],

       [[ 783, 1038]],

       [[ 782, 1037]],

       [[ 782, 1033]],

       [[ 780, 1035]],

       [[ 779, 1035]],

       [[ 778, 1036]],

       [[ 777, 1035]],

       [[ 777, 1032]],

       [[ 713, 1032]],

       [[ 712, 1031]],

       [[ 713, 1030]],

       [[ 775, 1030]],

       [[ 775, 1027]]], dtype=int32), array([[[ 588, 1026]],

       [[ 589, 1025]],

       [[ 590, 1026]],

       [[ 589, 1027]]], dtype=int32), array([[[ 572, 1026]],

       [[ 573, 1025]],

       [[ 574, 1026]],

       [[ 573, 1027]]], dtype=int32), array([[[ 319, 1026]],

       [[ 320, 1025]],

       [[ 321, 1025]],

       [[ 322, 1026]],

       [[ 321, 1027]],

       [[ 320, 1027]]], dtype=int32), array([[[1100, 1025]],

       [[1101, 1024]],

       [[1102, 1025]],

       [[1101, 1026]]], dtype=int32), array([[[ 792, 1025]],

       [[ 793, 1024]],

       [[ 794, 1025]],

       [[ 793, 1026]]], dtype=int32), array([[[ 773, 1025]],

       [[ 774, 1024]],

       [[ 775, 1025]],

       [[ 774, 1026]]], dtype=int32), array([[[ 589, 1025]],

       [[ 590, 1024]],

       [[ 591, 1025]],

       [[ 590, 1026]]], dtype=int32), array([[[ 580, 1025]],

       [[ 581, 1024]],

       [[ 582, 1025]],

       [[ 582, 1030]],

       [[ 584, 1028]],

       [[ 585, 1028]],

       [[ 587, 1026]],

       [[ 588, 1026]],

       [[ 589, 1027]],

       [[ 589, 1030]],

       [[ 651, 1030]],

       [[ 652, 1031]],

       [[ 651, 1032]],

       [[ 588, 1032]],

       [[ 588, 1035]],

       [[ 587, 1036]],

       [[ 586, 1036]],

       [[ 585, 1035]],

       [[ 584, 1035]],

       [[ 582, 1033]],

       [[ 582, 1038]],

       [[ 581, 1039]],

       [[ 580, 1038]],

       [[ 580, 1033]],

       [[ 579, 1034]],

       [[ 578, 1034]],

       [[ 576, 1036]],

       [[ 575, 1036]],

       [[ 574, 1035]],

       [[ 574, 1032]],

       [[ 478, 1032]],

       [[ 477, 1031]],

       [[ 478, 1030]],

       [[ 573, 1030]],

       [[ 573, 1027]],

       [[ 574, 1026]],

       [[ 575, 1026]],

       [[ 577, 1028]],

       [[ 578, 1028]],

       [[ 580, 1030]]], dtype=int32), array([[[ 571, 1025]],

       [[ 572, 1024]],

       [[ 573, 1025]],

       [[ 572, 1026]]], dtype=int32), array([[[ 321, 1025]],

       [[ 322, 1024]],

       [[ 323, 1025]],

       [[ 322, 1026]]], dtype=int32), array([[[ 962, 1021]],

       [[ 967, 1021]],

       [[ 970, 1024]],

       [[ 970, 1027]],

       [[ 969, 1028]],

       [[ 969, 1029]],

       [[ 966, 1032]],

       [[ 966, 1035]],

       [[ 969, 1035]],

       [[ 970, 1036]],

       [[ 969, 1037]],

       [[ 960, 1037]],

       [[ 959, 1036]],

       [[ 966, 1029]],

       [[ 966, 1028]],

       [[ 967, 1027]],

       [[ 967, 1024]],

       [[ 966, 1024]],

       [[ 965, 1023]],

       [[ 964, 1023]],

       [[ 963, 1024]],

       [[ 961, 1024]],

       [[ 960, 1023]]], dtype=int32), array([[[ 947, 1022]],

       [[ 948, 1021]],

       [[ 957, 1021]],

       [[ 958, 1022]],

       [[ 957, 1023]],

       [[ 957, 1025]],

       [[ 956, 1026]],

       [[ 956, 1027]],

       [[ 955, 1028]],

       [[ 955, 1029]],

       [[ 954, 1030]],

       [[ 954, 1032]],

       [[ 953, 1033]],

       [[ 953, 1034]],

       [[ 952, 1035]],

       [[ 952, 1036]],

       [[ 951, 1037]],

       [[ 950, 1037]],

       [[ 949, 1036]],

       [[ 950, 1035]],

       [[ 950, 1033]],

       [[ 951, 1032]],

       [[ 951, 1031]],

       [[ 952, 1030]],

       [[ 952, 1028]],

       [[ 953, 1027]],

       [[ 953, 1024]],

       [[ 948, 1024]],

       [[ 947, 1023]]], dtype=int32), array([[[ 938, 1021]],

       [[ 942, 1021]],

       [[ 945, 1024]],

       [[ 945, 1026]],

       [[ 946, 1027]],

       [[ 946, 1030]],

       [[ 945, 1031]],

       [[ 945, 1034]],

       [[ 942, 1037]],

       [[ 941, 1037]],

       [[ 940, 1038]],

       [[ 938, 1038]],

       [[ 936, 1036]],

       [[ 937, 1035]],

       [[ 940, 1035]],

       [[ 940, 1032]],

       [[ 939, 1032]],

       [[ 938, 1031]],

       [[ 937, 1031]],

       [[ 935, 1029]],

       [[ 935, 1024]]], dtype=int32), array([[[ 942, 1031]],

       [[ 942, 1034]]], dtype=int32), array([[[ 940, 1023]],

       [[ 939, 1024]],

       [[ 938, 1024]],

       [[ 938, 1028]],

       [[ 939, 1029]],

       [[ 941, 1029]],

       [[ 942, 1028]],

       [[ 942, 1024]],

       [[ 941, 1023]]], dtype=int32), array([[[ 924, 1022]],

       [[ 925, 1021]],

       [[ 930, 1021]],

       [[ 933, 1024]],

       [[ 933, 1026]],

       [[ 932, 1027]],

       [[ 932, 1030]],

       [[ 933, 1031]],

       [[ 933, 1034]],

       [[ 932, 1035]],

       [[ 932, 1036]],

       [[ 931, 1037]],

       [[ 929, 1037]],

       [[ 928, 1038]],

       [[ 926, 1038]],

       [[ 925, 1037]],

       [[ 924, 1037]],

       [[ 923, 1036]],

       [[ 923, 1035]],

       [[ 924, 1034]],

       [[ 925, 1035]],

       [[ 929, 1035]],

       [[ 930, 1034]],

       [[ 930, 1031]],

       [[ 929, 1031]],

       [[ 928, 1030]],

       [[ 926, 1030]],

       [[ 925, 1029]],

       [[ 926, 1028]],

       [[ 928, 1028]],

       [[ 929, 1027]],

       [[ 929, 1024]],

       [[ 928, 1023]],

       [[ 927, 1023]],

       [[ 926, 1024]],

       [[ 925, 1024]],

       [[ 924, 1023]]], dtype=int32), array([[[ 697, 1021]],

       [[ 702, 1021]],

       [[ 705, 1024]],

       [[ 705, 1026]],

       [[ 704, 1027]],

       [[ 704, 1028]],

       [[ 703, 1029]],

       [[ 703, 1030]],

       [[ 701, 1032]],

       [[ 701, 1035]],

       [[ 704, 1035]],

       [[ 705, 1036]],

       [[ 704, 1037]],

       [[ 695, 1037]],

       [[ 694, 1036]],

       [[ 700, 1030]],

       [[ 700, 1029]],

       [[ 701, 1028]],

       [[ 701, 1024]],

       [[ 700, 1023]],

       [[ 699, 1023]],

       [[ 698, 1024]],

       [[ 697, 1024]],

       [[ 696, 1025]],

       [[ 695, 1024]],

       [[ 695, 1023]]], dtype=int32), array([[[ 687, 1021]],

       [[ 691, 1021]],

       [[ 692, 1022]],

       [[ 692, 1023]],

       [[ 691, 1024]],

       [[ 690, 1023]],

       [[ 689, 1023]],

       [[ 688, 1024]],

       [[ 687, 1024]],

       [[ 686, 1025]],

       [[ 686, 1028]],

       [[ 687, 1029]],

       [[ 686, 1030]],

       [[ 686, 1034]],

       [[ 687, 1035]],

       [[ 689, 1035]],

       [[ 690, 1034]],

       [[ 690, 1030]],

       [[ 689, 1029]],

       [[ 687, 1029]],

       [[ 686, 1028]],

       [[ 687, 1027]],

       [[ 690, 1027]],

       [[ 693, 1030]],

       [[ 693, 1034]],

       [[ 689, 1038]],

       [[ 687, 1038]],

       [[ 686, 1037]],

       [[ 685, 1037]],

       [[ 684, 1036]],

       [[ 684, 1035]],

       [[ 683, 1034]],

       [[ 683, 1032]],

       [[ 682, 1031]],

       [[ 682, 1029]],

       [[ 683, 1028]],

       [[ 683, 1025]]], dtype=int32), array([[[ 677, 1021]],

       [[ 678, 1021]],

       [[ 679, 1022]],

       [[ 679, 1030]],

       [[ 681, 1032]],

       [[ 679, 1034]],

       [[ 679, 1036]],

       [[ 678, 1037]],

       [[ 677, 1036]],

       [[ 677, 1034]],

       [[ 676, 1033]],

       [[ 670, 1033]],

       [[ 669, 1032]],

       [[ 671, 1030]],

       [[ 671, 1029]],

       [[ 673, 1027]],

       [[ 673, 1026]],

       [[ 675, 1024]],

       [[ 675, 1023]]], dtype=int32), array([[[ 677, 1025]],

       [[ 675, 1027]],

       [[ 675, 1031]],

       [[ 677, 1031]]], dtype=int32), array([[[ 661, 1021]],

       [[ 666, 1021]],

       [[ 669, 1024]],

       [[ 669, 1026]],

       [[ 668, 1027]],

       [[ 668, 1028]],

       [[ 667, 1029]],

       [[ 667, 1030]],

       [[ 665, 1032]],

       [[ 665, 1035]],

       [[ 668, 1035]],

       [[ 669, 1036]],

       [[ 668, 1037]],

       [[ 659, 1037]],

       [[ 658, 1036]],

       [[ 663, 1031]],

       [[ 663, 1030]],

       [[ 665, 1028]],

       [[ 665, 1024]],

       [[ 664, 1023]],

       [[ 663, 1023]],

       [[ 662, 1024]],

       [[ 661, 1024]],

       [[ 660, 1025]],

       [[ 659, 1024]],

       [[ 659, 1023]]], dtype=int32), array([[[ 466, 1021]],

       [[ 467, 1021]],

       [[ 468, 1022]],

       [[ 468, 1031]],

       [[ 469, 1031]],

       [[ 470, 1032]],

       [[ 468, 1034]],

       [[ 468, 1036]],

       [[ 467, 1037]],

       [[ 466, 1037]],

       [[ 465, 1036]],

       [[ 465, 1033]],

       [[ 459, 1033]],

       [[ 458, 1032]],

       [[ 459, 1031]],

       [[ 459, 1030]],

       [[ 461, 1028]],

       [[ 461, 1027]],

       [[ 463, 1025]],

       [[ 463, 1024]]], dtype=int32), array([[[ 465, 1025]],

       [[ 465, 1026]],

       [[ 463, 1028]],

       [[ 463, 1031]],

       [[ 465, 1031]]], dtype=int32), array([[[ 451, 1022]],

       [[ 452, 1021]],

       [[ 456, 1021]],

       [[ 457, 1022]],

       [[ 457, 1023]],

       [[ 456, 1024]],

       [[ 455, 1023]],

       [[ 454, 1023]],

       [[ 453, 1024]],

       [[ 452, 1024]],

       [[ 452, 1027]],

       [[ 455, 1027]],

       [[ 458, 1030]],

       [[ 458, 1034]],

       [[ 455, 1037]],

       [[ 454, 1037]],

       [[ 453, 1038]],

       [[ 452, 1038]],

       [[ 451, 1037]],

       [[ 450, 1037]],

       [[ 448, 1035]],

       [[ 448, 1033]],

       [[ 447, 1032]],

       [[ 447, 1028]],

       [[ 448, 1027]],

       [[ 448, 1025]],

       [[ 449, 1024]],

       [[ 449, 1023]],

       [[ 450, 1022]]], dtype=int32), array([[[ 452, 1029]],

       [[ 451, 1030]],

       [[ 451, 1034]],

       [[ 452, 1035]],

       [[ 454, 1035]],

       [[ 455, 1034]],

       [[ 455, 1030]],

       [[ 454, 1030]],

       [[ 453, 1029]]], dtype=int32), array([[[ 438, 1021]],

       [[ 443, 1021]],

       [[ 445, 1023]],

       [[ 445, 1024]],

       [[ 446, 1025]],

       [[ 445, 1026]],

       [[ 445, 1028]],

       [[ 443, 1030]],

       [[ 443, 1031]],

       [[ 442, 1032]],

       [[ 441, 1032]],

       [[ 441, 1035]],

       [[ 444, 1035]],

       [[ 445, 1036]],

       [[ 444, 1037]],

       [[ 436, 1037]],

       [[ 435, 1036]],

       [[ 435, 1035]],

       [[ 442, 1028]],

       [[ 442, 1024]],

       [[ 441, 1023]],

       [[ 440, 1023]],

       [[ 439, 1024]],

       [[ 438, 1024]],

       [[ 437, 1025]],

       [[ 436, 1024]],

       [[ 436, 1023]]], dtype=int32), array([[[ 426, 1021]],

       [[ 430, 1021]],

       [[ 433, 1024]],

       [[ 433, 1026]],

       [[ 432, 1027]],

       [[ 432, 1030]],

       [[ 433, 1031]],

       [[ 433, 1035]],

       [[ 431, 1037]],

       [[ 429, 1037]],

       [[ 428, 1038]],

       [[ 427, 1038]],

       [[ 426, 1037]],

       [[ 425, 1037]],

       [[ 424, 1036]],

       [[ 424, 1035]],

       [[ 425, 1034]],

       [[ 426, 1035]],

       [[ 429, 1035]],

       [[ 430, 1034]],

       [[ 430, 1031]],

       [[ 429, 1031]],

       [[ 428, 1030]],

       [[ 426, 1030]],

       [[ 425, 1029]],

       [[ 426, 1028]],

       [[ 428, 1028]],

       [[ 429, 1027]],

       [[ 429, 1024]],

       [[ 428, 1023]],

       [[ 427, 1023]],

       [[ 426, 1024]],

       [[ 425, 1024]],

       [[ 424, 1023]]], dtype=int32), array([[[ 249, 1019]],

       [[ 250, 1018]],

       [[ 251, 1019]],

       [[ 250, 1020]]], dtype=int32), array([[[233, 996]],

       [[234, 995]],

       [[235, 996]],

       [[234, 997]]], dtype=int32), array([[[ 219,  995]],

       [[ 220,  996]],

       [[ 220, 1000]],

       [[ 221, 1001]],

       [[ 221, 1006]],

       [[ 222, 1007]],

       [[ 222, 1012]],

       [[ 223, 1013]],

       [[ 223, 1017]],

       [[ 224, 1018]],

       [[ 224, 1022]],

       [[ 225, 1023]],

       [[ 225, 1028]],

       [[ 226, 1029]],

       [[ 226, 1033]],

       [[ 227, 1034]],

       [[ 227, 1039]],

       [[ 228, 1040]],

       [[ 228, 1044]],

       [[ 229, 1045]],

       [[ 229, 1049]],

       [[ 230, 1050]],

       [[ 230, 1052]],

       [[ 229, 1053]],

       [[ 227, 1051]],

       [[ 227, 1050]],

       [[ 221, 1044]],

       [[ 221, 1043]],

       [[ 219, 1041]],

       [[ 218, 1041]],

       [[ 216, 1043]],

       [[ 216, 1044]],

       [[ 211, 1049]],

       [[ 211, 1050]],

       [[ 208, 1053]],

       [[ 207, 1052]],

       [[ 207, 1051]],

       [[ 208, 1050]],

       [[ 208, 1045]],

       [[ 209, 1044]],

       [[ 209, 1040]],

       [[ 210, 1039]],

       [[ 210, 1034]],

       [[ 211, 1033]],

       [[ 211, 1029]],

       [[ 212, 1028]],

       [[ 212, 1023]],

       [[ 213, 1022]],

       [[ 213, 1018]],

       [[ 214, 1017]],

       [[ 214, 1013]],

       [[ 215, 1012]],

       [[ 215, 1007]],

       [[ 216, 1006]],

       [[ 216, 1002]],

       [[ 217, 1001]],

       [[ 217,  997]]], dtype=int32), array([[[202, 996]],

       [[203, 995]],

       [[204, 996]],

       [[203, 997]]], dtype=int32), array([[[225, 993]],

       [[226, 992]],

       [[227, 993]],

       [[226, 994]]], dtype=int32), array([[[210, 993]],

       [[211, 992]],

       [[212, 993]],

       [[211, 994]]], dtype=int32), array([[[213, 968]],

       [[214, 969]],

       [[215, 969]],

       [[216, 970]],

       [[216, 971]],

       [[217, 972]],

       [[217, 973]],

       [[219, 975]],

       [[219, 976]],

       [[221, 978]],

       [[221, 979]],

       [[222, 980]],

       [[222, 981]],

       [[222, 970]],

       [[223, 969]],

       [[224, 969]],

       [[225, 970]],

       [[225, 984]],

       [[224, 985]],

       [[222, 985]],

       [[221, 984]],

       [[221, 983]],

       [[219, 981]],

       [[219, 980]],

       [[218, 979]],

       [[218, 978]],

       [[215, 975]],

       [[215, 974]],

       [[214, 973]],

       [[214, 984]],

       [[213, 985]],

       [[212, 985]],

       [[211, 984]],

       [[211, 970]]], dtype=int32), array([[[1212,  937]],

       [[1213,  936]],

       [[1214,  937]],

       [[1213,  938]]], dtype=int32), array([[[1219,  936]],

       [[1220,  935]],

       [[1221,  936]],

       [[1220,  937]]], dtype=int32), array([[[220, 936]],

       [[221, 935]],

       [[222, 936]],

       [[221, 937]]], dtype=int32), array([[[1211,  935]],

       [[1212,  934]],

       [[1213,  935]],

       [[1213,  936]],

       [[1212,  937]],

       [[1211,  936]]], dtype=int32), array([[[1220,  934]],

       [[1221,  933]],

       [[1222,  934]],

       [[1222,  935]],

       [[1221,  936]],

       [[1220,  935]]], dtype=int32), array([[[1210,  934]],

       [[1211,  933]],

       [[1212,  934]],

       [[1211,  935]]], dtype=int32), array([[[221, 934]],

       [[222, 933]],

       [[223, 934]],

       [[223, 935]],

       [[222, 936]],

       [[221, 935]]], dtype=int32), array([[[211, 934]],

       [[212, 933]],

       [[214, 935]],

       [[214, 936]],

       [[213, 937]],

       [[211, 935]]], dtype=int32), array([[[1221,  933]],

       [[1222,  932]],

       [[1223,  933]],

       [[1222,  934]]], dtype=int32), array([[[1209,  933]],

       [[1210,  932]],

       [[1211,  933]],

       [[1210,  934]]], dtype=int32), array([[[222, 933]],

       [[223, 932]],

       [[224, 933]],

       [[223, 934]]], dtype=int32), array([[[210, 933]],

       [[211, 932]],

       [[212, 933]],

       [[211, 934]]], dtype=int32), array([[[685, 915]],

       [[686, 914]],

       [[687, 915]],

       [[686, 916]]], dtype=int32), array([[[687, 914]],

       [[688, 913]],

       [[689, 914]],

       [[688, 915]]], dtype=int32), array([[[689, 913]],

       [[690, 912]],

       [[691, 913]],

       [[690, 914]]], dtype=int32), array([[[668, 910]],

       [[669, 909]],

       [[670, 910]],

       [[670, 911]],

       [[671, 912]],

       [[670, 913]],

       [[668, 913]],

       [[667, 912]],

       [[668, 911]]], dtype=int32), array([[[695, 907]],

       [[696, 908]],

       [[696, 910]],

       [[695, 911]],

       [[695, 912]],

       [[694, 913]],

       [[691, 913]],

       [[690, 912]],

       [[691, 911]],

       [[692, 911]],

       [[692, 910]]], dtype=int32), array([[[666, 907]],

       [[667, 906]],

       [[668, 907]],

       [[667, 908]]], dtype=int32), array([[[695, 906]],

       [[696, 905]],

       [[697, 906]],

       [[697, 907]],

       [[696, 908]],

       [[695, 907]]], dtype=int32), array([[[665, 905]],

       [[666, 904]],

       [[667, 905]],

       [[666, 906]]], dtype=int32), array([[[696, 904]],

       [[697, 903]],

       [[698, 904]],

       [[698, 905]],

       [[697, 906]],

       [[696, 905]]], dtype=int32), array([[[664, 903]],

       [[665, 902]],

       [[666, 903]],

       [[665, 904]]], dtype=int32), array([[[1215,  902]],

       [[1216,  901]],

       [[1217,  902]],

       [[1217,  939]],

       [[1218,  938]],

       [[1218,  937]],

       [[1219,  936]],

       [[1220,  937]],

       [[1220,  941]],

       [[1222,  941]],

       [[1223,  942]],

       [[1222,  943]],

       [[1210,  943]],

       [[1209,  942]],

       [[1210,  941]],

       [[1213,  941]],

       [[1213,  938]],

       [[1214,  937]],

       [[1215,  938]],

       [[1215,  939]]], dtype=int32), array([[[697, 901]],

       [[698, 900]],

       [[699, 901]],

       [[699, 903]],

       [[698, 904]],

       [[697, 903]]], dtype=int32), array([[[664, 891]],

       [[665, 890]],

       [[666, 891]],

       [[666, 893]],

       [[664, 895]],

       [[663, 894]],

       [[663, 893]],

       [[664, 892]]], dtype=int32), array([[[664, 884]],

       [[665, 883]],

       [[666, 884]],

       [[666, 886]],

       [[665, 887]],

       [[664, 886]]], dtype=int32), array([[[664, 878]],

       [[665, 877]],

       [[726, 877]],

       [[727, 878]],

       [[726, 879]],

       [[699, 879]],

       [[699, 883]],

       [[700, 884]],

       [[700, 891]],

       [[701, 892]],

       [[701, 897]],

       [[700, 898]],

       [[700, 900]],

       [[699, 901]],

       [[698, 900]],

       [[698, 895]],

       [[697, 894]],

       [[697, 885]],

       [[696, 884]],

       [[666, 884]],

       [[665, 883]],

       [[665, 879]]], dtype=int32), array([[[661, 878]],

       [[662, 877]],

       [[663, 877]],

       [[664, 878]],

       [[663, 879]],

       [[662, 879]]], dtype=int32), array([[[644, 878]],

       [[645, 877]],

       [[660, 877]],

       [[661, 878]],

       [[660, 879]],

       [[645, 879]]], dtype=int32), array([[[728, 877]],

       [[729, 876]],

       [[730, 877]],

       [[729, 878]]], dtype=int32), array([[[1210,  872]],

       [[1211,  871]],

       [[1212,  872]],

       [[1213,  872]],

       [[1220,  879]],

       [[1223,  879]],

       [[1224,  878]],

       [[1224,  875]],

       [[1223,  874]],

       [[1223,  873]],

       [[1224,  872]],

       [[1226,  874]],

       [[1226,  879]],

       [[1224,  881]],

       [[1224,  884]],

       [[1226,  886]],

       [[1226,  891]],

       [[1223,  894]],

       [[1222,  894]],

       [[1221,  893]],

       [[1220,  893]],

       [[1219,  892]],

       [[1218,  892]],

       [[1216,  894]],

       [[1213,  894]],

       [[1210,  891]],

       [[1210,  886]],

       [[1212,  884]],

       [[1213,  884]],

       [[1214,  883]],

       [[1215,  883]],

       [[1216,  884]],

       [[1217,  884]],

       [[1218,  885]],

       [[1218,  886]],

       [[1219,  886]],

       [[1220,  885]],

       [[1220,  881]],

       [[1219,  881]],

       [[1218,  880]],

       [[1217,  880]],

       [[1213,  876]],

       [[1213,  879]],

       [[1212,  880]],

       [[1212,  881]],

       [[1211,  882]],

       [[1210,  881]]], dtype=int32), array([[[1221,  887]],

       [[1221,  890]],

       [[1222,  891]],

       [[1223,  891]],

       [[1223,  887]]], dtype=int32), array([[[1214,  886]],

       [[1213,  887]],

       [[1213,  891]],

       [[1216,  891]],

       [[1216,  887]],

       [[1215,  886]]], dtype=int32), array([[[688, 870]],

       [[689, 869]],

       [[690, 870]],

       [[690, 872]],

       [[689, 873]],

       [[688, 872]]], dtype=int32), array([[[216, 862]],

       [[217, 861]],

       [[218, 862]],

       [[218, 939]],

       [[218, 938]],

       [[220, 936]],

       [[221, 937]],

       [[221, 941]],

       [[223, 941]],

       [[224, 942]],

       [[223, 943]],

       [[211, 943]],

       [[210, 942]],

       [[211, 941]],

       [[213, 941]],

       [[213, 937]],

       [[214, 936]],

       [[216, 938]],

       [[216, 939]]], dtype=int32), array([[[1224,  860]],

       [[1225,  859]],

       [[1226,  860]],

       [[1226,  868]],

       [[1225,  869]],

       [[1223,  869]],

       [[1222,  868]],

       [[1220,  868]],

       [[1219,  867]],

       [[1218,  867]],

       [[1217,  866]],

       [[1216,  866]],

       [[1215,  865]],

       [[1213,  865]],

       [[1212,  864]],

       [[1211,  864]],

       [[1210,  863]],

       [[1210,  862]],

       [[1211,  861]],

       [[1212,  861]],

       [[1213,  862]],

       [[1214,  862]],

       [[1215,  863]],

       [[1217,  863]],

       [[1218,  864]],

       [[1219,  864]],

       [[1220,  865]],

       [[1221,  865]],

       [[1222,  866]],

       [[1224,  866]]], dtype=int32), array([[[711, 856]],

       [[712, 855]],

       [[713, 855]],

       [[714, 856]],

       [[713, 857]],

       [[712, 857]]], dtype=int32), array([[[709, 856]],

       [[710, 855]],

       [[711, 856]],

       [[710, 857]]], dtype=int32), array([[[707, 855]],

       [[708, 854]],

       [[709, 855]],

       [[708, 856]]], dtype=int32), array([[[652, 853]],

       [[653, 852]],

       [[655, 854]],

       [[655, 856]],

       [[654, 857]],

       [[653, 857]],

       [[652, 856]]], dtype=int32), array([[[633, 850]],

       [[634, 849]],

       [[635, 850]],

       [[634, 851]]], dtype=int32), array([[[1210,  849]],

       [[1211,  848]],

       [[1212,  849]],

       [[1212,  851]],

       [[1223,  851]],

       [[1223,  849]],

       [[1224,  848]],

       [[1226,  850]],

       [[1226,  853]],

       [[1225,  854]],

       [[1212,  854]],

       [[1212,  856]],

       [[1211,  857]],

       [[1210,  856]]], dtype=int32), array([[[225, 844]],

       [[226, 843]],

       [[227, 844]],

       [[227, 853]],

       [[226, 854]],

       [[225, 854]],

       [[224, 853]],

       [[223, 853]],

       [[222, 852]],

       [[220, 852]],

       [[219, 851]],

       [[218, 851]],

       [[217, 850]],

       [[216, 850]],

       [[215, 849]],

       [[213, 849]],

       [[211, 847]],

       [[211, 846]],

       [[212, 845]],

       [[213, 846]],

       [[214, 846]],

       [[215, 847]],

       [[217, 847]],

       [[218, 848]],

       [[219, 848]],

       [[220, 849]],

       [[221, 849]],

       [[222, 850]],

       [[225, 850]]], dtype=int32), array([[[637, 840]],

       [[657, 840]],

       [[658, 841]],

       [[659, 840]],

       [[663, 840]],

       [[664, 841]],

       [[665, 840]],

       [[671, 840]],

       [[672, 841]],

       [[677, 841]],

       [[678, 840]],

       [[685, 840]],

       [[686, 841]],

       [[687, 841]],

       [[688, 840]],

       [[729, 840]],

       [[732, 843]],

       [[731, 844]],

       [[731, 862]],

       [[732, 863]],

       [[732, 866]],

       [[731, 867]],

       [[731, 876]],

       [[730, 877]],

       [[729, 876]],

       [[729, 844]],

       [[673, 844]],

       [[673, 847]],

       [[674, 848]],

       [[674, 850]],

       [[675, 851]],

       [[675, 853]],

       [[676, 854]],

       [[676, 855]],

       [[677, 856]],

       [[677, 858]],

       [[678, 859]],

       [[678, 861]],

       [[679, 862]],

       [[679, 860]],

       [[680, 859]],

       [[687, 859]],

       [[689, 861]],

       [[689, 863]],

       [[688, 864]],

       [[688, 868]],

       [[687, 869]],

       [[687, 873]],

       [[686, 874]],

       [[679, 874]],

       [[678, 873]],

       [[678, 864]],

       [[677, 865]],

       [[676, 865]],

       [[675, 866]],

       [[673, 866]],

       [[672, 867]],

       [[670, 867]],

       [[669, 868]],

       [[667, 868]],

       [[666, 869]],

       [[664, 869]],

       [[663, 870]],

       [[662, 870]],

       [[661, 871]],

       [[659, 871]],

       [[657, 869]],

       [[657, 867]],

       [[656, 866]],

       [[656, 865]],

       [[655, 864]],

       [[655, 862]],

       [[654, 861]],

       [[654, 860]],

       [[655, 859]],

       [[655, 858]],

       [[656, 857]],

       [[658, 859]],

       [[658, 860]],

       [[659, 861]],

       [[659, 862]],

       [[660, 863]],

       [[660, 864]],

       [[661, 865]],

       [[661, 866]],

       [[662, 867]],

       [[663, 866]],

       [[664, 866]],

       [[665, 865]],

       [[666, 865]],

       [[667, 864]],

       [[668, 864]],

       [[669, 863]],

       [[671, 863]],

       [[672, 862]],

       [[672, 858]],

       [[671, 857]],

       [[671, 855]],

       [[670, 854]],

       [[670, 853]],

       [[669, 852]],

       [[669, 851]],

       [[668, 850]],

       [[667, 851]],

       [[664, 851]],

       [[663, 852]],

       [[661, 852]],

       [[660, 853]],

       [[659, 853]],

       [[658, 854]],

       [[656, 854]],

       [[655, 853]],

       [[655, 852]],

       [[657, 850]],

       [[658, 850]],

       [[659, 849]],

       [[661, 849]],

       [[662, 848]],

       [[664, 848]],

       [[665, 847]],

       [[667, 847]],

       [[667, 844]],

       [[635, 844]],

       [[634, 843]]], dtype=int32), array([[[215, 832]],

       [[216, 831]],

       [[222, 831]],

       [[223, 832]],

       [[224, 832]],

       [[225, 833]],

       [[226, 833]],

       [[227, 834]],

       [[227, 839]],

       [[225, 841]],

       [[224, 841]],

       [[223, 842]],

       [[215, 842]],

       [[214, 841]],

       [[213, 841]],

       [[211, 839]],

       [[211, 834]],

       [[213, 832]]], dtype=int32), array([[[215, 834]],

       [[214, 835]],

       [[214, 838]],

       [[215, 839]],

       [[223, 839]],

       [[224, 838]],

       [[224, 835]],

       [[223, 834]]], dtype=int32), array([[[664, 825]],

       [[666, 827]],

       [[666, 828]],

       [[664, 830]],

       [[663, 830]],

       [[662, 829]],

       [[662, 827]]], dtype=int32), array([[[682, 816]],

       [[683, 815]],

       [[685, 815]],

       [[686, 816]],

       [[687, 815]],

       [[692, 815]],

       [[693, 816]],

       [[693, 817]],

       [[695, 815]],

       [[700, 815]],

       [[702, 817]],

       [[702, 829]],

       [[701, 830]],

       [[699, 828]],

       [[699, 821]],

       [[698, 820]],

       [[698, 818]],

       [[695, 818]],

       [[695, 819]],

       [[694, 820]],

       [[694, 828]],

       [[692, 830]],

       [[690, 828]],

       [[690, 819]],

       [[689, 818]],

       [[687, 818]],

       [[686, 819]],

       [[686, 828]],

       [[685, 829]],

       [[683, 829]],

       [[682, 828]]], dtype=int32), array([[[667, 811]],

       [[668, 810]],

       [[679, 810]],

       [[680, 811]],

       [[680, 812]],

       [[679, 813]],

       [[679, 814]],

       [[678, 815]],

       [[678, 816]],

       [[677, 817]],

       [[677, 819]],

       [[676, 820]],

       [[676, 821]],

       [[675, 822]],

       [[675, 824]],

       [[674, 825]],

       [[674, 826]],

       [[673, 827]],

       [[673, 828]],

       [[672, 829]],

       [[670, 829]],

       [[669, 828]],

       [[670, 827]],

       [[670, 826]],

       [[671, 825]],

       [[671, 823]],

       [[672, 822]],

       [[672, 821]],

       [[673, 820]],

       [[673, 818]],

       [[674, 817]],

       [[674, 813]],

       [[668, 813]],

       [[667, 812]]], dtype=int32), array([[[707, 809]],

       [[709, 809]],

       [[710, 810]],

       [[711, 810]],

       [[712, 811]],

       [[712, 815]],

       [[711, 816]],

       [[711, 819]],

       [[712, 819]],

       [[713, 820]],

       [[713, 821]],

       [[712, 822]],

       [[705, 822]],

       [[704, 821]],

       [[704, 819]],

       [[705, 818]],

       [[706, 818]],

       [[707, 817]],

       [[707, 816]],

       [[708, 815]],

       [[708, 812]],

       [[707, 813]],

       [[705, 813]],

       [[704, 812]]], dtype=int32), array([[[653, 810]],

       [[654, 809]],

       [[657, 809]],

       [[659, 811]],

       [[659, 812]],

       [[658, 813]],

       [[653, 813]],

       [[652, 814]],

       [[652, 817]],

       [[653, 817]],

       [[654, 816]],

       [[655, 816]],

       [[656, 817]],

       [[657, 817]],

       [[660, 820]],

       [[660, 826]],

       [[657, 829]],

       [[656, 829]],

       [[655, 830]],

       [[653, 830]],

       [[652, 829]],

       [[651, 829]],

       [[648, 826]],

       [[648, 825]],

       [[647, 824]],

       [[647, 817]],

       [[648, 816]],

       [[648, 814]],

       [[652, 810]]], dtype=int32), array([[[652, 820]],

       [[651, 821]],

       [[651, 825]],

       [[652, 826]],

       [[656, 826]],

       [[656, 821]],

       [[655, 820]]], dtype=int32), array([[[1209,  809]],

       [[1210,  808]],

       [[1211,  809]],

       [[1210,  810]]], dtype=int32), array([[[1221,  808]],

       [[1222,  807]],

       [[1223,  808]],

       [[1223,  809]],

       [[1222,  810]],

       [[1221,  809]]], dtype=int32), array([[[211, 808]],

       [[212, 807]],

       [[213, 807]],

       [[219, 813]],

       [[220, 813]],

       [[221, 814]],

       [[224, 814]],

       [[225, 813]],

       [[225, 810]],

       [[224, 809]],

       [[224, 808]],

       [[225, 807]],

       [[227, 809]],

       [[227, 828]],

       [[226, 829]],

       [[224, 829]],

       [[223, 828]],

       [[222, 828]],

       [[221, 827]],

       [[219, 827]],

       [[218, 826]],

       [[217, 826]],

       [[216, 825]],

       [[215, 825]],

       [[214, 824]],

       [[212, 824]],

       [[211, 823]],

       [[211, 822]],

       [[212, 821]],

       [[213, 821]],

       [[214, 822]],

       [[216, 822]],

       [[217, 823]],

       [[218, 823]],

       [[219, 824]],

       [[221, 824]],

       [[222, 825]],

       [[223, 825]],

       [[224, 826]],

       [[225, 826]],

       [[225, 816]],

       [[224, 817]],

       [[221, 817]],

       [[220, 816]],

       [[219, 816]],

       [[214, 811]],

       [[214, 815]],

       [[212, 817]],

       [[211, 816]]], dtype=int32), array([[[1220,  807]],

       [[1221,  806]],

       [[1222,  807]],

       [[1221,  808]]], dtype=int32), array([[[1210,  807]],

       [[1211,  806]],

       [[1212,  807]],

       [[1212,  808]],

       [[1211,  809]],

       [[1210,  808]]], dtype=int32), array([[[1211,  806]],

       [[1212,  805]],

       [[1213,  806]],

       [[1212,  807]]], dtype=int32), array([[[1219,  805]],

       [[1220,  804]],

       [[1221,  805]],

       [[1221,  806]],

       [[1220,  807]],

       [[1219,  806]]], dtype=int32), array([[[1212,  795]],

       [[1213,  794]],

       [[1214,  795]],

       [[1213,  796]]], dtype=int32), array([[[1219,  794]],

       [[1220,  793]],

       [[1221,  794]],

       [[1220,  795]]], dtype=int32), array([[[1211,  793]],

       [[1212,  792]],

       [[1213,  793]],

       [[1213,  794]],

       [[1212,  795]],

       [[1211,  794]]], dtype=int32), array([[[1220,  792]],

       [[1221,  791]],

       [[1222,  792]],

       [[1222,  793]],

       [[1221,  794]],

       [[1220,  793]]], dtype=int32), array([[[1210,  792]],

       [[1211,  791]],

       [[1212,  792]],

       [[1211,  793]]], dtype=int32), array([[[1221,  791]],

       [[1222,  790]],

       [[1223,  791]],

       [[1222,  792]]], dtype=int32), array([[[1209,  790]],

       [[1210,  789]],

       [[1211,  790]],

       [[1211,  791]],

       [[1210,  792]],

       [[1209,  791]]], dtype=int32), array([[[701, 777]],

       [[702, 776]],

       [[705, 776]],

       [[706, 777]],

       [[708, 777]],

       [[710, 779]],

       [[710, 780]],

       [[711, 781]],

       [[711, 782]],

       [[710, 783]],

       [[710, 787]],

       [[711, 788]],

       [[711, 789]],

       [[712, 790]],

       [[711, 791]],

       [[711, 793]],

       [[708, 796]],

       [[699, 796]],

       [[698, 795]],

       [[698, 778]],

       [[699, 777]]], dtype=int32), array([[[702, 788]],

       [[702, 793]],

       [[706, 793]],

       [[707, 792]],

       [[707, 789]],

       [[706, 788]]], dtype=int32), array([[[702, 780]],

       [[702, 784]],

       [[706, 784]],

       [[706, 781]],

       [[705, 780]]], dtype=int32), array([[[650, 776]],

       [[661, 776]],

       [[662, 777]],

       [[662, 778]],

       [[661, 779]],

       [[657, 779]],

       [[657, 782]],

       [[658, 782]],

       [[659, 783]],

       [[660, 783]],

       [[661, 784]],

       [[661, 792]],

       [[660, 793]],

       [[659, 792]],

       [[657, 792]],

       [[657, 796]],

       [[661, 796]],

       [[662, 797]],

       [[662, 798]],

       [[661, 799]],

       [[649, 799]],

       [[648, 798]],

       [[648, 778]]], dtype=int32), array([[[652, 792]],

       [[652, 796]],

       [[654, 796]],

       [[654, 792]]], dtype=int32), array([[[656, 785]],

       [[655, 786]],

       [[652, 786]],

       [[652, 789]],

       [[658, 789]],

       [[658, 786]],

       [[657, 786]]], dtype=int32), array([[[652, 779]],

       [[652, 783]],

       [[654, 783]],

       [[654, 779]]], dtype=int32), array([[[682, 776]],

       [[683, 775]],

       [[684, 775]],

       [[686, 777]],

       [[686, 778]],

       [[695, 778]],

       [[696, 779]],

       [[696, 782]],

       [[695, 783]],

       [[694, 783]],

       [[694, 792]],

       [[695, 793]],

       [[695, 796]],

       [[696, 796]],

       [[697, 797]],

       [[697, 798]],

       [[696, 799]],

       [[673, 799]],

       [[672, 798]],

       [[672, 797]],

       [[673, 796]],

       [[674, 796]],

       [[674, 792]],

       [[675, 791]],

       [[675, 783]],

       [[674, 783]],

       [[673, 782]],

       [[673, 779]],

       [[674, 778]],

       [[682, 778]]], dtype=int32), array([[[663, 776]],

       [[664, 775]],

       [[665, 775]],

       [[666, 776]],

       [[666, 782]],

       [[672, 788]],

       [[672, 789]],

       [[671, 790]],

       [[670, 790]],

       [[666, 786]],

       [[666, 798]],

       [[664, 800]],

       [[663, 799]],

       [[663, 791]],

       [[662, 790]],

       [[662, 788]],

       [[663, 787]]], dtype=int32), array([[[738, 774]],

       [[739, 773]],

       [[741, 773]],

       [[742, 774]],

       [[743, 774]],

       [[744, 775]],

       [[743, 776]],

       [[741, 776]],

       [[740, 775]],

       [[739, 775]]], dtype=int32), array([[[736, 773]],

       [[737, 772]],

       [[738, 772]],

       [[739, 773]],

       [[738, 774]],

       [[737, 774]]], dtype=int32), array([[[734, 772]],

       [[735, 771]],

       [[736, 771]],

       [[737, 772]],

       [[736, 773]],

       [[735, 773]]], dtype=int32), array([[[732, 771]],

       [[733, 770]],

       [[734, 770]],

       [[735, 771]],

       [[734, 772]],

       [[733, 772]]], dtype=int32), array([[[731, 770]],

       [[732, 769]],

       [[733, 770]],

       [[732, 771]]], dtype=int32), array([[[729, 769]],

       [[730, 768]],

       [[731, 768]],

       [[732, 769]],

       [[731, 770]],

       [[730, 770]]], dtype=int32), array([[[728, 768]],

       [[729, 767]],

       [[730, 768]],

       [[729, 769]]], dtype=int32), array([[[726, 767]],

       [[727, 766]],

       [[728, 766]],

       [[729, 767]],

       [[728, 768]],

       [[727, 768]]], dtype=int32), array([[[725, 766]],

       [[726, 765]],

       [[727, 766]],

       [[726, 767]]], dtype=int32), array([[[724, 765]],

       [[725, 764]],

       [[726, 765]],

       [[725, 766]]], dtype=int32), array([[[716, 757]],

       [[717, 756]],

       [[725, 764]],

       [[724, 765]],

       [[723, 765]],

       [[716, 758]]], dtype=int32), array([[[715, 756]],

       [[716, 755]],

       [[717, 756]],

       [[716, 757]]], dtype=int32), array([[[714, 755]],

       [[715, 754]],

       [[716, 755]],

       [[715, 756]]], dtype=int32), array([[[712, 752]],

       [[713, 751]],

       [[715, 753]],

       [[715, 754]],

       [[714, 755]],

       [[712, 753]]], dtype=int32), array([[[710, 749]],

       [[711, 748]],

       [[713, 750]],

       [[713, 751]],

       [[712, 752]],

       [[710, 750]]], dtype=int32), array([[[709, 747]],

       [[710, 746]],

       [[711, 747]],

       [[711, 748]],

       [[710, 749]],

       [[709, 748]]], dtype=int32), array([[[707, 743]],

       [[708, 742]],

       [[709, 743]],

       [[709, 744]],

       [[710, 745]],

       [[710, 746]],

       [[709, 747]],

       [[707, 745]]], dtype=int32), array([[[704, 735]],

       [[705, 734]],

       [[706, 735]],

       [[706, 737]],

       [[707, 738]],

       [[707, 739]],

       [[708, 740]],

       [[708, 742]],

       [[707, 743]],

       [[706, 742]],

       [[706, 741]],

       [[705, 740]],

       [[705, 739]],

       [[704, 738]]], dtype=int32), array([[[222, 728]],

       [[223, 727]],

       [[224, 728]],

       [[223, 729]]], dtype=int32), array([[[210, 728]],

       [[211, 727]],

       [[212, 728]],

       [[211, 729]]], dtype=int32), array([[[702, 726]],

       [[703, 725]],

       [[704, 726]],

       [[704, 730]],

       [[705, 731]],

       [[705, 734]],

       [[704, 735]],

       [[703, 734]],

       [[703, 732]],

       [[702, 731]]], dtype=int32), array([[[221, 726]],

       [[222, 725]],

       [[223, 726]],

       [[223, 727]],

       [[222, 728]],

       [[221, 727]]], dtype=int32), array([[[220, 725]],

       [[221, 724]],

       [[222, 725]],

       [[221, 726]]], dtype=int32), array([[[213, 724]],

       [[214, 725]],

       [[214, 726]],

       [[212, 728]],

       [[211, 727]],

       [[211, 726]]], dtype=int32), array([[[211, 711]],

       [[212, 710]],

       [[213, 711]],

       [[213, 712]],

       [[212, 713]],

       [[211, 712]]], dtype=int32), array([[[223, 709]],

       [[224, 710]],

       [[224, 711]],

       [[222, 713]],

       [[221, 712]],

       [[221, 711]]], dtype=int32), array([[[210, 710]],

       [[211, 709]],

       [[212, 710]],

       [[211, 711]]], dtype=int32), array([[[1215,  709]],

       [[1216,  708]],

       [[1217,  709]],

       [[1217,  797]],

       [[1218,  796]],

       [[1218,  795]],

       [[1219,  794]],

       [[1220,  795]],

       [[1220,  799]],

       [[1222,  799]],

       [[1223,  800]],

       [[1222,  801]],

       [[1220,  801]],

       [[1220,  804]],

       [[1219,  805]],

       [[1217,  803]],

       [[1217,  839]],

       [[1216,  840]],

       [[1215,  839]],

       [[1215,  803]],

       [[1214,  804]],

       [[1214,  805]],

       [[1213,  806]],

       [[1212,  805]],

       [[1212,  801]],

       [[1210,  801]],

       [[1209,  800]],

       [[1210,  799]],

       [[1213,  799]],

       [[1213,  796]],

       [[1214,  795]],

       [[1215,  796]],

       [[1215,  797]]], dtype=int32), array([[[1224,  678]],

       [[1225,  677]],

       [[1226,  678]],

       [[1226,  699]],

       [[1225,  700]],

       [[1223,  700]],

       [[1222,  699]],

       [[1221,  699]],

       [[1220,  698]],

       [[1218,  698]],

       [[1217,  697]],

       [[1216,  697]],

       [[1215,  696]],

       [[1213,  696]],

       [[1212,  695]],

       [[1211,  695]],

       [[1210,  694]],

       [[1210,  693]],

       [[1211,  692]],

       [[1212,  692]],

       [[1213,  693]],

       [[1215,  693]],

       [[1216,  694]],

       [[1217,  694]],

       [[1218,  695]],

       [[1219,  695]],

       [[1220,  696]],

       [[1222,  696]],

       [[1223,  697]],

       [[1224,  697]],

       [[1224,  687]],

       [[1222,  687]],

       [[1221,  686]],

       [[1220,  686]],

       [[1219,  685]],

       [[1217,  685]],

       [[1216,  684]],

       [[1215,  684]],

       [[1214,  683]],

       [[1212,  683]],

       [[1210,  681]],

       [[1210,  680]],

       [[1211,  679]],

       [[1212,  680]],

       [[1214,  680]],

       [[1215,  681]],

       [[1216,  681]],

       [[1217,  682]],

       [[1218,  682]],

       [[1219,  683]],

       [[1221,  683]],

       [[1222,  684]],

       [[1224,  684]]], dtype=int32), array([[[216, 668]],

       [[217, 667]],

       [[218, 668]],

       [[218, 716]],

       [[219, 715]],

       [[219, 714]],

       [[221, 712]],

       [[222, 713]],

       [[222, 714]],

       [[221, 715]],

       [[221, 718]],

       [[223, 718]],

       [[224, 719]],

       [[223, 720]],

       [[221, 720]],

       [[221, 724]],

       [[220, 725]],

       [[219, 724]],

       [[219, 723]],

       [[218, 722]],

       [[218, 799]],

       [[217, 800]],

       [[216, 799]],

       [[216, 722]],

       [[216, 723]],

       [[214, 725]],

       [[213, 724]],

       [[213, 720]],

       [[211, 720]],

       [[210, 719]],

       [[211, 718]],

       [[213, 718]],

       [[213, 715]],

       [[212, 714]],

       [[212, 713]],

       [[213, 712]],

       [[215, 714]],

       [[215, 715]],

       [[216, 716]]], dtype=int32), array([[[621, 656]],

       [[622, 655]],

       [[623, 656]],

       [[623, 657]],

       [[622, 658]],

       [[621, 657]]], dtype=int32), array([[[618, 656]],

       [[619, 655]],

       [[620, 656]],

       [[619, 657]]], dtype=int32), array([[[615, 656]],

       [[616, 655]],

       [[617, 656]],

       [[616, 657]]], dtype=int32), array([[[612, 656]],

       [[613, 655]],

       [[614, 655]],

       [[615, 656]],

       [[614, 657]],

       [[613, 657]]], dtype=int32), array([[[1210,  654]],

       [[1211,  653]],

       [[1212,  653]],

       [[1219,  660]],

       [[1220,  660]],

       [[1221,  661]],

       [[1222,  661]],

       [[1223,  660]],

       [[1223,  655]],

       [[1224,  654]],

       [[1226,  656]],

       [[1226,  661]],

       [[1224,  663]],

       [[1224,  666]],

       [[1226,  668]],

       [[1226,  673]],

       [[1224,  675]],

       [[1222,  675]],

       [[1221,  676]],

       [[1216,  676]],

       [[1215,  675]],

       [[1214,  675]],

       [[1213,  674]],

       [[1212,  674]],

       [[1210,  672]],

       [[1210,  667]],

       [[1211,  666]],

       [[1212,  667]],

       [[1212,  670]],

       [[1213,  671]],

       [[1213,  672]],

       [[1214,  672]],

       [[1215,  673]],

       [[1216,  673]],

       [[1216,  668]],

       [[1218,  666]],

       [[1218,  662]],

       [[1213,  657]],

       [[1213,  662]],

       [[1212,  663]],

       [[1211,  663]],

       [[1210,  662]]], dtype=int32), array([[[1219,  668]],

       [[1219,  672]],

       [[1220,  673]],

       [[1222,  673]],

       [[1223,  672]],

       [[1223,  668]]], dtype=int32), array([[[628, 641]],

       [[629, 640]],

       [[632, 640]],

       [[634, 642]],

       [[634, 643]],

       [[631, 646]],

       [[630, 646]],

       [[628, 644]]], dtype=int32), array([[[573, 638]],

       [[574, 637]],

       [[576, 637]],

       [[577, 638]],

       [[576, 639]],

       [[574, 639]]], dtype=int32), array([[[588, 636]],

       [[589, 637]],

       [[589, 655]],

       [[590, 656]],

       [[608, 656]],

       [[609, 657]],

       [[609, 658]],

       [[608, 659]],

       [[588, 659]],

       [[587, 658]],

       [[587, 639]],

       [[586, 638]]], dtype=int32), array([[[614, 636]],

       [[615, 635]],

       [[619, 635]],

       [[620, 636]],

       [[621, 636]],

       [[622, 637]],

       [[622, 640]],

       [[619, 643]],

       [[617, 643]],

       [[614, 640]]], dtype=int32), array([[[617, 637]],

       [[617, 640]],

       [[618, 640]],

       [[618, 637]]], dtype=int32), array([[[622, 635]],

       [[623, 634]],

       [[624, 634]],

       [[625, 635]],

       [[625, 655]],

       [[624, 656]],

       [[623, 656]],

       [[622, 655]]], dtype=int32), array([[[645, 621]],

       [[646, 622]],

       [[664, 622]],

       [[665, 623]],

       [[664, 624]],

       [[651, 624]],

       [[651, 627]],

       [[652, 628]],

       [[652, 629]],

       [[651, 630]],

       [[651, 631]],

       [[650, 632]],

       [[647, 632]],

       [[646, 631]],

       [[647, 630]],

       [[649, 630]],

       [[649, 627]],

       [[647, 627]],

       [[647, 630]],

       [[646, 631]],

       [[644, 629]],

       [[645, 628]],

       [[645, 625]],

       [[643, 623]]], dtype=int32), array([[[601, 619]],

       [[602, 618]],

       [[603, 618]],

       [[605, 620]],

       [[605, 623]],

       [[604, 624]],

       [[603, 624]],

       [[602, 625]],

       [[601, 624]],

       [[600, 624]],

       [[599, 623]],

       [[599, 620]],

       [[600, 619]]], dtype=int32), array([[[211, 615]],

       [[212, 614]],

       [[213, 615]],

       [[213, 617]],

       [[214, 618]],

       [[223, 618]],

       [[223, 615]],

       [[224, 614]],

       [[225, 614]],

       [[226, 615]],

       [[226, 616]],

       [[227, 617]],

       [[227, 620]],

       [[226, 621]],

       [[213, 621]],

       [[213, 631]],

       [[215, 633]],

       [[217, 633]],

       [[217, 628]],

       [[219, 626]],

       [[220, 626]],

       [[221, 625]],

       [[222, 625]],

       [[223, 626]],

       [[225, 626]],

       [[227, 628]],

       [[227, 633]],

       [[225, 635]],

       [[225, 638]],

       [[227, 640]],

       [[227, 645]],

       [[225, 647]],

       [[225, 651]],

       [[227, 653]],

       [[227, 657]],

       [[224, 660]],

       [[222, 660]],

       [[220, 658]],

       [[219, 658]],

       [[217, 660]],

       [[213, 660]],

       [[211, 658]],

       [[211, 652]],

       [[213, 650]],

       [[215, 650]],

       [[215, 647]],

       [[214, 647]],

       [[211, 644]],

       [[211, 639]],

       [[212, 638]],

       [[213, 639]],

       [[213, 643]],

       [[215, 645]],

       [[217, 645]],

       [[217, 640]],

       [[218, 639]],

       [[218, 636]],

       [[216, 636]],

       [[215, 635]],

       [[214, 635]],

       [[211, 632]]], dtype=int32), array([[[222, 653]],

       [[222, 657]],

       [[224, 657]],

       [[224, 653]]], dtype=int32), array([[[215, 652]],

       [[214, 653]],

       [[214, 657]],

       [[217, 657]],

       [[217, 653]],

       [[216, 652]]], dtype=int32), array([[[218, 648]],

       [[218, 651]],

       [[219, 652]],

       [[220, 652]],

       [[221, 651]],

       [[221, 648]]], dtype=int32), array([[[221, 640]],

       [[220, 641]],

       [[220, 645]],

       [[224, 645]],

       [[224, 641]],

       [[223, 640]]], dtype=int32), array([[[221, 628]],

       [[220, 629]],

       [[220, 633]],

       [[224, 633]],

       [[224, 629]],

       [[223, 628]]], dtype=int32), array([[[652, 612]],

       [[653, 613]],

       [[654, 613]],

       [[655, 614]],

       [[655, 617]],

       [[654, 618]],

       [[653, 618]],

       [[652, 619]],

       [[649, 616]],

       [[649, 615]]], dtype=int32), array([[[587, 609]],

       [[588, 608]],

       [[590, 608]],

       [[591, 609]],

       [[590, 610]],

       [[588, 610]]], dtype=int32), array([[[605, 604]],

       [[607, 604]],

       [[611, 608]],

       [[611, 609]],

       [[610, 610]],

       [[610, 613]],

       [[611, 614]],

       [[610, 615]],

       [[590, 615]],

       [[589, 614]],

       [[590, 613]],

       [[591, 613]],

       [[591, 611]],

       [[592, 610]],

       [[593, 610]],

       [[594, 611]],

       [[594, 613]],

       [[602, 613]],

       [[602, 607]]], dtype=int32), array([[[606, 607]],

       [[606, 610]],

       [[607, 610]],

       [[607, 607]]], dtype=int32), array([[[637, 595]],

       [[638, 594]],

       [[639, 595]],

       [[640, 595]],

       [[642, 597]],

       [[642, 600]],

       [[636, 606]],

       [[635, 605]],

       [[635, 602]],

       [[634, 601]],

       [[634, 596]],

       [[635, 595]]], dtype=int32), array([[[637, 597]],

       [[637, 600]]], dtype=int32), array([[[624, 591]],

       [[625, 591]],

       [[628, 594]],

       [[628, 595]],

       [[625, 598]],

       [[624, 597]],

       [[623, 597]],

       [[621, 595]],

       [[621, 594]]], dtype=int32), array([[[630, 582]],

       [[631, 581]],

       [[632, 581]],

       [[633, 582]],

       [[633, 601]],

       [[634, 601]],

       [[635, 602]],

       [[634, 603]],

       [[618, 603]],

       [[617, 602]],

       [[618, 601]],

       [[631, 601]],

       [[631, 591]],

       [[630, 590]]], dtype=int32), array([[[607, 574]],

       [[608, 573]],

       [[609, 574]],

       [[609, 579]],

       [[610, 580]],

       [[609, 581]],

       [[590, 581]],

       [[589, 582]],

       [[589, 601]],

       [[588, 602]],

       [[587, 601]],

       [[574, 601]],

       [[573, 602]],

       [[573, 604]],

       [[572, 605]],

       [[572, 632]],

       [[573, 633]],

       [[573, 636]],

       [[574, 637]],

       [[573, 638]],

       [[563, 638]],

       [[562, 637]],

       [[562, 623]],

       [[561, 622]],

       [[561, 618]],

       [[562, 617]],

       [[562, 601]],

       [[566, 597]],

       [[586, 597]],

       [[587, 596]],

       [[587, 580]],

       [[588, 579]],

       [[589, 579]],

       [[592, 576]],

       [[607, 576]]], dtype=int32), array([[[1209,  564]],

       [[1210,  563]],

       [[1211,  564]],

       [[1210,  565]]], dtype=int32), array([[[210, 564]],

       [[211, 563]],

       [[212, 564]],

       [[211, 565]]], dtype=int32), array([[[1221,  563]],

       [[1222,  562]],

       [[1223,  563]],

       [[1223,  564]],

       [[1222,  565]],

       [[1221,  564]]], dtype=int32), array([[[1220,  562]],

       [[1221,  561]],

       [[1222,  562]],

       [[1221,  563]]], dtype=int32), array([[[221, 562]],

       [[222, 561]],

       [[224, 563]],

       [[224, 564]],

       [[223, 565]],

       [[221, 563]]], dtype=int32), array([[[211, 562]],

       [[212, 561]],

       [[213, 562]],

       [[213, 563]],

       [[212, 564]],

       [[211, 563]]], dtype=int32), array([[[1212,  560]],

       [[1213,  561]],

       [[1213,  562]],

       [[1211,  564]],

       [[1210,  563]],

       [[1210,  562]]], dtype=int32), array([[[212, 561]],

       [[213, 560]],

       [[214, 561]],

       [[213, 562]]], dtype=int32), array([[[1219,  560]],

       [[1220,  559]],

       [[1221,  560]],

       [[1221,  561]],

       [[1220,  562]],

       [[1219,  561]]], dtype=int32), array([[[1212,  550]],

       [[1213,  549]],

       [[1214,  550]],

       [[1213,  551]]], dtype=int32), array([[[612, 550]],

       [[613, 549]],

       [[645, 549]],

       [[646, 550]],

       [[647, 550]],

       [[648, 551]],

       [[648, 575]],

       [[649, 576]],

       [[665, 576]],

       [[666, 577]],

       [[667, 577]],

       [[668, 578]],

       [[668, 592]],

       [[669, 593]],

       [[669, 594]],

       [[670, 594]],

       [[671, 595]],

       [[688, 595]],

       [[690, 597]],

       [[690, 600]],

       [[689, 601]],

       [[689, 605]],

       [[690, 606]],

       [[690, 629]],

       [[689, 630]],

       [[689, 632]],

       [[688, 633]],

       [[688, 635]],

       [[687, 636]],

       [[686, 636]],

       [[685, 637]],

       [[683, 637]],

       [[682, 636]],

       [[679, 636]],

       [[678, 637]],

       [[668, 637]],

       [[668, 640]],

       [[669, 641]],

       [[668, 642]],

       [[668, 653]],

       [[667, 654]],

       [[667, 656]],

       [[666, 657]],

       [[666, 658]],

       [[665, 659]],

       [[648, 659]],

       [[648, 679]],

       [[647, 680]],

       [[647, 682]],

       [[646, 683]],

       [[646, 685]],

       [[644, 687]],

       [[643, 686]],

       [[631, 686]],

       [[630, 687]],

       [[620, 687]],

       [[619, 686]],

       [[611, 686]],

       [[610, 687]],

       [[609, 687]],

       [[608, 686]],

       [[608, 676]],

       [[609, 675]],

       [[611, 675]],

       [[612, 676]],

       [[642, 676]],

       [[643, 675]],

       [[644, 675]],

       [[644, 658]],

       [[646, 656]],

       [[651, 656]],

       [[652, 657]],

       [[660, 657]],

       [[661, 656]],

       [[664, 656]],

       [[664, 636]],

       [[665, 635]],

       [[677, 635]],

       [[677, 631]],

       [[678, 630]],

       [[678, 604]],

       [[677, 603]],

       [[677, 600]],

       [[666, 600]],

       [[665, 599]],

       [[665, 596]],

       [[664, 595]],

       [[664, 581]],

       [[647, 581]],

       [[646, 582]],

       [[644, 580]],

       [[644, 563]],

       [[640, 563]],

       [[639, 562]],

       [[615, 562]],

       [[614, 563]],

       [[610, 563]],

       [[609, 564]],

       [[608, 563]],

       [[608, 553]],

       [[609, 552]],

       [[610, 552]],

       [[610, 551]],

       [[611, 550]]], dtype=int32), array([[[220, 549]],

       [[221, 548]],

       [[222, 549]],

       [[221, 550]]], dtype=int32), array([[[1211,  548]],

       [[1212,  547]],

       [[1213,  548]],

       [[1213,  549]],

       [[1212,  550]],

       [[1211,  549]]], dtype=int32), array([[[729, 548]],

       [[730, 547]],

       [[747, 547]],

       [[748, 548]],

       [[748, 549]],

       [[747, 550]],

       [[740, 550]],

       [[740, 561]],

       [[737, 564]],

       [[733, 564]],

       [[732, 563]],

       [[732, 562]],

       [[733, 561]],

       [[736, 561]],

       [[737, 560]],

       [[737, 550]],

       [[730, 550]],

       [[729, 549]]], dtype=int32), array([[[1210,  547]],

       [[1211,  546]],

       [[1212,  547]],

       [[1211,  548]]], dtype=int32), array([[[221, 547]],

       [[222, 546]],

       [[223, 547]],

       [[223, 548]],

       [[222, 549]],

       [[221, 548]]], dtype=int32), array([[[211, 547]],

       [[212, 546]],

       [[214, 548]],

       [[214, 549]],

       [[213, 550]],

       [[211, 548]]], dtype=int32), array([[[1222,  545]],

       [[1223,  546]],

       [[1223,  547]],

       [[1221,  549]],

       [[1220,  548]],

       [[1220,  547]]], dtype=int32), array([[[1209,  546]],

       [[1210,  545]],

       [[1211,  546]],

       [[1210,  547]]], dtype=int32), array([[[222, 546]],

       [[223, 545]],

       [[224, 546]],

       [[223, 547]]], dtype=int32), array([[[210, 546]],

       [[211, 545]],

       [[212, 546]],

       [[211, 547]]], dtype=int32), array([[[726, 542]],

       [[727, 541]],

       [[746, 541]],

       [[748, 543]],

       [[747, 544]],

       [[729, 544]],

       [[729, 553]],

       [[728, 554]],

       [[728, 559]],

       [[727, 560]],

       [[727, 561]],

       [[726, 562]],

       [[726, 563]],

       [[725, 564]],

       [[723, 562]],

       [[724, 561]],

       [[724, 559]],

       [[725, 558]],

       [[725, 554]],

       [[726, 553]]], dtype=int32), array([[[705, 541]],

       [[706, 540]],

       [[707, 540]],

       [[708, 541]],

       [[710, 541]],

       [[711, 542]],

       [[710, 543]],

       [[710, 548]],

       [[711, 547]],

       [[712, 547]],

       [[712, 542]],

       [[713, 541]],

       [[721, 541]],

       [[722, 542]],

       [[722, 543]],

       [[721, 544]],

       [[721, 547]],

       [[722, 548]],

       [[722, 549]],

       [[721, 550]],

       [[721, 553]],

       [[722, 553]],

       [[723, 554]],

       [[723, 555]],

       [[722, 556]],

       [[721, 556]],

       [[720, 555]],

       [[718, 555]],

       [[718, 558]],

       [[720, 558]],

       [[721, 559]],

       [[721, 563]],

       [[720, 564]],

       [[718, 564]],

       [[717, 563]],

       [[715, 563]],

       [[714, 562]],

       [[711, 562]],

       [[710, 563]],

       [[709, 563]],

       [[708, 564]],

       [[704, 564]],

       [[703, 563]],

       [[703, 555]],

       [[702, 556]],

       [[700, 556]],

       [[699, 555]],

       [[699, 547]],

       [[703, 543]],

       [[704, 544]],

       [[705, 544]]], dtype=int32), array([[[719, 549]],

       [[719, 552]]], dtype=int32), array([[[717, 548]],

       [[717, 551]]], dtype=int32), array([[[1120,  539]],

       [[1121,  540]],

       [[1121,  549]],

       [[1120,  550]],

       [[1119,  550]],

       [[1118,  549]],

       [[1118,  541]]], dtype=int32), array([[[1120,  521]],

       [[1121,  522]],

       [[1121,  531]],

       [[1120,  532]],

       [[1118,  530]],

       [[1118,  523]]], dtype=int32), array([[[375, 518]],

       [[376, 517]],

       [[377, 518]],

       [[377, 521]],

       [[376, 522]],

       [[375, 521]]], dtype=int32), array([[[1099,  514]],

       [[1100,  513]],

       [[1102,  515]],

       [[1102,  523]],

       [[1100,  525]],

       [[1099,  524]]], dtype=int32), array([[[374, 514]],

       [[375, 513]],

       [[376, 514]],

       [[376, 517]],

       [[375, 518]],

       [[374, 517]]], dtype=int32), array([[[373, 511]],

       [[374, 510]],

       [[375, 511]],

       [[375, 513]],

       [[374, 514]],

       [[373, 513]]], dtype=int32), array([[[372, 509]],

       [[373, 508]],

       [[374, 509]],

       [[374, 510]],

       [[373, 511]],

       [[372, 510]]], dtype=int32), array([[[371, 507]],

       [[372, 506]],

       [[373, 507]],

       [[372, 508]]], dtype=int32), array([[[370, 504]],

       [[371, 503]],

       [[372, 504]],

       [[372, 505]],

       [[371, 506]],

       [[370, 505]]], dtype=int32), array([[[1120,  502]],

       [[1121,  503]],

       [[1121,  513]],

       [[1120,  514]],

       [[1118,  512]],

       [[1118,  504]]], dtype=int32), array([[[369, 502]],

       [[370, 501]],

       [[371, 502]],

       [[371, 503]],

       [[370, 504]],

       [[369, 503]]], dtype=int32), array([[[368, 500]],

       [[369, 499]],

       [[370, 500]],

       [[370, 501]],

       [[369, 502]],

       [[368, 501]]], dtype=int32), array([[[367, 499]],

       [[368, 498]],

       [[369, 499]],

       [[368, 500]]], dtype=int32), array([[[366, 497]],

       [[367, 496]],

       [[368, 497]],

       [[368, 498]],

       [[367, 499]],

       [[366, 498]]], dtype=int32), array([[[1099,  496]],

       [[1100,  495]],

       [[1101,  495]],

       [[1102,  496]],

       [[1102,  505]],

       [[1101,  506]],

       [[1100,  506]],

       [[1099,  505]]], dtype=int32), array([[[365, 496]],

       [[366, 495]],

       [[367, 496]],

       [[366, 497]]], dtype=int32), array([[[364, 495]],

       [[365, 494]],

       [[366, 495]],

       [[365, 496]]], dtype=int32), array([[[363, 493]],

       [[364, 492]],

       [[365, 493]],

       [[364, 494]]], dtype=int32), array([[[362, 492]],

       [[363, 491]],

       [[364, 492]],

       [[363, 493]]], dtype=int32), array([[[361, 491]],

       [[362, 490]],

       [[363, 491]],

       [[362, 492]]], dtype=int32), array([[[360, 490]],

       [[361, 489]],

       [[362, 490]],

       [[361, 491]]], dtype=int32), array([[[359, 489]],

       [[360, 488]],

       [[361, 489]],

       [[360, 490]]], dtype=int32), array([[[358, 488]],

       [[359, 487]],

       [[360, 488]],

       [[359, 489]]], dtype=int32), array([[[357, 487]],

       [[358, 486]],

       [[359, 487]],

       [[358, 488]]], dtype=int32), array([[[356, 486]],

       [[357, 485]],

       [[358, 486]],

       [[357, 487]]], dtype=int32), array([[[1120,  484]],

       [[1121,  485]],

       [[1121,  494]],

       [[1120,  495]],

       [[1118,  493]],

       [[1118,  486]]], dtype=int32), array([[[355, 485]],

       [[356, 484]],

       [[357, 485]],

       [[356, 486]]], dtype=int32), array([[[354, 484]],

       [[355, 483]],

       [[356, 484]],

       [[355, 485]]], dtype=int32), array([[[353, 483]],

       [[354, 482]],

       [[355, 483]],

       [[354, 484]]], dtype=int32), array([[[351, 482]],

       [[352, 481]],

       [[353, 481]],

       [[354, 482]],

       [[353, 483]],

       [[352, 483]]], dtype=int32), array([[[350, 481]],

       [[351, 480]],

       [[352, 481]],

       [[351, 482]]], dtype=int32), array([[[348, 480]],

       [[349, 479]],

       [[350, 479]],

       [[351, 480]],

       [[350, 481]],

       [[349, 481]]], dtype=int32), array([[[347, 479]],

       [[348, 478]],

       [[349, 479]],

       [[348, 480]]], dtype=int32), array([[[345, 478]],

       [[346, 477]],

       [[347, 477]],

       [[348, 478]],

       [[347, 479]],

       [[346, 479]]], dtype=int32), array([[[1099,  477]],

       [[1100,  476]],

       [[1101,  476]],

       [[1102,  477]],

       [[1102,  486]],

       [[1101,  487]],

       [[1100,  487]],

       [[1099,  486]]], dtype=int32), array([[[343, 477]],

       [[344, 476]],

       [[345, 476]],

       [[346, 477]],

       [[345, 478]],

       [[344, 478]]], dtype=int32), array([[[341, 476]],

       [[342, 475]],

       [[343, 475]],

       [[344, 476]],

       [[343, 477]],

       [[342, 477]]], dtype=int32), array([[[339, 475]],

       [[340, 474]],

       [[341, 474]],

       [[342, 475]],

       [[341, 476]],

       [[340, 476]]], dtype=int32), array([[[337, 474]],

       [[338, 473]],

       [[339, 473]],

       [[340, 474]],

       [[339, 475]],

       [[338, 475]]], dtype=int32), array([[[334, 473]],

       [[335, 472]],

       [[336, 472]],

       [[337, 473]],

       [[336, 474]],

       [[335, 474]]], dtype=int32), array([[[331, 472]],

       [[332, 471]],

       [[334, 471]],

       [[335, 472]],

       [[334, 473]],

       [[332, 473]]], dtype=int32), array([[[327, 471]],

       [[328, 470]],

       [[330, 470]],

       [[331, 471]],

       [[330, 472]],

       [[328, 472]]], dtype=int32), array([[[1120,  465]],

       [[1121,  466]],

       [[1121,  475]],

       [[1120,  476]],

       [[1119,  476]],

       [[1118,  475]],

       [[1118,  467]]], dtype=int32), array([[[944, 462]],

       [[945, 461]],

       [[947, 461]],

       [[948, 462]],

       [[947, 463]],

       [[945, 463]]], dtype=int32), array([[[935, 462]],

       [[936, 461]],

       [[937, 462]],

       [[936, 463]]], dtype=int32), array([[[931, 462]],

       [[932, 461]],

       [[933, 461]],

       [[934, 462]],

       [[933, 463]],

       [[932, 463]]], dtype=int32), array([[[923, 462]],

       [[924, 461]],

       [[925, 461]],

       [[926, 462]],

       [[925, 463]],

       [[924, 463]]], dtype=int32), array([[[911, 462]],

       [[912, 461]],

       [[913, 461]],

       [[914, 462]],

       [[913, 463]],

       [[912, 463]]], dtype=int32), array([[[906, 462]],

       [[907, 461]],

       [[909, 461]],

       [[910, 462]],

       [[909, 463]],

       [[907, 463]]], dtype=int32), array([[[898, 462]],

       [[899, 461]],

       [[901, 461]],

       [[902, 462]],

       [[901, 463]],

       [[899, 463]]], dtype=int32), array([[[895, 462]],

       [[896, 461]],

       [[897, 461]],

       [[898, 462]],

       [[897, 463]],

       [[896, 463]]], dtype=int32), array([[[891, 462]],

       [[892, 461]],

       [[893, 461]],

       [[894, 462]],

       [[893, 463]],

       [[892, 463]]], dtype=int32), array([[[883, 462]],

       [[884, 461]],

       [[885, 462]],

       [[884, 463]]], dtype=int32), array([[[874, 462]],

       [[875, 461]],

       [[877, 461]],

       [[878, 462]],

       [[877, 463]],

       [[875, 463]]], dtype=int32), array([[[867, 462]],

       [[868, 461]],

       [[869, 462]],

       [[868, 463]]], dtype=int32), array([[[859, 462]],

       [[860, 461]],

       [[861, 462]],

       [[860, 463]]], dtype=int32), array([[[849, 462]],

       [[850, 461]],

       [[852, 461]],

       [[853, 462]],

       [[852, 463]],

       [[850, 463]]], dtype=int32), array([[[841, 462]],

       [[842, 461]],

       [[844, 461]],

       [[845, 462]],

       [[844, 463]],

       [[842, 463]]], dtype=int32), array([[[838, 462]],

       [[839, 461]],

       [[840, 462]],

       [[839, 463]]], dtype=int32), array([[[830, 462]],

       [[831, 461]],

       [[836, 461]],

       [[837, 462]],

       [[836, 463]],

       [[831, 463]]], dtype=int32), array([[[825, 462]],

       [[826, 461]],

       [[829, 461]],

       [[830, 462]],

       [[829, 463]],

       [[826, 463]]], dtype=int32), array([[[818, 462]],

       [[819, 461]],

       [[820, 461]],

       [[821, 462]],

       [[820, 463]],

       [[819, 463]]], dtype=int32), array([[[810, 462]],

       [[811, 461]],

       [[812, 462]],

       [[811, 463]]], dtype=int32), array([[[807, 462]],

       [[808, 461]],

       [[809, 461]],

       [[810, 462]],

       [[809, 463]],

       [[808, 463]]], dtype=int32), array([[[794, 462]],

       [[795, 461]],

       [[796, 462]],

       [[795, 463]]], dtype=int32), array([[[785, 462]],

       [[786, 461]],

       [[787, 462]],

       [[786, 463]]], dtype=int32), array([[[1099,  459]],

       [[1100,  458]],

       [[1101,  458]],

       [[1102,  459]],

       [[1102,  468]],

       [[1101,  469]],

       [[1100,  469]],

       [[1099,  468]]], dtype=int32), array([[[948, 456]],

       [[949, 455]],

       [[950, 456]],

       [[950, 457]],

       [[949, 458]],

       [[948, 457]]], dtype=int32), array([[[1215,  452]],

       [[1216,  451]],

       [[1217,  452]],

       [[1217,  552]],

       [[1218,  551]],

       [[1218,  550]],

       [[1220,  548]],

       [[1221,  549]],

       [[1221,  550]],

       [[1220,  551]],

       [[1220,  554]],

       [[1222,  554]],

       [[1223,  555]],

       [[1222,  556]],

       [[1220,  556]],

       [[1220,  559]],

       [[1219,  560]],

       [[1217,  558]],

       [[1217,  646]],

       [[1216,  647]],

       [[1215,  646]],

       [[1215,  558]],

       [[1215,  559]],

       [[1213,  561]],

       [[1212,  560]],

       [[1212,  556]],

       [[1210,  556]],

       [[1209,  555]],

       [[1210,  554]],

       [[1213,  554]],

       [[1213,  551]],

       [[1214,  550]],

       [[1215,  551]],

       [[1215,  552]]], dtype=int32), array([[[216, 452]],

       [[217, 451]],

       [[218, 452]],

       [[218, 552]],

       [[219, 551]],

       [[219, 550]],

       [[220, 549]],

       [[221, 550]],

       [[221, 554]],

       [[223, 554]],

       [[224, 555]],

       [[223, 556]],

       [[221, 556]],

       [[221, 559]],

       [[222, 560]],

       [[222, 561]],

       [[221, 562]],

       [[219, 560]],

       [[219, 559]],

       [[218, 558]],

       [[218, 606]],

       [[217, 607]],

       [[216, 606]],

       [[216, 558]],

       [[215, 559]],

       [[215, 560]],

       [[214, 561]],

       [[213, 560]],

       [[213, 556]],

       [[211, 556]],

       [[210, 555]],

       [[211, 554]],

       [[213, 554]],

       [[213, 550]],

       [[214, 549]],

       [[216, 551]],

       [[216, 552]]], dtype=int32), array([[[1032,  451]],

       [[1033,  450]],

       [[1034,  450]],

       [[1036,  452]],

       [[1034,  454]],

       [[1033,  454]],

       [[1032,  453]]], dtype=int32), array([[[1118,  448]],

       [[1119,  447]],

       [[1120,  447]],

       [[1121,  448]],

       [[1121,  457]],

       [[1120,  458]],

       [[1119,  458]],

       [[1118,  457]]], dtype=int32), array([[[1099,  440]],

       [[1100,  439]],

       [[1101,  439]],

       [[1102,  440]],

       [[1102,  449]],

       [[1100,  451]],

       [[1099,  450]]], dtype=int32), array([[[1058,  439]],

       [[1060,  439]],

       [[1061,  440]],

       [[1062,  440]],

       [[1063,  441]],

       [[1064,  441]],

       [[1066,  439]],

       [[1068,  439]],

       [[1069,  440]],

       [[1070,  440]],

       [[1072,  442]],

       [[1072,  453]],

       [[1071,  454]],

       [[1070,  454]],

       [[1069,  453]],

       [[1069,  443]],

       [[1068,  442]],

       [[1066,  442]],

       [[1064,  444]],

       [[1064,  453]],

       [[1063,  454]],

       [[1062,  454]],

       [[1061,  453]],

       [[1061,  444]],

       [[1059,  442]],

       [[1058,  442]],

       [[1057,  443]],

       [[1056,  443]],

       [[1056,  453]],

       [[1055,  454]],

       [[1053,  454]],

       [[1052,  453]],

       [[1052,  441]],

       [[1053,  440]],

       [[1055,  440]],

       [[1056,  441]]], dtype=int32), array([[[417, 440]],

       [[418, 439]],

       [[419, 440]],

       [[419, 443]],

       [[418, 444]],

       [[417, 443]]], dtype=int32), array([[[1077,  434]],

       [[1080,  434]],

       [[1082,  436]],

       [[1082,  440]],

       [[1081,  441]],

       [[1081,  444]],

       [[1082,  444]],

       [[1083,  445]],

       [[1082,  446]],

       [[1075,  446]],

       [[1074,  445]],

       [[1079,  440]],

       [[1079,  437]],

       [[1076,  437]],

       [[1075,  436]]], dtype=int32), array([[[1041,  434]],

       [[1046,  434]],

       [[1049,  437]],

       [[1049,  441]],

       [[1048,  442]],

       [[1048,  445]],

       [[1050,  447]],

       [[1050,  450]],

       [[1049,  451]],

       [[1049,  452]],

       [[1048,  453]],

       [[1047,  453]],

       [[1046,  454]],

       [[1041,  454]],

       [[1040,  453]],

       [[1039,  453]],

       [[1038,  452]],

       [[1038,  451]],

       [[1037,  450]],

       [[1037,  447]],

       [[1039,  445]],

       [[1039,  442]],

       [[1038,  441]],

       [[1038,  437]]], dtype=int32), array([[[1043,  445]],

       [[1041,  447]],

       [[1041,  450]],

       [[1042,  451]],

       [[1045,  451]],

       [[1046,  450]],

       [[1046,  447]],

       [[1044,  445]]], dtype=int32), array([[[1042,  437]],

       [[1042,  441]],

       [[1043,  442]],

       [[1044,  442]],

       [[1045,  441]],

       [[1045,  437]]], dtype=int32), array([[[1024,  435]],

       [[1025,  434]],

       [[1027,  434]],

       [[1028,  435]],

       [[1028,  446]],

       [[1029,  446]],

       [[1031,  448]],

       [[1030,  449]],

       [[1028,  449]],

       [[1028,  453]],

       [[1027,  454]],

       [[1026,  454]],

       [[1025,  453]],

       [[1025,  449]],

       [[1017,  449]],

       [[1016,  448]],

       [[1016,  447]],

       [[1018,  445]],

       [[1018,  444]],

       [[1020,  442]],

       [[1020,  441]],

       [[1022,  439]],

       [[1022,  438]],

       [[1024,  436]]], dtype=int32), array([[[1025,  438]],

       [[1025,  439]],

       [[1023,  441]],

       [[1023,  442]],

       [[1022,  443]],

       [[1022,  446]],

       [[1025,  446]]], dtype=int32), array([[[418, 435]],

       [[419, 434]],

       [[420, 435]],

       [[420, 437]],

       [[419, 438]],

       [[418, 437]]], dtype=int32), array([[[1215,  434]],

       [[1216,  433]],

       [[1219,  433]],

       [[1220,  434]],

       [[1223,  434]],

       [[1226,  437]],

       [[1226,  441]],

       [[1223,  444]],

       [[1213,  444]],

       [[1210,  441]],

       [[1210,  437]],

       [[1213,  434]]], dtype=int32), array([[[1216,  436]],

       [[1215,  437]],

       [[1213,  437]],

       [[1213,  441]],

       [[1216,  441]],

       [[1217,  442]],

       [[1219,  442]],

       [[1220,  441]],

       [[1223,  441]],

       [[1223,  437]],

       [[1221,  437]],

       [[1220,  436]]], dtype=int32), array([[[217, 434]],

       [[218, 433]],

       [[220, 433]],

       [[221, 434]],

       [[224, 434]],

       [[227, 437]],

       [[227, 441]],

       [[224, 444]],

       [[214, 444]],

       [[211, 441]],

       [[211, 437]],

       [[214, 434]]], dtype=int32), array([[[217, 436]],

       [[216, 437]],

       [[214, 437]],

       [[214, 441]],

       [[217, 441]],

       [[218, 442]],

       [[220, 442]],

       [[221, 441]],

       [[224, 441]],

       [[224, 437]],

       [[222, 437]],

       [[221, 436]]], dtype=int32), array([[[419, 432]],

       [[420, 431]],

       [[421, 432]],

       [[421, 433]],

       [[420, 434]],

       [[419, 433]]], dtype=int32), array([[[1120,  428]],

       [[1121,  429]],

       [[1121,  439]],

       [[1120,  440]],

       [[1118,  438]],

       [[1118,  430]]], dtype=int32), array([[[692, 427]],

       [[693, 426]],

       [[695, 426]],

       [[696, 427]],

       [[696, 428]],

       [[695, 429]],

       [[693, 429]],

       [[692, 428]]], dtype=int32), array([[[408, 425]],

       [[409, 424]],

       [[411, 424]],

       [[412, 425]],

       [[412, 426]],

       [[410, 428]],

       [[408, 426]]], dtype=int32), array([[[1224,  422]],

       [[1225,  421]],

       [[1226,  422]],

       [[1226,  431]],

       [[1225,  432]],

       [[1224,  431]],

       [[1222,  431]],

       [[1221,  430]],

       [[1220,  430]],

       [[1219,  429]],

       [[1218,  429]],

       [[1217,  428]],

       [[1215,  428]],

       [[1214,  427]],

       [[1213,  427]],

       [[1212,  426]],

       [[1211,  426]],

       [[1210,  425]],

       [[1210,  424]],

       [[1211,  423]],

       [[1212,  424]],

       [[1214,  424]],

       [[1215,  425]],

       [[1216,  425]],

       [[1217,  426]],

       [[1219,  426]],

       [[1220,  427]],

       [[1221,  427]],

       [[1222,  428]],

       [[1224,  428]]], dtype=int32), array([[[1099,  422]],

       [[1100,  421]],

       [[1101,  421]],

       [[1102,  422]],

       [[1102,  431]],

       [[1101,  432]],

       [[1100,  432]],

       [[1099,  431]]], dtype=int32), array([[[225, 422]],

       [[226, 421]],

       [[227, 422]],

       [[227, 431]],

       [[226, 432]],

       [[225, 431]],

       [[223, 431]],

       [[222, 430]],

       [[221, 430]],

       [[220, 429]],

       [[219, 429]],

       [[218, 428]],

       [[216, 428]],

       [[215, 427]],

       [[214, 427]],

       [[213, 426]],

       [[212, 426]],

       [[211, 425]],

       [[211, 424]],

       [[212, 423]],

       [[213, 424]],

       [[215, 424]],

       [[216, 425]],

       [[217, 425]],

       [[218, 426]],

       [[220, 426]],

       [[221, 427]],

       [[222, 427]],

       [[223, 428]],

       [[225, 428]]], dtype=int32), array([[[424, 421]],

       [[425, 420]],

       [[426, 421]],

       [[425, 422]]], dtype=int32), array([[[425, 419]],

       [[426, 418]],

       [[427, 419]],

       [[426, 420]]], dtype=int32), array([[[426, 418]],

       [[427, 417]],

       [[428, 418]],

       [[427, 419]]], dtype=int32), array([[[712, 416]],

       [[713, 415]],

       [[715, 415]],

       [[716, 416]],

       [[717, 415]],

       [[721, 415]],

       [[723, 417]],

       [[725, 415]],

       [[730, 415]],

       [[731, 416]],

       [[731, 417]],

       [[732, 418]],

       [[732, 428]],

       [[731, 429]],

       [[730, 429]],

       [[729, 428]],

       [[729, 419]],

       [[728, 418]],

       [[725, 418]],

       [[724, 419]],

       [[724, 428]],

       [[723, 429]],

       [[721, 429]],

       [[720, 428]],

       [[720, 418]],

       [[717, 418]],

       [[716, 419]],

       [[716, 420]],

       [[715, 421]],

       [[715, 424]],

       [[716, 425]],

       [[715, 426]],

       [[715, 428]],

       [[714, 429]],

       [[713, 429]],

       [[712, 428]]], dtype=int32), array([[[1118,  411]],

       [[1119,  410]],

       [[1120,  410]],

       [[1121,  411]],

       [[1121,  420]],

       [[1120,  421]],

       [[1118,  419]]], dtype=int32), array([[[678, 411]],

       [[679, 410]],

       [[687, 410]],

       [[688, 411]],

       [[688, 412]],

       [[687, 413]],

       [[681, 413]],

       [[681, 417]],

       [[685, 417]],

       [[689, 421]],

       [[689, 425]],

       [[685, 429]],

       [[684, 429]],

       [[683, 430]],

       [[681, 430]],

       [[680, 429]],

       [[678, 429]],

       [[677, 428]],

       [[677, 427]],

       [[678, 426]],

       [[680, 426]],

       [[681, 427]],

       [[682, 427]],

       [[683, 426]],

       [[684, 426]],

       [[685, 425]],

       [[685, 421]],

       [[684, 421]],

       [[683, 420]],

       [[679, 420]],

       [[678, 419]]], dtype=int32), array([[[1210,  410]],

       [[1211,  409]],

       [[1212,  409]],

       [[1219,  416]],

       [[1223,  416]],

       [[1223,  411]],

       [[1224,  410]],

       [[1225,  410]],

       [[1226,  411]],

       [[1226,  417]],

       [[1224,  419]],

       [[1219,  419]],

       [[1213,  413]],

       [[1213,  418]],

       [[1212,  419]],

       [[1211,  419]],

       [[1210,  418]]], dtype=int32), array([[[737, 410]],

       [[738, 409]],

       [[739, 409]],

       [[740, 410]],

       [[741, 410]],

       [[742, 411]],

       [[742, 415]],

       [[741, 416]],

       [[741, 419]],

       [[742, 420]],

       [[742, 421]],

       [[741, 422]],

       [[735, 422]],

       [[734, 421]],

       [[734, 420]],

       [[739, 415]],

       [[739, 412]],

       [[737, 412]],

       [[736, 413]],

       [[735, 412]],

       [[735, 411]],

       [[736, 410]]], dtype=int32), array([[[701, 410]],

       [[702, 409]],

       [[705, 409]],

       [[706, 410]],

       [[707, 410]],

       [[709, 412]],

       [[709, 418]],

       [[704, 423]],

       [[704, 426]],

       [[708, 426]],

       [[709, 427]],

       [[709, 428]],

       [[708, 429]],

       [[698, 429]],

       [[697, 428]],

       [[697, 427]],

       [[698, 426]],

       [[698, 425]],

       [[699, 424]],

       [[700, 424]],

       [[704, 420]],

       [[704, 419]],

       [[706, 417]],

       [[706, 414]],

       [[704, 412]],

       [[702, 412]],

       [[701, 413]],

       [[700, 413]],

       [[699, 414]],

       [[698, 413]],

       [[698, 412]],

       [[700, 410]]], dtype=int32), array([[[666, 410]],

       [[667, 409]],

       [[670, 409]],

       [[671, 410]],

       [[672, 410]],

       [[674, 412]],

       [[674, 413]],

       [[675, 414]],

       [[675, 415]],

       [[674, 416]],

       [[674, 418]],

       [[672, 420]],

       [[672, 421]],

       [[670, 423]],

       [[670, 426]],

       [[673, 426]],

       [[674, 427]],

       [[674, 428]],

       [[673, 429]],

       [[663, 429]],

       [[662, 428]],

       [[662, 427]],

       [[670, 419]],

       [[670, 418]],

       [[671, 417]],

       [[671, 413]],

       [[670, 413]],

       [[669, 412]],

       [[668, 412]],

       [[667, 413]],

       [[665, 413]],

       [[664, 414]],

       [[663, 413]],

       [[663, 412]],

       [[665, 410]]], dtype=int32), array([[[433, 409]],

       [[434, 410]],

       [[434, 413]],

       [[437, 413]],

       [[439, 415]],

       [[440, 414]],

       [[441, 414]],

       [[442, 413]],

       [[446, 413]],

       [[447, 414]],

       [[447, 415]],

       [[448, 416]],

       [[448, 426]],

       [[447, 427]],

       [[446, 427]],

       [[445, 426]],

       [[445, 417]],

       [[444, 416]],

       [[441, 416]],

       [[441, 417]],

       [[440, 418]],

       [[440, 426]],

       [[439, 427]],

       [[438, 427]],

       [[437, 426]],

       [[437, 418]],

       [[436, 417]],

       [[436, 416]],

       [[433, 416]],

       [[432, 417]],

       [[432, 426]],

       [[431, 427]],

       [[429, 427]],

       [[428, 426]],

       [[428, 417]],

       [[427, 416]],

       [[428, 415]],

       [[428, 414]]], dtype=int32), array([[[211, 410]],

       [[212, 409]],

       [[213, 409]],

       [[220, 416]],

       [[224, 416]],

       [[224, 411]],

       [[225, 410]],

       [[226, 410]],

       [[227, 411]],

       [[227, 417]],

       [[225, 419]],

       [[220, 419]],

       [[214, 413]],

       [[214, 417]],

       [[212, 419]],

       [[211, 418]]], dtype=int32), array([[[451, 409]],

       [[452, 408]],

       [[457, 408]],

       [[458, 409]],

       [[458, 413]],

       [[457, 414]],

       [[457, 417]],

       [[459, 419]],

       [[458, 420]],

       [[451, 420]],

       [[450, 419]],

       [[450, 418]],

       [[455, 413]],

       [[455, 410]],

       [[454, 410]],

       [[453, 411]],

       [[452, 411]],

       [[451, 410]]], dtype=int32), array([[[433, 409]],

       [[434, 408]],

       [[435, 409]],

       [[434, 410]]], dtype=int32), array([[[416, 408]],

       [[423, 408]],

       [[425, 410]],

       [[425, 412]],

       [[426, 413]],

       [[425, 414]],

       [[425, 416]],

       [[424, 417]],

       [[424, 418]],

       [[421, 421]],

       [[421, 424]],

       [[422, 424]],

       [[424, 422]],

       [[425, 423]],

       [[425, 426]],

       [[424, 427]],

       [[423, 427]],

       [[422, 428]],

       [[422, 430]],

       [[421, 431]],

       [[420, 430]],

       [[420, 427]],

       [[414, 427]],

       [[413, 426]],

       [[413, 425]],

       [[421, 417]],

       [[421, 416]],

       [[422, 415]],

       [[422, 412]],

       [[421, 411]],

       [[417, 411]],

       [[416, 412]],

       [[415, 412]],

       [[414, 411]],

       [[414, 410]]], dtype=int32), array([[[398, 409]],

       [[399, 408]],

       [[404, 408]],

       [[405, 409]],

       [[405, 410]],

       [[404, 411]],

       [[399, 411]],

       [[398, 412]],

       [[398, 416]],

       [[399, 415]],

       [[403, 415]],

       [[406, 418]],

       [[406, 424]],

       [[403, 427]],

       [[402, 427]],

       [[401, 428]],

       [[399, 428]],

       [[398, 427]],

       [[397, 427]],

       [[394, 424]],

       [[394, 421]],

       [[393, 420]],

       [[393, 418]],

       [[394, 417]],

       [[394, 413]],

       [[396, 411]],

       [[396, 410]],

       [[397, 409]]], dtype=int32), array([[[398, 418]],

       [[397, 419]],

       [[397, 423]],

       [[399, 425]],

       [[401, 425]],

       [[403, 423]],

       [[403, 419]],

       [[402, 418]]], dtype=int32), array([[[434, 408]],

       [[435, 407]],

       [[436, 408]],

       [[435, 409]]], dtype=int32), array([[[436, 406]],

       [[437, 405]],

       [[438, 406]],

       [[437, 407]]], dtype=int32), array([[[437, 405]],

       [[438, 404]],

       [[439, 405]],

       [[438, 406]]], dtype=int32), array([[[438, 404]],

       [[439, 403]],

       [[440, 404]],

       [[439, 405]]], dtype=int32), array([[[1099,  403]],

       [[1100,  402]],

       [[1102,  404]],

       [[1102,  412]],

       [[1100,  414]],

       [[1099,  413]]], dtype=int32), array([[[439, 403]],

       [[440, 402]],

       [[441, 403]],

       [[440, 404]]], dtype=int32), array([[[1074,  401]],

       [[1075,  401]],

       [[1077,  403]],

       [[1077,  405]],

       [[1078,  406]],

       [[1078,  407]],

       [[1079,  408]],

       [[1079,  410]],

       [[1080,  411]],

       [[1080,  413]],

       [[1081,  414]],

       [[1081,  415]],

       [[1082,  416]],

       [[1082,  418]],

       [[1083,  419]],

       [[1083,  420]],

       [[1082,  421]],

       [[1081,  421]],

       [[1079,  419]],

       [[1079,  418]],

       [[1078,  417]],

       [[1078,  416]],

       [[1071,  416]],

       [[1070,  417]],

       [[1070,  419]],

       [[1068,  421]],

       [[1067,  421]],

       [[1066,  420]],

       [[1066,  418]],

       [[1067,  417]],

       [[1067,  416]],

       [[1068,  415]],

       [[1068,  413]],

       [[1069,  412]],

       [[1069,  410]],

       [[1070,  409]],

       [[1070,  408]],

       [[1071,  407]],

       [[1071,  405]],

       [[1072,  404]],

       [[1072,  403]]], dtype=int32), array([[[1074,  406]],

       [[1074,  407]],

       [[1073,  408]],

       [[1073,  413]],

       [[1076,  413]],

       [[1076,  410]],

       [[1075,  409]],

       [[1075,  407]]], dtype=int32), array([[[1027,  402]],

       [[1028,  401]],

       [[1039,  401]],

       [[1040,  402]],

       [[1040,  423]],

       [[1039,  424]],

       [[1038,  424]],

       [[1037,  423]],

       [[1037,  422]],

       [[1030,  422]],

       [[1028,  424]],

       [[1027,  423]]], dtype=int32), array([[[1029,  413]],

       [[1029,  419]],

       [[1030,  420]],

       [[1037,  420]],

       [[1037,  413]]], dtype=int32), array([[[1029,  404]],

       [[1029,  410]],

       [[1037,  410]],

       [[1037,  404]]], dtype=int32), array([[[1018,  402]],

       [[1019,  401]],

       [[1025,  401]],

       [[1026,  402]],

       [[1026,  404]],

       [[1025,  405]],

       [[1025,  412]],

       [[1026,  413]],

       [[1026,  418]],

       [[1025,  419]],

       [[1024,  419]],

       [[1023,  420]],

       [[1021,  420]],

       [[1020,  419]],

       [[1020,  423]],

       [[1019,  424]],

       [[1018,  423]]], dtype=int32), array([[[1021,  403]],

       [[1020,  404]],

       [[1020,  417]],

       [[1023,  417]],

       [[1023,  413]],

       [[1022,  412]],

       [[1022,  411]],

       [[1021,  410]],

       [[1021,  408]],

       [[1022,  407]],

       [[1022,  403]]], dtype=int32), array([[[440, 402]],

       [[441, 401]],

       [[442, 402]],

       [[441, 403]]], dtype=int32), array([[[442, 401]],

       [[443, 400]],

       [[444, 401]],

       [[443, 402]]], dtype=int32), array([[[1052,  399]],

       [[1054,  401]],

       [[1050,  405]],

       [[1050,  408]],

       [[1054,  408]],

       [[1055,  407]],

       [[1057,  407]],

       [[1057,  404]],

       [[1058,  403]],

       [[1059,  403]],

       [[1066,  410]],

       [[1064,  412]],

       [[1062,  410]],

       [[1062,  423]],

       [[1061,  424]],

       [[1059,  422]],

       [[1048,  422]],

       [[1046,  424]],

       [[1045,  424]],

       [[1044,  423]],

       [[1044,  411]],

       [[1043,  411]],

       [[1042,  410]],

       [[1042,  409]]], dtype=int32), array([[[1047,  415]],

       [[1047,  420]],

       [[1059,  420]],

       [[1060,  419]],

       [[1060,  415]]], dtype=int32), array([[[1210,  398]],

       [[1211,  397]],

       [[1212,  397]],

       [[1213,  398]],

       [[1213,  399]],

       [[1212,  400]],

       [[1212,  403]],

       [[1213,  404]],

       [[1216,  404]],

       [[1217,  403]],

       [[1217,  400]],

       [[1218,  399]],

       [[1219,  399]],

       [[1220,  400]],

       [[1220,  403]],

       [[1221,  404]],

       [[1223,  404]],

       [[1224,  403]],

       [[1224,  400]],

       [[1223,  399]],

       [[1224,  398]],

       [[1225,  398]],

       [[1226,  399]],

       [[1226,  404]],

       [[1223,  407]],

       [[1221,  407]],

       [[1219,  405]],

       [[1218,  405]],

       [[1216,  407]],

       [[1213,  407]],

       [[1210,  404]]], dtype=int32), array([[[446, 398]],

       [[447, 397]],

       [[448, 398]],

       [[447, 399]]], dtype=int32), array([[[211, 398]],

       [[212, 397]],

       [[213, 397]],

       [[214, 398]],

       [[214, 399]],

       [[213, 400]],

       [[213, 403]],

       [[214, 404]],

       [[217, 404]],

       [[218, 403]],

       [[218, 400]],

       [[219, 399]],

       [[220, 399]],

       [[221, 400]],

       [[221, 403]],

       [[222, 404]],

       [[224, 404]],

       [[225, 403]],

       [[225, 400]],

       [[224, 399]],

       [[225, 398]],

       [[226, 398]],

       [[227, 399]],

       [[227, 404]],

       [[224, 407]],

       [[222, 407]],

       [[220, 405]],

       [[219, 405]],

       [[217, 407]],

       [[214, 407]],

       [[211, 404]]], dtype=int32), array([[[448, 397]],

       [[449, 396]],

       [[450, 397]],

       [[449, 398]]], dtype=int32), array([[[449, 396]],

       [[450, 395]],

       [[451, 395]],

       [[452, 396]],

       [[451, 397]],

       [[450, 397]]], dtype=int32), array([[[451, 395]],

       [[452, 394]],

       [[453, 394]],

       [[454, 395]],

       [[453, 396]],

       [[452, 396]]], dtype=int32), array([[[454, 394]],

       [[455, 393]],

       [[456, 394]],

       [[455, 395]]], dtype=int32), array([[[456, 393]],

       [[457, 392]],

       [[458, 392]],

       [[459, 393]],

       [[458, 394]],

       [[457, 394]]], dtype=int32), array([[[1120,  391]],

       [[1121,  392]],

       [[1121,  402]],

       [[1120,  403]],

       [[1119,  402]],

       [[1119,  401]],

       [[1118,  400]],

       [[1118,  393]]], dtype=int32), array([[[458, 392]],

       [[459, 391]],

       [[461, 391]],

       [[462, 392]],

       [[461, 393]],

       [[459, 393]]], dtype=int32), array([[[461, 391]],

       [[462, 390]],

       [[465, 390]],

       [[466, 391]],

       [[465, 392]],

       [[462, 392]]], dtype=int32), array([[[466, 390]],

       [[467, 389]],

       [[469, 389]],

       [[470, 390]],

       [[469, 391]],

       [[467, 391]]], dtype=int32), array([[[948, 387]],

       [[949, 386]],

       [[950, 387]],

       [[950, 389]],

       [[949, 390]],

       [[948, 389]]], dtype=int32), array([[[1099,  385]],

       [[1100,  384]],

       [[1101,  384]],

       [[1102,  385]],

       [[1102,  394]],

       [[1101,  395]],

       [[1100,  395]],

       [[1099,  394]]], dtype=int32), array([[[708, 383]],

       [[709, 382]],

       [[725, 382]],

       [[727, 384]],

       [[726, 385]],

       [[719, 385]],

       [[719, 396]],

       [[716, 399]],

       [[712, 399]],

       [[711, 398]],

       [[711, 397]],

       [[712, 396]],

       [[715, 396]],

       [[716, 395]],

       [[716, 385]],

       [[709, 385]],

       [[708, 384]]], dtype=int32), array([[[824, 377]],

       [[827, 377]],

       [[828, 378]],

       [[829, 377]],

       [[914, 377]],

       [[915, 378]],

       [[916, 378]],

       [[918, 380]],

       [[918, 445]],

       [[917, 446]],

       [[917, 447]],

       [[915, 449]],

       [[822, 449]],

       [[820, 447]],

       [[820, 382]],

       [[821, 381]],

       [[821, 380]]], dtype=int32), array([[[823, 382]],

       [[823, 446]],

       [[914, 446]],

       [[914, 382]]], dtype=int32), array([[[846, 427]],

       [[847, 426]],

       [[848, 427]],

       [[847, 428]]], dtype=int32), array([[[886, 420]],

       [[887, 419]],

       [[888, 419]],

       [[889, 420]],

       [[888, 421]],

       [[887, 421]]], dtype=int32), array([[[881, 415]],

       [[882, 414]],

       [[884, 414]],

       [[885, 415]],

       [[884, 416]],

       [[883, 416]],

       [[882, 417]],

       [[881, 416]]], dtype=int32), array([[[871, 414]],

       [[872, 413]],

       [[873, 414]],

       [[873, 417]],

       [[874, 418]],

       [[873, 419]],

       [[872, 419]],

       [[871, 418]]], dtype=int32), array([[[872, 395]],

       [[873, 394]],

       [[875, 394]],

       [[876, 395]],

       [[873, 398]],

       [[873, 401]],

       [[872, 402]],

       [[871, 401]],

       [[871, 399]],

       [[870, 398]],

       [[872, 396]]], dtype=int32), array([[[845, 395]],

       [[846, 394]],

       [[847, 394]],

       [[848, 395]],

       [[853, 395]],

       [[859, 401]],

       [[860, 401]],

       [[862, 403]],

       [[863, 403]],

       [[864, 404]],

       [[864, 405]],

       [[868, 409]],

       [[868, 410]],

       [[871, 413]],

       [[871, 414]],

       [[868, 417]],

       [[868, 419]],

       [[866, 421]],

       [[865, 421]],

       [[864, 422]],

       [[860, 422]],

       [[859, 423]],

       [[858, 423]],

       [[857, 422]],

       [[856, 422]],

       [[853, 419]],

       [[851, 419]],

       [[850, 418]],

       [[850, 417]],

       [[849, 417]],

       [[848, 416]],

       [[847, 417]],

       [[847, 419]],

       [[846, 420]],

       [[845, 419]],

       [[844, 419]],

       [[843, 418]],

       [[843, 415]],

       [[842, 414]],

       [[841, 414]],

       [[840, 413]],

       [[839, 413]],

       [[837, 411]],

       [[837, 410]],

       [[836, 409]],

       [[836, 407]],

       [[835, 406]],

       [[835, 403]],

       [[836, 402]],

       [[836, 400]],

       [[841, 395]]], dtype=int32), array([[[705, 377]],

       [[706, 376]],

       [[725, 376]],

       [[727, 378]],

       [[726, 379]],

       [[708, 379]],

       [[708, 389]],

       [[707, 390]],

       [[707, 394]],

       [[706, 395]],

       [[706, 397]],

       [[704, 399]],

       [[702, 397]],

       [[703, 396]],

       [[703, 395]],

       [[704, 394]],

       [[704, 389]],

       [[705, 388]]], dtype=int32), array([[[688, 376]],

       [[689, 375]],

       [[690, 375]],

       [[692, 377]],

       [[692, 378]],

       [[700, 378]],

       [[701, 379]],

       [[701, 382]],

       [[700, 383]],

       [[699, 383]],

       [[698, 382]],

       [[698, 380]],

       [[698, 383]],

       [[696, 385]],

       [[696, 388]],

       [[701, 388]],

       [[702, 389]],

       [[702, 390]],

       [[701, 391]],

       [[698, 391]],

       [[698, 398]],

       [[697, 399]],

       [[696, 399]],

       [[695, 398]],

       [[685, 398]],

       [[684, 399]],

       [[682, 399]],

       [[681, 398]],

       [[681, 391]],

       [[680, 391]],

       [[679, 392]],

       [[677, 390]],

       [[678, 389]],

       [[679, 389]],

       [[679, 379]],

       [[680, 378]],

       [[688, 378]]], dtype=int32), array([[[685, 393]],

       [[685, 396]],

       [[695, 396]],

       [[695, 393]]], dtype=int32), array([[[684, 385]],

       [[684, 388]]], dtype=int32), array([[[682, 380]],

       [[681, 381]],

       [[681, 384]],

       [[682, 383]]], dtype=int32), array([[[403, 376]],

       [[404, 375]],

       [[424, 375]],

       [[425, 376]],

       [[424, 377]],

       [[423, 377]],

       [[423, 381]],

       [[424, 381]],

       [[425, 382]],

       [[425, 383]],

       [[423, 385]],

       [[423, 396]],

       [[422, 397]],

       [[421, 397]],

       [[420, 398]],

       [[418, 398]],

       [[416, 396]],

       [[417, 395]],

       [[420, 395]],

       [[421, 394]],

       [[421, 384]],

       [[419, 384]],

       [[419, 388]],

       [[420, 389]],

       [[420, 391]],

       [[419, 392]],

       [[417, 390]],

       [[417, 389]],

       [[416, 388]],

       [[416, 382]],

       [[417, 381]],

       [[421, 381]],

       [[421, 377]],

       [[416, 377]],

       [[416, 380]],

       [[415, 381]],

       [[415, 393]],

       [[416, 393]],

       [[417, 394]],

       [[415, 396]],

       [[406, 396]],

       [[405, 395]],

       [[406, 394]],

       [[407, 394]],

       [[407, 389]],

       [[406, 388]],

       [[406, 377]],

       [[406, 387]],

       [[405, 388]],

       [[405, 394]],

       [[404, 395]],

       [[404, 396]],

       [[403, 397]],

       [[402, 397]],

       [[401, 396]],

       [[401, 394]],

       [[402, 393]],

       [[402, 390]],

       [[403, 389]]], dtype=int32), array([[[410, 389]],

       [[410, 393]],

       [[411, 393]],

       [[412, 392]],

       [[412, 389]]], dtype=int32), array([[[410, 384]],

       [[410, 387]],

       [[412, 387]],

       [[412, 384]]], dtype=int32), array([[[1120,  373]],

       [[1121,  374]],

       [[1121,  383]],

       [[1120,  384]],

       [[1118,  382]],

       [[1118,  375]]], dtype=int32), array([[[437, 374]],

       [[438, 373]],

       [[441, 376]],

       [[447, 376]],

       [[449, 378]],

       [[449, 384]],

       [[450, 385]],

       [[450, 386]],

       [[449, 387]],

       [[448, 387]],

       [[448, 389]],

       [[447, 390]],

       [[447, 395]],

       [[446, 396]],

       [[446, 399]],

       [[444, 401]],

       [[443, 400]],

       [[443, 397]],

       [[440, 397]],

       [[439, 396]],

       [[439, 395]],

       [[440, 394]],

       [[444, 394]],

       [[444, 391]],

       [[437, 391]],

       [[437, 392]],

       [[436, 393]],

       [[436, 394]],

       [[433, 397]],

       [[431, 397]],

       [[430, 396]],

       [[434, 392]],

       [[434, 387]],

       [[432, 387]],

       [[431, 386]],

       [[431, 382]],

       [[431, 390]],

       [[430, 391]],

       [[430, 393]],

       [[429, 394]],

       [[429, 395]],

       [[427, 397]],

       [[426, 396]],

       [[426, 394]],

       [[427, 393]],

       [[427, 391]],

       [[428, 390]],

       [[428, 377]],

       [[429, 376]],

       [[437, 376]]], dtype=int32), array([[[948, 371]],

       [[949, 370]],

       [[950, 371]],

       [[950, 374]],

       [[949, 375]],

       [[948, 374]]], dtype=int32), array([[[785, 368]],

       [[786, 367]],

       [[787, 368]],

       [[786, 369]]], dtype=int32), array([[[1099,  366]],

       [[1100,  365]],

       [[1102,  367]],

       [[1102,  375]],

       [[1101,  376]],

       [[1100,  376]],

       [[1099,  375]]], dtype=int32), array([[[1119,  355]],

       [[1120,  354]],

       [[1121,  355]],

       [[1121,  365]],

       [[1120,  366]],

       [[1118,  364]],

       [[1118,  357]],

       [[1119,  356]]], dtype=int32), array([[[948, 354]],

       [[949, 353]],

       [[950, 354]],

       [[949, 355]]], dtype=int32), array([[[1099,  348]],

       [[1100,  347]],

       [[1101,  347]],

       [[1102,  348]],

       [[1102,  357]],

       [[1101,  358]],

       [[1100,  358]],

       [[1099,  357]]], dtype=int32), array([[[945, 344]],

       [[946, 343]],

       [[948, 343]],

       [[949, 344]],

       [[948, 345]],

       [[946, 345]]], dtype=int32), array([[[785, 344]],

       [[786, 343]],

       [[788, 343]],

       [[789, 344]],

       [[788, 345]],

       [[787, 345]],

       [[787, 348]],

       [[786, 349]],

       [[785, 348]]], dtype=int32), array([[[1118,  337]],

       [[1119,  336]],

       [[1120,  336]],

       [[1121,  337]],

       [[1121,  346]],

       [[1120,  347]],

       [[1119,  347]],

       [[1118,  346]]], dtype=int32), array([[[1099,  329]],

       [[1100,  328]],

       [[1101,  328]],

       [[1102,  329]],

       [[1102,  338]],

       [[1100,  340]],

       [[1099,  339]]], dtype=int32), array([[[1120,  317]],

       [[1121,  318]],

       [[1121,  327]],

       [[1120,  328]],

       [[1119,  328]],

       [[1118,  327]],

       [[1118,  319]]], dtype=int32), array([[[1099,  311]],

       [[1100,  310]],

       [[1101,  310]],

       [[1102,  311]],

       [[1102,  320]],

       [[1101,  321]],

       [[1100,  321]],

       [[1099,  320]]], dtype=int32), array([[[1055,  301]],

       [[1056,  300]],

       [[1057,  300]],

       [[1058,  301]],

       [[1060,  301]],

       [[1063,  304]],

       [[1064,  304]],

       [[1065,  305]],

       [[1067,  305]],

       [[1069,  303]],

       [[1072,  303]],

       [[1073,  304]],

       [[1076,  304]],

       [[1077,  303]],

       [[1084,  303]],

       [[1087,  306]],

       [[1087,  312]],

       [[1089,  312]],

       [[1090,  311]],

       [[1091,  312]],

       [[1094,  312]],

       [[1095,  313]],

       [[1095,  314]],

       [[1096,  314]],

       [[1097,  315]],

       [[1097,  318]],

       [[1096,  319]],

       [[1096,  320]],

       [[1094,  322]],

       [[1093,  322]],

       [[1093,  323]],

       [[1092,  324]],

       [[1092,  334]],

       [[1090,  336]],

       [[1090,  337]],

       [[1089,  338]],

       [[1089,  339]],

       [[1084,  344]],

       [[1083,  344]],

       [[1082,  345]],

       [[1081,  345]],

       [[1080,  344]],

       [[1080,  341]],

       [[1069,  341]],

       [[1069,  342]],

       [[1067,  344]],

       [[1066,  344]],

       [[1065,  345]],

       [[1063,  345]],

       [[1062,  344]],

       [[1060,  344]],

       [[1057,  341]],

       [[1057,  340]],

       [[1056,  339]],

       [[1056,  338]],

       [[1057,  337]],

       [[1057,  333]],

       [[1056,  332]],

       [[1056,  331]],

       [[1055,  330]],

       [[1053,  330]],

       [[1049,  326]],

       [[1049,  324]],

       [[1048,  323]],

       [[1048,  320]],

       [[1049,  319]],

       [[1049,  318]],

       [[1050,  317]],

       [[1052,  317]],

       [[1053,  318]],

       [[1053,  319]],

       [[1053,  318]],

       [[1054,  317]],

       [[1054,  313]],

       [[1053,  312]],

       [[1053,  311]],

       [[1052,  310]],

       [[1052,  304]],

       [[1053,  303]],

       [[1053,  302]],

       [[1054,  301]]], dtype=int32), array([[[1085,  326]],

       [[1085,  329]],

       [[1087,  331]],

       [[1088,  331]],

       [[1088,  328]],

       [[1086,  326]]], dtype=int32), array([[[1079,  325]],

       [[1079,  328]]], dtype=int32), array([[[1087,  314]],

       [[1087,  318]],

       [[1088,  317]],

       [[1090,  317]],

       [[1090,  314]]], dtype=int32), array([[[1056,  307]],

       [[1056,  310]],

       [[1057,  310]],

       [[1058,  311]],

       [[1058,  313]],

       [[1059,  314]],

       [[1059,  308]],

       [[1058,  308]],

       [[1057,  307]]], dtype=int32), array([[[1120,  299]],

       [[1121,  300]],

       [[1121,  309]],

       [[1120,  310]],

       [[1118,  308]],

       [[1118,  301]]], dtype=int32), array([[[1209,  295]],

       [[1210,  294]],

       [[1211,  295]],

       [[1210,  296]]], dtype=int32), array([[[222, 295]],

       [[223, 294]],

       [[224, 295]],

       [[223, 296]]], dtype=int32), array([[[210, 295]],

       [[211, 294]],

       [[212, 295]],

       [[211, 296]]], dtype=int32), array([[[1210,  294]],

       [[1211,  293]],

       [[1212,  294]],

       [[1211,  295]]], dtype=int32), array([[[1220,  293]],

       [[1221,  292]],

       [[1223,  294]],

       [[1223,  295]],

       [[1222,  296]],

       [[1220,  294]]], dtype=int32), array([[[221, 293]],

       [[222, 292]],

       [[223, 293]],

       [[223, 294]],

       [[222, 295]],

       [[221, 294]]], dtype=int32), array([[[211, 293]],

       [[212, 292]],

       [[213, 293]],

       [[213, 294]],

       [[212, 295]],

       [[211, 294]]], dtype=int32), array([[[1211,  292]],

       [[1212,  291]],

       [[1213,  292]],

       [[1213,  293]],

       [[1212,  294]],

       [[1211,  293]]], dtype=int32), array([[[220, 292]],

       [[221, 291]],

       [[222, 292]],

       [[221, 293]]], dtype=int32), array([[[212, 292]],

       [[213, 291]],

       [[214, 292]],

       [[213, 293]]], dtype=int32), array([[[1212,  291]],

       [[1213,  290]],

       [[1214,  291]],

       [[1213,  292]]], dtype=int32), array([[[381, 285]],

       [[382, 285]],

       [[383, 286]],

       [[384, 286]],

       [[385, 287]],

       [[385, 290]],

       [[383, 292]],

       [[381, 292]],

       [[379, 290]],

       [[379, 287]]], dtype=int32), array([[[376, 281]],

       [[377, 280]],

       [[378, 281]],

       [[377, 282]]], dtype=int32), array([[[1219,  280]],

       [[1220,  279]],

       [[1221,  280]],

       [[1221,  281]],

       [[1220,  282]],

       [[1219,  281]]], dtype=int32), array([[[212, 280]],

       [[213, 279]],

       [[214, 280]],

       [[213, 281]]], dtype=int32), array([[[1210,  278]],

       [[1211,  277]],

       [[1213,  279]],

       [[1213,  280]],

       [[1212,  281]],

       [[1210,  279]]], dtype=int32), array([[[211, 278]],

       [[212, 277]],

       [[213, 278]],

       [[213, 279]],

       [[212, 280]],

       [[211, 279]]], dtype=int32), array([[[1222,  276]],

       [[1223,  277]],

       [[1223,  278]],

       [[1221,  280]],

       [[1220,  279]],

       [[1220,  278]]], dtype=int32), array([[[1209,  277]],

       [[1210,  276]],

       [[1211,  277]],

       [[1210,  278]]], dtype=int32), array([[[223, 276]],

       [[224, 277]],

       [[224, 278]],

       [[222, 280]],

       [[221, 279]],

       [[221, 278]]], dtype=int32), array([[[210, 277]],

       [[211, 276]],

       [[212, 277]],

       [[211, 278]]], dtype=int32), array([[[611, 272]],

       [[612, 271]],

       [[613, 271]],

       [[614, 272]],

       [[614, 281]],

       [[613, 282]],

       [[612, 282]],

       [[611, 281]]], dtype=int32), array([[[381, 267]],

       [[382, 267]],

       [[383, 268]],

       [[384, 268]],

       [[385, 269]],

       [[385, 272]],

       [[383, 274]],

       [[381, 274]],

       [[379, 272]],

       [[379, 269]]], dtype=int32), array([[[613, 252]],

       [[614, 253]],

       [[614, 263]],

       [[613, 264]],

       [[611, 262]],

       [[611, 254]]], dtype=int32), array([[[631, 245]],

       [[632, 244]],

       [[633, 244]],

       [[634, 245]],

       [[634, 254]],

       [[633, 255]],

       [[632, 255]],

       [[631, 254]]], dtype=int32), array([[[1215,  244]],

       [[1216,  243]],

       [[1217,  244]],

       [[1217,  283]],

       [[1219,  281]],

       [[1220,  282]],

       [[1220,  285]],

       [[1222,  285]],

       [[1223,  286]],

       [[1222,  287]],

       [[1220,  287]],

       [[1220,  290]],

       [[1221,  291]],

       [[1221,  292]],

       [[1220,  293]],

       [[1218,  291]],

       [[1218,  290]],

       [[1217,  289]],

       [[1217,  389]],

       [[1216,  390]],

       [[1215,  389]],

       [[1215,  289]],

       [[1215,  290]],

       [[1214,  291]],

       [[1213,  290]],

       [[1213,  287]],

       [[1210,  287]],

       [[1209,  286]],

       [[1210,  285]],

       [[1212,  285]],

       [[1212,  281]],

       [[1213,  280]],

       [[1215,  282]],

       [[1215,  283]]], dtype=int32), array([[[216, 244]],

       [[217, 243]],

       [[218, 244]],

       [[218, 283]],

       [[219, 282]],

       [[219, 281]],

       [[221, 279]],

       [[222, 280]],

       [[222, 281]],

       [[221, 282]],

       [[221, 285]],

       [[223, 285]],

       [[224, 286]],

       [[223, 287]],

       [[221, 287]],

       [[221, 291]],

       [[220, 292]],

       [[219, 291]],

       [[219, 290]],

       [[218, 289]],

       [[218, 389]],

       [[217, 390]],

       [[216, 389]],

       [[216, 289]],

       [[216, 290]],

       [[214, 292]],

       [[213, 291]],

       [[213, 287]],

       [[211, 287]],

       [[210, 286]],

       [[211, 285]],

       [[213, 285]],

       [[213, 281]],

       [[214, 280]],

       [[215, 281]],

       [[215, 282]],

       [[216, 283]]], dtype=int32), array([[[538, 243]],

       [[539, 242]],

       [[540, 242]],

       [[541, 243]],

       [[541, 245]],

       [[540, 246]],

       [[539, 246]],

       [[538, 245]]], dtype=int32), array([[[611, 235]],

       [[612, 234]],

       [[613, 234]],

       [[614, 235]],

       [[614, 244]],

       [[613, 245]],

       [[612, 245]],

       [[611, 244]]], dtype=int32), array([[[560, 231]],

       [[561, 232]],

       [[561, 233]],

       [[562, 232]],

       [[563, 232]],

       [[564, 231]],

       [[566, 231]],

       [[568, 233]],

       [[569, 233]],

       [[570, 232]],

       [[571, 232]],

       [[572, 231]],

       [[575, 231]],

       [[577, 233]],

       [[577, 234]],

       [[578, 235]],

       [[578, 245]],

       [[577, 246]],

       [[576, 246]],

       [[575, 245]],

       [[575, 236]],

       [[573, 234]],

       [[571, 234]],

       [[570, 235]],

       [[570, 244]],

       [[568, 246]],

       [[566, 244]],

       [[566, 235]],

       [[565, 234]],

       [[563, 234]],

       [[561, 236]],

       [[561, 245]],

       [[560, 246]],

       [[559, 246]],

       [[558, 245]],

       [[558, 233]]], dtype=int32), array([[[384, 231]],

       [[385, 230]],

       [[390, 230]],

       [[391, 231]],

       [[391, 241]],

       [[390, 242]],

       [[385, 242]],

       [[384, 241]]], dtype=int32), array([[[1210,  227]],

       [[1211,  226]],

       [[1212,  227]],

       [[1212,  229]],

       [[1213,  230]],

       [[1222,  230]],

       [[1222,  227]],

       [[1223,  226]],

       [[1224,  226]],

       [[1225,  227]],

       [[1225,  228]],

       [[1226,  229]],

       [[1226,  232]],

       [[1225,  233]],

       [[1212,  233]],

       [[1212,  235]],

       [[1211,  236]],

       [[1210,  235]]], dtype=int32), array([[[631, 227]],

       [[632, 226]],

       [[633, 226]],

       [[634, 227]],

       [[634, 236]],

       [[633, 237]],

       [[632, 237]],

       [[631, 236]]], dtype=int32), array([[[581, 227]],

       [[582, 226]],

       [[586, 226]],

       [[588, 228]],

       [[588, 231]],

       [[586, 233]],

       [[586, 236]],

       [[587, 236]],

       [[588, 237]],

       [[587, 238]],

       [[581, 238]],

       [[580, 237]],

       [[580, 236]],

       [[584, 232]],

       [[584, 229]],

       [[582, 229]],

       [[581, 228]]], dtype=int32), array([[[546, 227]],

       [[547, 226]],

       [[551, 226]],

       [[552, 227]],

       [[553, 227]],

       [[554, 228]],

       [[554, 229]],

       [[555, 230]],

       [[555, 234]],

       [[556, 235]],

       [[555, 236]],

       [[555, 240]],

       [[554, 241]],

       [[554, 242]],

       [[550, 246]],

       [[545, 246]],

       [[544, 245]],

       [[544, 244]],

       [[545, 243]],

       [[549, 243]],

       [[552, 240]],

       [[552, 237]],

       [[550, 239]],

       [[547, 239]],

       [[546, 238]],

       [[545, 238]],

       [[544, 237]],

       [[544, 236]],

       [[543, 235]],

       [[543, 230]],

       [[544, 229]],

       [[544, 228]],

       [[545, 227]]], dtype=int32), array([[[547, 229]],

       [[547, 230]],

       [[546, 231]],

       [[546, 234]],

       [[548, 236]],

       [[550, 236]],

       [[552, 234]],

       [[552, 231]],

       [[551, 230]],

       [[551, 229]]], dtype=int32), array([[[526, 227]],

       [[527, 226]],

       [[532, 226]],

       [[535, 229]],

       [[535, 234]],

       [[534, 235]],

       [[534, 236]],

       [[530, 240]],

       [[530, 243]],

       [[534, 243]],

       [[535, 244]],

       [[535, 245]],

       [[534, 246]],

       [[524, 246]],

       [[523, 245]],

       [[523, 243]],

       [[531, 235]],

       [[531, 234]],

       [[532, 233]],

       [[532, 230]],

       [[531, 229]],

       [[527, 229]],

       [[526, 230]],

       [[525, 230]],

       [[524, 229]],

       [[524, 228]],

       [[525, 227]]], dtype=int32), array([[[374, 223]],

       [[375, 222]],

       [[377, 222]],

       [[378, 223]],

       [[378, 235]],

       [[377, 236]],

       [[377, 243]],

       [[378, 244]],

       [[378, 245]],

       [[376, 247]],

       [[374, 245]],

       [[374, 244]],

       [[375, 243]],

       [[375, 226]],

       [[374, 225]]], dtype=int32), array([[[611, 216]],

       [[612, 215]],

       [[613, 215]],

       [[614, 216]],

       [[614, 226]],

       [[613, 227]],

       [[611, 225]]], dtype=int32), array([[[1219,  214]],

       [[1220,  213]],

       [[1222,  213]],

       [[1223,  214]],

       [[1224,  214]],

       [[1226,  216]],

       [[1226,  221]],

       [[1224,  223]],

       [[1223,  223]],

       [[1222,  224]],

       [[1215,  224]],

       [[1214,  223]],

       [[1213,  223]],

       [[1210,  220]],

       [[1210,  215]],

       [[1211,  214]],

       [[1212,  215]],

       [[1212,  219]],

       [[1214,  221]],

       [[1216,  221]],

       [[1216,  216]],

       [[1218,  214]]], dtype=int32), array([[[1220,  216]],

       [[1219,  217]],

       [[1219,  221]],

       [[1223,  221]],

       [[1223,  217]],

       [[1222,  216]]], dtype=int32), array([[[220, 214]],

       [[221, 213]],

       [[223, 213]],

       [[224, 214]],

       [[225, 214]],

       [[227, 216]],

       [[227, 221]],

       [[225, 223]],

       [[225, 226]],

       [[226, 227]],

       [[226, 228]],

       [[227, 229]],

       [[227, 232]],

       [[226, 233]],

       [[213, 233]],

       [[213, 235]],

       [[212, 236]],

       [[211, 235]],

       [[211, 227]],

       [[212, 226]],

       [[213, 227]],

       [[213, 229]],

       [[214, 230]],

       [[223, 230]],

       [[223, 224]],

       [[216, 224]],

       [[215, 223]],

       [[214, 223]],

       [[211, 220]],

       [[211, 215]],

       [[212, 214]],

       [[213, 214]],

       [[214, 215]],

       [[213, 216]],

       [[213, 219]],

       [[215, 221]],

       [[217, 221]],

       [[217, 216]],

       [[219, 214]]], dtype=int32), array([[[221, 216]],

       [[220, 217]],

       [[220, 221]],

       [[224, 221]],

       [[224, 217]],

       [[223, 216]]], dtype=int32), array([[[631, 208]],

       [[632, 207]],

       [[633, 207]],

       [[634, 208]],

       [[634, 217]],

       [[633, 218]],

       [[632, 218]],

       [[631, 217]]], dtype=int32), array([[[1224,  202]],

       [[1225,  201]],

       [[1226,  202]],

       [[1226,  211]],

       [[1225,  212]],

       [[1224,  211]],

       [[1223,  211]],

       [[1222,  210]],

       [[1220,  210]],

       [[1219,  209]],

       [[1218,  209]],

       [[1217,  208]],

       [[1215,  208]],

       [[1214,  207]],

       [[1213,  207]],

       [[1212,  206]],

       [[1211,  206]],

       [[1210,  205]],

       [[1210,  204]],

       [[1211,  203]],

       [[1212,  203]],

       [[1213,  204]],

       [[1214,  204]],

       [[1215,  205]],

       [[1217,  205]],

       [[1218,  206]],

       [[1219,  206]],

       [[1220,  207]],

       [[1221,  207]],

       [[1222,  208]],

       [[1224,  208]]], dtype=int32), array([[[225, 202]],

       [[226, 201]],

       [[227, 202]],

       [[227, 210]],

       [[226, 211]],

       [[224, 211]],

       [[223, 210]],

       [[221, 210]],

       [[220, 209]],

       [[219, 209]],

       [[218, 208]],

       [[216, 208]],

       [[215, 207]],

       [[214, 207]],

       [[213, 206]],

       [[212, 206]],

       [[211, 205]],

       [[211, 204]],

       [[212, 203]],

       [[213, 203]],

       [[214, 204]],

       [[215, 204]],

       [[216, 205]],

       [[218, 205]],

       [[219, 206]],

       [[220, 206]],

       [[221, 207]],

       [[222, 207]],

       [[223, 208]],

       [[225, 208]]], dtype=int32), array([[[611, 198]],

       [[612, 197]],

       [[613, 197]],

       [[614, 198]],

       [[614, 207]],

       [[613, 208]],

       [[612, 208]],

       [[611, 207]]], dtype=int32), array([[[576, 193]],

       [[582, 193]],

       [[583, 194]],

       [[584, 194]],

       [[586, 196]],

       [[586, 204]],

       [[587, 205]],

       [[587, 209]],

       [[584, 212]],

       [[583, 212]],

       [[582, 213]],

       [[576, 213]],

       [[574, 211]],

       [[574, 195]]], dtype=int32), array([[[578, 204]],

       [[578, 210]],

       [[581, 210]],

       [[582, 209]],

       [[583, 209]],

       [[583, 205]],

       [[582, 204]]], dtype=int32), array([[[578, 196]],

       [[578, 201]],

       [[581, 201]],

       [[582, 200]],

       [[582, 197]],

       [[581, 196]]], dtype=int32), array([[[533, 194]],

       [[534, 193]],

       [[546, 193]],

       [[547, 194]],

       [[547, 215]],

       [[546, 216]],

       [[545, 216]],

       [[544, 215]],

       [[544, 214]],

       [[536, 214]],

       [[536, 215]],

       [[535, 216]],

       [[533, 214]]], dtype=int32), array([[[536, 205]],

       [[536, 211]],

       [[538, 211]],

       [[539, 212]],

       [[540, 211]],

       [[542, 211]],

       [[543, 212]],

       [[544, 211]],

       [[544, 205]]], dtype=int32), array([[[537, 195]],

       [[536, 196]],

       [[536, 202]],

       [[544, 202]],

       [[544, 196]],

       [[543, 195]],

       [[542, 195]],

       [[541, 196]],

       [[540, 195]],

       [[539, 195]],

       [[538, 196]]], dtype=int32), array([[[526, 192]],

       [[531, 192]],

       [[533, 194]],

       [[533, 195]],

       [[532, 196]],

       [[532, 198]],

       [[531, 199]],

       [[531, 202]],

       [[532, 203]],

       [[532, 204]],

       [[533, 205]],

       [[533, 209]],

       [[530, 212]],

       [[528, 212]],

       [[527, 211]],

       [[527, 215]],

       [[526, 216]],

       [[525, 216]],

       [[524, 215]],

       [[524, 194]]], dtype=int32), array([[[527, 195]],

       [[527, 209]],

       [[530, 209]],

       [[530, 205]],

       [[529, 204]],

       [[529, 203]],

       [[528, 202]],

       [[528, 200]],

       [[529, 199]],

       [[529, 195]]], dtype=int32), array([[[559, 191]],

       [[560, 192]],

       [[560, 193]],

       [[559, 194]],

       [[559, 195]],

       [[558, 196]],

       [[558, 199]],

       [[564, 199]],

       [[564, 196]],

       [[565, 195]],

       [[566, 195]],

       [[573, 202]],

       [[571, 204]],

       [[569, 202]],

       [[569, 215]],

       [[568, 216]],

       [[567, 216]],

       [[566, 215]],

       [[566, 214]],

       [[554, 214]],

       [[554, 215]],

       [[553, 216]],

       [[552, 216]],

       [[551, 215]],

       [[551, 203]],

       [[550, 203]],

       [[549, 202]],

       [[549, 200]],

       [[550, 199]],

       [[551, 199]]], dtype=int32), array([[[554, 207]],

       [[554, 211]],

       [[555, 212]],

       [[566, 212]],

       [[566, 207]]], dtype=int32), array([[[1210,  191]],

       [[1211,  190]],

       [[1212,  191]],

       [[1212,  193]],

       [[1223,  193]],

       [[1223,  191]],

       [[1224,  190]],

       [[1225,  191]],

       [[1225,  192]],

       [[1226,  193]],

       [[1226,  195]],

       [[1225,  196]],

       [[1213,  196]],

       [[1212,  197]],

       [[1212,  198]],

       [[1211,  199]],

       [[1210,  198]]], dtype=int32), array([[[211, 191]],

       [[212, 190]],

       [[213, 191]],

       [[213, 193]],

       [[223, 193]],

       [[223, 191]],

       [[224, 190]],

       [[225, 190]],

       [[226, 191]],

       [[226, 192]],

       [[227, 193]],

       [[227, 195]],

       [[226, 196]],

       [[213, 196]],

       [[213, 198]],

       [[212, 199]],

       [[211, 198]]], dtype=int32), array([[[631, 190]],

       [[632, 189]],

       [[633, 189]],

       [[634, 190]],

       [[634, 199]],

       [[633, 200]],

       [[632, 200]],

       [[631, 199]]], dtype=int32), array([[[384, 181]],

       [[389, 181]],

       [[390, 182]],

       [[391, 182]],

       [[395, 186]],

       [[395, 188]],

       [[396, 189]],

       [[396, 190]],

       [[395, 191]],

       [[395, 193]],

       [[394, 194]],

       [[394, 195]],

       [[392, 197]],

       [[391, 197]],

       [[390, 198]],

       [[384, 198]],

       [[383, 197]],

       [[382, 197]],

       [[379, 194]],

       [[379, 192]],

       [[378, 191]],

       [[378, 188]],

       [[379, 187]],

       [[379, 186]],

       [[380, 185]],

       [[380, 184]],

       [[381, 183]],

       [[382, 183]]], dtype=int32), array([[[393, 188]],

       [[393, 191]]], dtype=int32), array([[[381, 187]],

       [[381, 192]]], dtype=int32), array([[[611, 179]],

       [[612, 178]],

       [[613, 178]],

       [[614, 179]],

       [[614, 189]],

       [[613, 190]],

       [[611, 188]]], dtype=int32), array([[[631, 171]],

       [[632, 170]],

       [[633, 170]],

       [[634, 171]],

       [[634, 180]],

       [[633, 181]],

       [[632, 181]],

       [[631, 180]]], dtype=int32), array([[[383, 169]],

       [[384, 168]],

       [[390, 168]],

       [[391, 169]],

       [[390, 170]],

       [[384, 170]]], dtype=int32), array([[[395, 167]],

       [[396, 166]],

       [[398, 166]],

       [[399, 167]],

       [[399, 185]],

       [[398, 186]],

       [[397, 186]],

       [[395, 184]]], dtype=int32), array([[[393, 165]],

       [[394, 166]],

       [[394, 167]],

       [[392, 169]],

       [[391, 169]],

       [[390, 168]]], dtype=int32), array([[[393, 165]],

       [[394, 164]],

       [[395, 165]],

       [[394, 166]]], dtype=int32), array([[[611, 161]],

       [[612, 160]],

       [[613, 160]],

       [[614, 161]],

       [[614, 170]],

       [[613, 171]],

       [[612, 171]],

       [[611, 170]]], dtype=int32), array([[[394, 161]],

       [[395, 160]],

       [[396, 161]],

       [[396, 163]],

       [[395, 164]],

       [[394, 163]]], dtype=int32), array([[[378, 159]],

       [[379, 158]],

       [[380, 159]],

       [[380, 163]],

       [[381, 162]],

       [[383, 162]],

       [[384, 161]],

       [[385, 161]],

       [[386, 160]],

       [[387, 161]],

       [[387, 162]],

       [[385, 164]],

       [[384, 164]],

       [[384, 168]],

       [[383, 169]],

       [[382, 169]],

       [[378, 165]]], dtype=int32), array([[[391, 158]],

       [[392, 157]],

       [[393, 158]],

       [[392, 159]]], dtype=int32), array([[[379, 157]],

       [[380, 156]],

       [[381, 157]],

       [[381, 158]],

       [[380, 159]],

       [[379, 158]]], dtype=int32), array([[[380, 156]],

       [[381, 155]],

       [[382, 156]],

       [[381, 157]]], dtype=int32), array([[[381, 155]],

       [[382, 154]],

       [[383, 155]],

       [[382, 156]]], dtype=int32), array([[[387, 154]],

       [[388, 153]],

       [[390, 153]],

       [[391, 154]],

       [[390, 155]],

       [[388, 155]]], dtype=int32), array([[[383, 154]],

       [[384, 153]],

       [[385, 153]],

       [[386, 154]],

       [[385, 155]],

       [[384, 155]]], dtype=int32), array([[[631, 153]],

       [[632, 152]],

       [[633, 152]],

       [[634, 153]],

       [[634, 162]],

       [[633, 163]],

       [[632, 163]],

       [[631, 162]]], dtype=int32), array([[[1209,  148]],

       [[1210,  147]],

       [[1211,  148]],

       [[1210,  149]]], dtype=int32), array([[[210, 148]],

       [[211, 147]],

       [[212, 148]],

       [[211, 149]]], dtype=int32), array([[[1221,  147]],

       [[1222,  146]],

       [[1223,  147]],

       [[1223,  148]],

       [[1222,  149]],

       [[1221,  148]]], dtype=int32), array([[[1220,  146]],

       [[1221,  145]],

       [[1222,  146]],

       [[1221,  147]]], dtype=int32), array([[[1210,  146]],

       [[1211,  145]],

       [[1212,  146]],

       [[1212,  147]],

       [[1211,  148]],

       [[1210,  147]]], dtype=int32), array([[[221, 146]],

       [[222, 145]],

       [[224, 147]],

       [[224, 148]],

       [[223, 149]],

       [[221, 147]]], dtype=int32), array([[[211, 146]],

       [[212, 145]],

       [[213, 146]],

       [[213, 147]],

       [[212, 148]],

       [[211, 147]]], dtype=int32), array([[[1211,  145]],

       [[1212,  144]],

       [[1213,  145]],

       [[1212,  146]]], dtype=int32), array([[[212, 145]],

       [[213, 144]],

       [[214, 145]],

       [[213, 146]]], dtype=int32), array([[[1219,  144]],

       [[1220,  143]],

       [[1221,  144]],

       [[1221,  145]],

       [[1220,  146]],

       [[1219,  145]]], dtype=int32), array([[[1209,  139]],

       [[1210,  138]],

       [[1222,  138]],

       [[1223,  139]],

       [[1222,  140]],

       [[1220,  140]],

       [[1220,  143]],

       [[1219,  144]],

       [[1217,  142]],

       [[1217,  181]],

       [[1216,  182]],

       [[1215,  181]],

       [[1215,  142]],

       [[1214,  143]],

       [[1214,  144]],

       [[1213,  145]],

       [[1212,  144]],

       [[1212,  140]],

       [[1210,  140]]], dtype=int32), array([[[210, 139]],

       [[211, 138]],

       [[223, 138]],

       [[224, 139]],

       [[223, 140]],

       [[221, 140]],

       [[221, 143]],

       [[222, 144]],

       [[222, 145]],

       [[221, 146]],

       [[219, 144]],

       [[219, 143]],

       [[218, 142]],

       [[218, 181]],

       [[217, 182]],

       [[216, 181]],

       [[216, 142]],

       [[215, 143]],

       [[215, 144]],

       [[214, 145]],

       [[213, 144]],

       [[213, 140]],

       [[211, 140]]], dtype=int32), array([[[344, 127]],

       [[632, 127]],

       [[634, 129]],

       ...,

       [[343, 437]],

       [[343, 130]],

       [[342, 129]]], dtype=int32), array([[[786, 879]],

       [[786, 929]],

       [[787, 930]],

       [[788, 929]],

       [[789, 929]],

       [[789, 879]]], dtype=int32), array([[[779, 879]],

       [[778, 880]],

       [[778, 929]],

       [[781, 929]],

       [[781, 879]],

       [[780, 880]]], dtype=int32), array([[[778, 823]],

       [[778, 877]],

       [[781, 877]],

       [[781, 823]]], dtype=int32), array([[[786, 822]],

       [[786, 877]],

       [[789, 877]],

       [[789, 822]]], dtype=int32), array([[[1006,  783]],

       [[1006,  786]]], dtype=int32), array([[[1031,  758]],

       [[1030,  759]],

       [[1026,  759]],

       [[1025,  760]],

       [[1023,  760]],

       [[1019,  764]],

       [[1019,  765]],

       [[1018,  766]],

       [[1018,  768]],

       [[1017,  769]],

       [[1017,  773]],

       [[1018,  774]],

       [[1018,  776]],

       [[1019,  777]],

       [[1019,  778]],

       [[1021,  780]],

       [[1021,  781]],

       [[1022,  781]],

       [[1025,  784]],

       [[1030,  784]],

       [[1031,  785]],

       [[1032,  785]],

       [[1033,  784]],

       [[1037,  784]],

       [[1039,  782]],

       [[1040,  782]],

       [[1043,  779]],

       [[1043,  777]],

       [[1044,  776]],

       [[1044,  767]],

       [[1043,  766]],

       [[1043,  764]],

       [[1040,  761]],

       [[1039,  761]],

       [[1038,  760]],

       [[1037,  760]],

       [[1036,  759]],

       [[1032,  759]]], dtype=int32), array([[[1028,  763]],

       [[1033,  763]],

       [[1034,  764]],

       [[1035,  764]],

       [[1039,  768]],

       [[1039,  775]],

       [[1035,  779]],

       [[1034,  779]],

       [[1033,  780]],

       [[1029,  780]],

       [[1028,  779]],

       [[1027,  779]],

       [[1023,  775]],

       [[1023,  774]],

       [[1022,  773]],

       [[1022,  770]],

       [[1023,  769]],

       [[1023,  767]],

       [[1024,  766]],

       [[1025,  766]]], dtype=int32), array([[[1036,  770]],

       [[1036,  773]]], dtype=int32), array([[[850, 758]],

       [[849, 759]],

       [[845, 759]],

       [[844, 760]],

       [[843, 760]],

       [[839, 764]],

       [[839, 765]],

       [[838, 766]],

       [[838, 768]],

       [[837, 769]],

       [[837, 774]],

       [[838, 775]],

       [[838, 777]],

       [[839, 778]],

       [[839, 779]],

       [[842, 782]],

       [[843, 782]],

       [[844, 783]],

       [[845, 783]],

       [[846, 784]],

       [[850, 784]],

       [[851, 785]],

       [[852, 784]],

       [[856, 784]],

       [[857, 783]],

       [[858, 783]],

       [[863, 778]],

       [[863, 776]],

       [[864, 775]],

       [[864, 767]],

       [[863, 766]],

       [[863, 764]],

       [[859, 760]],

       [[858, 760]],

       [[857, 759]],

       [[853, 759]],

       [[852, 758]]], dtype=int32), array([[[850, 763]],

       [[851, 762]],

       [[852, 763]],

       [[853, 763]],

       [[854, 764]],

       [[855, 764]],

       [[859, 768]],

       [[859, 770]],

       [[860, 771]],

       [[860, 772]],

       [[859, 773]],

       [[859, 775]],

       [[855, 779]],

       [[854, 779]],

       [[853, 780]],

       [[849, 780]],

       [[848, 779]],

       [[847, 779]],

       [[843, 775]],

       [[843, 774]],

       [[842, 773]],

       [[842, 770]],

       [[843, 769]],

       [[843, 768]],

       [[847, 764]],

       [[848, 764]],

       [[849, 763]]], dtype=int32), array([[[846, 770]],

       [[846, 773]]], dtype=int32), array([[[1129,  739]],

       [[1129,  787]],

       [[1132,  787]],

       [[1132,  739]]], dtype=int32), array([[[1121,  739]],

       [[1121,  787]],

       [[1124,  787]],

       [[1124,  739]]], dtype=int32), array([[[763, 717]],

       [[763, 778]],

       [[764, 778]],

       [[764, 717]]], dtype=int32), array([[[1130,  683]],

       [[1129,  684]],

       [[1129,  736]],

       [[1132,  736]],

       [[1132,  683]]], dtype=int32), array([[[1121,  683]],

       [[1121,  736]],

       [[1124,  736]],

       [[1124,  730]],

       [[1125,  729]],

       [[1125,  719]],

       [[1124,  718]],

       [[1124,  715]],

       [[1125,  714]],

       [[1125,  705]],

       [[1124,  704]],

       [[1124,  702]],

       [[1125,  701]],

       [[1125,  692]],

       [[1124,  691]],

       [[1124,  684]],

       [[1122,  684]]], dtype=int32), array([[[ 785,  557]],

       [[ 785,  562]],

       [[ 843,  562]],

       [[ 844,  563]],

       [[ 844,  573]],

       [[ 843,  574]],

       [[ 843,  579]],

       [[ 842,  580]],

       [[ 842,  583]],

       [[ 843,  584]],

       [[ 844,  584]],

       [[ 845,  585]],

       [[ 845,  588]],

       [[ 844,  589]],

       [[ 843,  589]],

       [[ 842,  590]],

       [[ 842,  593]],

       [[ 843,  594]],

       [[ 843,  597]],

       [[ 844,  598]],

       [[ 844,  601]],

       [[ 846,  603]],

       [[ 845,  604]],

       [[ 831,  604]],

       [[ 830,  605]],

       [[ 829,  605]],

       [[ 829,  606]],

       [[ 821,  614]],

       [[ 820,  614]],

       [[ 819,  613]],

       [[ 825,  607]],

       [[ 825,  604]],

       [[ 823,  604]],

       [[ 822,  605]],

       [[ 821,  604]],

       [[ 821,  602]],

       [[ 822,  601]],

       [[ 823,  601]],

       [[ 823,  598]],

       [[ 824,  597]],

       [[ 824,  589]],

       [[ 823,  589]],

       [[ 822,  588]],

       [[ 822,  586]],

       [[ 821,  585]],

       [[ 823,  583]],

       [[ 830,  583]],

       [[ 831,  584]],

       [[ 831,  582]],

       [[ 833,  580]],

       [[ 834,  581]],

       [[ 834,  582]],

       [[ 835,  583]],

       [[ 837,  583]],

       [[ 838,  584]],

       [[ 840,  582]],

       [[ 840,  579]],

       [[ 841,  578]],

       [[ 841,  573]],

       [[ 842,  572]],

       [[ 842,  568]],

       [[ 784,  568]],

       [[ 783,  567]],

       [[ 783,  564]],

       [[ 782,  564]],

       [[ 782,  567]],

       [[ 781,  568]],

       [[ 781,  627]],

       [[ 782,  626]],

       [[ 785,  626]],

       [[ 786,  625]],

       [[ 793,  625]],

       [[ 794,  624]],

       [[ 795,  624]],

       [[ 795,  619]],

       [[ 794,  620]],

       [[ 792,  620]],

       [[ 791,  619]],

       [[ 791,  617]],

       [[ 792,  616]],

       [[ 795,  616]],

       [[ 796,  615]],

       [[ 798,  615]],

       [[ 799,  616]],

       [[ 799,  623]],

       [[ 800,  623]],

       [[ 801,  622]],

       [[ 803,  622]],

       [[ 804,  621]],

       [[ 805,  621]],

       [[ 805,  617]],

       [[ 806,  616]],

       [[ 809,  616]],

       [[ 810,  615]],

       [[ 812,  615]],

       [[ 813,  616]],

       [[ 813,  617]],

       [[ 815,  615]],

       [[ 816,  615]],

       [[ 818,  613]],

       [[ 819,  613]],

       [[ 820,  614]],

       [[ 817,  617]],

       [[ 816,  617]],

       [[ 814,  619]],

       [[ 813,  619]],

       [[ 813,  632]],

       [[ 816,  632]],

       [[ 817,  633]],

       [[ 817,  634]],

       [[ 816,  635]],

       [[ 806,  635]],

       [[ 805,  634]],

       [[ 805,  633]],

       [[ 806,  632]],

       [[ 809,  632]],

       [[ 809,  621]],

       [[ 808,  622]],

       [[ 807,  622]],

       [[ 806,  623]],

       [[ 805,  623]],

       [[ 804,  624]],

       [[ 802,  624]],

       [[ 801,  625]],

       [[ 799,  625]],

       [[ 799,  632]],

       [[ 802,  632]],

       [[ 803,  633]],

       [[ 803,  634]],

       [[ 802,  635]],

       [[ 792,  635]],

       [[ 791,  634]],

       [[ 791,  633]],

       [[ 792,  632]],

       [[ 794,  632]],

       [[ 795,  631]],

       [[ 795,  627]],

       [[ 789,  627]],

       [[ 788,  628]],

       [[ 785,  628]],

       [[ 785,  788]],

       [[ 830,  788]],

       [[ 830,  785]],

       [[ 829,  784]],

       [[ 829,  759]],

       [[ 832,  756]],

       [[ 832,  755]],

       [[ 833,  754]],

       [[ 834,  754]],

       [[ 835,  753]],

       [[ 846,  753]],

       [[ 847,  752]],

       [[ 862,  752]],

       [[ 863,  753]],

       [[ 864,  752]],

       [[ 865,  753]],

       [[ 866,  753]],

       [[ 867,  752]],

       [[ 868,  752]],

       [[ 868,  749]],

       [[ 869,  748]],

       [[ 870,  749]],

       [[ 870,  753]],

       [[ 871,  754]],

       [[ 871,  758]],

       [[ 872,  758]],

       [[ 873,  759]],

       [[ 874,  759]],

       [[ 875,  760]],

       [[ 878,  760]],

       [[ 879,  761]],

       [[ 878,  762]],

       [[ 878,  764]],

       [[ 877,  765]],

       [[ 877,  769]],

       [[ 878,  770]],

       [[ 878,  780]],

       [[ 879,  780]],

       [[ 879,  773]],

       [[ 882,  770]],

       [[ 883,  770]],

       [[ 884,  771]],

       [[ 884,  779]],

       [[ 885,  780]],

       [[ 886,  779]],

       [[ 898,  779]],

       [[ 899,  778]],

       [[ 928,  778]],

       [[ 929,  779]],

       [[ 937,  779]],

       [[ 937,  776]],

       [[ 936,  775]],

       [[ 936,  774]],

       [[ 935,  773]],

       [[ 934,  773]],

       [[ 933,  772]],

       [[ 930,  772]],

       [[ 929,  771]],

       [[ 926,  771]],

       [[ 925,  770]],

       [[ 926,  769]],

       [[ 937,  769]],

       [[ 938,  768]],

       [[ 944,  768]],

       [[ 945,  769]],

       [[ 951,  769]],

       [[ 952,  768]],

       [[ 955,  768]],

       [[ 956,  769]],

       [[ 954,  771]],

       [[ 953,  771]],

       [[ 952,  772]],

       [[ 950,  772]],

       [[ 949,  773]],

       [[ 947,  773]],

       [[ 946,  774]],

       [[ 946,  779]],

       [[ 947,  780]],

       [[ 948,  779]],

       [[ 959,  779]],

       [[ 960,  778]],

       [[ 989,  778]],

       [[ 990,  779]],

       [[ 998,  779]],

       [[ 998,  771]],

       [[ 999,  770]],

       [[1001,  770]],

       [[1002,  771]],

       [[1003,  771]],

       [[1003,  761]],

       [[1004,  760]],

       [[1006,  760]],

       [[1007,  759]],

       [[1009,  759]],

       [[1009,  740]],

       [[ 949,  740]],

       [[ 949,  743]],

       [[ 948,  744]],

       [[ 948,  745]],

       [[ 947,  746]],

       [[ 946,  746]],

       [[ 945,  745]],

       [[ 946,  744]],

       [[ 946,  740]],

       [[ 929,  740]],

       [[ 929,  742]],

       [[ 928,  743]],

       [[ 927,  742]],

       [[ 927,  740]],

       [[ 871,  740]],

       [[ 871,  748]],

       [[ 870,  749]],

       [[ 869,  748]],

       [[ 869,  739]],

       [[ 871,  737]],

       [[ 871,  694]],

       [[ 870,  694]],

       [[ 869,  693]],

       [[ 869,  677]],

       [[ 870,  676]],

       [[ 871,  677]],

       [[ 871,  691]],

       [[ 872,  692]],

       [[1010,  692]],

       [[1010,  683]],

       [[1009,  682]],

       [[1009,  676]],

       [[1010,  675]],

       [[1010,  671]],

       [[1009,  670]],

       [[1009,  658]],

       [[1010,  657]],

       [[1010,  649]],

       [[1009,  649]],

       [[1008,  648]],

       [[ 872,  648]],

       [[ 871,  649]],

       [[ 871,  669]],

       [[ 870,  670]],

       [[ 869,  669]],

       [[ 869,  654]],

       [[ 868,  653]],

       [[ 868,  652]],

       [[ 869,  651]],

       [[ 869,  648]],

       [[ 870,  647]],

       [[ 870,  640]],

       [[ 869,  639]],

       [[ 869,  637]],

       [[ 870,  636]],

       [[ 870,  634]],

       [[ 872,  632]],

       [[ 872,  631]],

       [[ 874,  629]],

       [[ 875,  629]],

       [[ 876,  628]],

       [[ 911,  628]],

       [[ 912,  627]],

       [[ 913,  627]],

       [[ 914,  628]],

       [[ 915,  628]],

       [[ 916,  627]],

       [[ 918,  627]],

       [[ 919,  628]],

       [[ 920,  627]],

       [[ 921,  627]],

       [[ 922,  628]],

       [[1006,  628]],

       [[1007,  627]],

       [[1008,  627]],

       [[1009,  628]],

       [[1012,  628]],

       [[1015,  631]],

       [[1015,  637]],

       [[1014,  638]],

       [[1014,  644]],

       [[1015,  645]],

       [[1015,  651]],

       [[1014,  652]],

       [[1014,  679]],

       [[1015,  680]],

       [[1015,  688]],

       [[1013,  690]],

       [[1013,  694]],

       [[1012,  695]],

       [[1012,  733]],

       [[1013,  734]],

       [[1013,  738]],

       [[1014,  739]],

       [[1014,  750]],

       [[1015,  751]],

       [[1015,  752]],

       [[1017,  752]],

       [[1018,  753]],

       [[1019,  753]],

       [[1020,  752]],

       [[1039,  752]],

       [[1040,  753]],

       [[1052,  753]],

       [[1055,  756]],

       [[1055,  779]],

       [[1054,  780]],

       [[1054,  781]],

       [[1053,  782]],

       [[1053,  784]],

       [[1052,  785]],

       [[1052,  788]],

       [[1118,  788]],

       [[1118,  683]],

       [[1046,  683]],

       [[1044,  681]],

       [[1044,  557]]], dtype=int32), array([[[922, 769]],

       [[923, 768]],

       [[925, 768]],

       [[926, 769]],

       [[925, 770]],

       [[923, 770]]], dtype=int32), array([[[990, 762]],

       [[991, 763]],

       [[991, 764]],

       [[990, 765]],

       [[990, 767]],

       [[989, 768]],

       [[987, 768]],

       [[986, 767]],

       [[987, 766]],

       [[987, 765]]], dtype=int32), array([[[990, 760]],

       [[991, 759]],

       [[992, 759]],

       [[993, 760]],

       [[993, 761]],

       [[991, 763]],

       [[990, 762]]], dtype=int32), array([[[884, 758]],

       [[885, 759]],

       [[885, 760]],

       [[887, 762]],

       [[887, 763]],

       [[889, 765]],

       [[889, 766]],

       [[890, 767]],

       [[890, 768]],

       [[889, 769]],

       [[887, 769]],

       [[886, 768]],

       [[886, 767]],

       [[885, 766]],

       [[885, 765]],

       [[884, 764]],

       [[884, 762]],

       [[883, 762]],

       [[882, 761]],

       [[882, 760]]], dtype=int32), array([[[929, 746]],

       [[930, 745]],

       [[934, 749]],

       [[934, 751]],

       [[931, 754]],

       [[930, 754]],

       [[930, 757]],

       [[942, 757]],

       [[943, 756]],

       [[943, 753]],

       [[942, 752]],

       [[942, 749]],

       [[945, 746]],

       [[946, 747]],

       [[946, 750]],

       [[947, 750]],

       [[948, 751]],

       [[951, 751]],

       [[952, 752]],

       [[953, 752]],

       [[954, 753]],

       [[955, 753]],

       [[956, 754]],

       [[957, 754]],

       [[958, 755]],

       [[959, 755]],

       [[960, 756]],

       [[962, 756]],

       [[963, 757]],

       [[963, 758]],

       [[964, 758]],

       [[965, 759]],

       [[967, 759]],

       [[968, 760]],

       [[969, 760]],

       [[971, 762]],

       [[972, 762]],

       [[973, 763]],

       [[974, 763]],

       [[975, 764]],

       [[977, 764]],

       [[979, 766]],

       [[979, 767]],

       [[978, 768]],

       [[977, 768]],

       [[976, 767]],

       [[973, 767]],

       [[970, 764]],

       [[969, 764]],

       [[968, 763]],

       [[967, 763]],

       [[966, 762]],

       [[959, 762]],

       [[958, 761]],

       [[958, 760]],

       [[958, 766]],

       [[959, 767]],

       [[957, 769]],

       [[956, 769]],

       [[955, 768]],

       [[956, 767]],

       [[956, 763]],

       [[955, 762]],

       [[954, 762]],

       [[953, 761]],

       [[952, 761]],

       [[951, 760]],

       [[947, 760]],

       [[946, 759]],

       [[928, 759]],

       [[927, 760]],

       [[925, 760]],

       [[924, 761]],

       [[923, 761]],

       [[921, 763]],

       [[919, 761]],

       [[919, 759]],

       [[917, 759]],

       [[916, 760]],

       [[915, 760]],

       [[913, 762]],

       [[908, 762]],

       [[907, 763]],

       [[906, 763]],

       [[905, 764]],

       [[904, 764]],

       [[903, 765]],

       [[902, 765]],

       [[900, 767]],

       [[899, 767]],

       [[898, 768]],

       [[892, 768]],

       [[891, 767]],

       [[892, 766]],

       [[893, 766]],

       [[894, 765]],

       [[897, 765]],

       [[898, 764]],

       [[899, 764]],

       [[900, 763]],

       [[901, 763]],

       [[902, 762]],

       [[904, 762]],

       [[905, 761]],

       [[906, 761]],

       [[907, 760]],

       [[908, 760]],

       [[909, 759]],

       [[910, 759]],

       [[911, 758]],

       [[912, 758]],

       [[913, 757]],

       [[915, 757]],

       [[915, 756]],

       [[916, 755]],

       [[918, 755]],

       [[920, 753]],

       [[921, 753]],

       [[922, 752]],

       [[924, 752]],

       [[925, 751]],

       [[926, 751]],

       [[928, 749]],

       [[929, 750]]], dtype=int32), array([[[928, 744]],

       [[929, 743]],

       [[930, 744]],

       [[929, 745]]], dtype=int32), array([[[868, 674]],

       [[869, 673]],

       [[870, 674]],

       [[870, 675]],

       [[869, 676]],

       [[868, 675]]], dtype=int32), array([[[927, 658]],

       [[928, 657]],

       [[954, 657]],

       [[956, 659]],

       [[956, 684]],

       [[954, 686]],

       [[928, 686]],

       [[927, 685]],

       [[927, 684]],

       [[926, 683]],

       [[926, 661]],

       [[927, 660]]], dtype=int32), array([[[949, 676]],

       [[949, 680]],

       [[950, 680]],

       [[950, 676]]], dtype=int32), array([[[944, 661]],

       [[944, 662]],

       [[943, 663]],

       [[941, 663]],

       [[940, 664]],

       [[940, 667]],

       [[941, 668]],

       [[941, 669]],

       [[942, 670]],

       [[943, 670]],

       [[944, 671]],

       [[947, 671]],

       [[948, 670]],

       [[950, 670]],

       [[950, 669]],

       [[951, 668]],

       [[951, 665]],

       [[950, 664]],

       [[950, 662]],

       [[947, 662]],

       [[946, 661]]], dtype=int32), array([[[819, 632]],

       [[820, 631]],

       [[822, 631]],

       [[823, 632]],

       [[823, 634]],

       [[822, 635]],

       [[820, 635]],

       [[819, 634]]], dtype=int32), array([[[845, 620]],

       [[847, 620]],

       [[848, 621]],

       [[849, 621]],

       [[850, 622]],

       [[851, 622]],

       [[853, 620]],

       [[856, 620]],

       [[859, 623]],

       [[859, 625]],

       [[860, 626]],

       [[860, 634]],

       [[859, 635]],

       [[857, 635]],

       [[856, 634]],

       [[856, 625]],

       [[855, 624]],

       [[852, 624]],

       [[852, 625]],

       [[851, 626]],

       [[851, 634]],

       [[850, 635]],

       [[849, 635]],

       [[848, 634]],

       [[848, 626]],

       [[847, 625]],

       [[847, 624]],

       [[844, 624]],

       [[843, 625]],

       [[843, 634]],

       [[842, 635]],

       [[840, 635]],

       [[839, 634]],

       [[839, 622]],

       [[840, 621]],

       [[842, 621]],

       [[843, 622]]], dtype=int32), array([[[864, 615]],

       [[867, 615]],

       [[870, 618]],

       [[870, 619]],

       [[869, 620]],

       [[869, 621]],

       [[868, 622]],

       [[868, 625]],

       [[869, 625]],

       [[870, 626]],

       [[868, 628]],

       [[863, 628]],

       [[861, 626]],

       [[865, 622]],

       [[865, 618]],

       [[864, 618]],

       [[863, 619]],

       [[862, 618]],

       [[862, 617]]], dtype=int32), array([[[827, 616]],

       [[828, 615]],

       [[833, 615]],

       [[837, 619]],

       [[837, 622]],

       [[836, 623]],

       [[836, 624]],

       [[834, 626]],

       [[834, 627]],

       [[832, 629]],

       [[832, 632]],

       [[836, 632]],

       [[837, 633]],

       [[837, 634]],

       [[836, 635]],

       [[825, 635]],

       [[824, 634]],

       [[824, 632]],

       [[832, 624]],

       [[832, 623]],

       [[833, 622]],

       [[833, 619]],

       [[832, 619]],

       [[831, 618]],

       [[829, 618]],

       [[828, 619]],

       [[827, 619]],

       [[826, 620]],

       [[825, 619]],

       [[825, 617]],

       [[826, 616]]], dtype=int32), array([[[852, 583]],

       [[853, 582]],

       [[855, 582]],

       [[857, 584]],

       [[857, 586]],

       [[858, 587]],

       [[858, 589]],

       [[859, 590]],

       [[859, 591]],

       [[860, 592]],

       [[860, 594]],

       [[861, 595]],

       [[861, 597]],

       [[862, 598]],

       [[862, 599]],

       [[863, 600]],

       [[863, 601]],

       [[862, 602]],

       [[860, 602]],

       [[859, 601]],

       [[859, 600]],

       [[858, 599]],

       [[858, 598]],

       [[857, 597]],

       [[851, 597]],

       [[850, 598]],

       [[850, 600]],

       [[848, 602]],

       [[846, 602]],

       [[845, 601]],

       [[846, 600]],

       [[846, 598]],

       [[847, 597]],

       [[847, 596]],

       [[848, 595]],

       [[848, 593]],

       [[849, 592]],

       [[849, 590]],

       [[850, 589]],

       [[850, 588]],

       [[851, 587]],

       [[851, 585]],

       [[852, 584]]], dtype=int32), array([[[854, 587]],

       [[854, 589]],

       [[853, 590]],

       [[853, 594]],

       [[855, 594]],

       [[855, 589]],

       [[854, 588]]], dtype=int32), array([[[797, 583]],

       [[798, 582]],

       [[810, 582]],

       [[811, 583]],

       [[809, 585]],

       [[806, 585]],

       [[806, 588]],

       [[809, 588]],

       [[810, 589]],

       [[810, 597]],

       [[809, 598]],

       [[808, 598]],

       [[807, 597]],

       [[806, 598]],

       [[806, 601]],

       [[809, 601]],

       [[811, 603]],

       [[809, 605]],

       [[799, 605]],

       [[797, 603]]], dtype=int32), array([[[800, 598]],

       [[800, 601]],

       [[803, 601]],

       [[803, 598]]], dtype=int32), array([[[801, 591]],

       [[801, 594]],

       [[807, 594]],

       [[807, 591]]], dtype=int32), array([[[801, 585]],

       [[801, 588]],

       [[803, 588]],

       [[803, 585]]], dtype=int32), array([[[811, 582]],

       [[812, 581]],

       [[814, 581]],

       [[815, 582]],

       [[815, 588]],

       [[816, 589]],

       [[817, 589]],

       [[819, 591]],

       [[819, 592]],

       [[820, 592]],

       [[821, 593]],

       [[821, 594]],

       [[819, 596]],

       [[815, 592]],

       [[815, 604]],

       [[814, 605]],

       [[812, 605]],

       [[811, 604]]], dtype=int32), array([[[1063,  538]],

       [[1062,  539]],

       [[1062,  540]],

       [[1061,  541]],

       [[1061,  544]],

       [[1073,  544]],

       [[1073,  539]],

       [[1064,  539]]], dtype=int32), array([[[883, 538]],

       [[883, 541]],

       [[884, 541]],

       [[884, 538]]], dtype=int32), array([[[838, 538]],

       [[838, 541]],

       [[839, 541]],

       [[839, 538]]], dtype=int32), array([[[880, 537]],

       [[880, 540]],

       [[881, 540]],

       [[881, 537]]], dtype=int32), array([[[842, 537]],

       [[842, 540]],

       [[843, 540]],

       [[843, 537]]], dtype=int32), array([[[876, 536]],

       [[876, 539]],

       [[877, 539]],

       [[877, 536]]], dtype=int32), array([[[846, 536]],

       [[846, 539]]], dtype=int32), array([[[875, 528]],

       [[875, 531]],

       [[876, 531]],

       [[876, 528]]], dtype=int32), array([[[847, 528]],

       [[847, 531]]], dtype=int32), array([[[879, 527]],

       [[879, 530]]], dtype=int32), array([[[843, 527]],

       [[843, 530]],

       [[844, 530]],

       [[844, 527]]], dtype=int32), array([[[934, 526]],

       [[934, 530]],

       [[936, 530]],

       [[936, 526]]], dtype=int32), array([[[883, 526]],

       [[883, 529]],

       [[884, 529]],

       [[884, 526]]], dtype=int32), array([[[839, 526]],

       [[839, 529]],

       [[840, 529]],

       [[840, 526]]], dtype=int32), array([[[987, 524]],

       [[987, 527]],

       [[994, 527]],

       [[994, 524]]], dtype=int32), array([[[1078,  523]],

       [[1078,  527]],

       [[1079,  527]],

       [[1080,  528]],

       [[1080,  525]]], dtype=int32), array([[[1083,  511]],

       [[1082,  512]],

       [[1080,  512]],

       [[1080,  515]],

       [[1082,  515]],

       [[1083,  514]],

       [[1084,  514]],

       [[1084,  511]]], dtype=int32), array([[[1053,  506]],

       [[1053,  509]]], dtype=int32), array([[[1049,  503]],

       [[1049,  507]],

       [[1051,  509]],

       [[1051,  510]],

       [[1051,  505]],

       [[1050,  505]],

       [[1049,  504]]], dtype=int32), array([[[800, 301]],

       [[799, 302]],

       [[799, 358]],

       [[800, 359]],

       [[810, 359]],

       [[810, 354]],

       [[811, 353]],

       [[815, 353]],

       [[816, 354]],

       [[816, 356]],

       [[815, 357]],

       [[815, 361]],

       [[817, 361]],

       [[818, 362]],

       [[835, 362]],

       [[836, 361]],

       [[837, 361]],

       [[838, 362]],

       [[863, 362]],

       [[864, 361]],

       [[866, 361]],

       [[868, 359]],

       [[870, 361]],

       [[922, 361]],

       [[923, 360]],

       [[923, 359]],

       [[924, 358]],

       [[925, 359]],

       [[934, 359]],

       [[935, 358]],

       [[935, 301]]], dtype=int32), array([[[833, 342]],

       [[834, 341]],

       [[835, 342]],

       [[834, 343]]], dtype=int32), array([[[828, 323]],

       [[829, 322]],

       [[830, 322]],

       [[831, 323]],

       [[832, 323]],

       [[833, 324]],

       [[839, 324]],

       [[840, 325]],

       [[840, 326]],

       [[839, 327]],

       [[839, 332]],

       [[838, 333]],

       [[838, 335]],

       [[837, 336]],

       [[837, 338]],

       [[835, 340]],

       [[834, 339]],

       [[834, 330]],

       [[833, 329]],

       [[833, 328]],

       [[832, 327]],

       [[832, 326]],

       [[831, 326]]], dtype=int32), array([[[826, 322]],

       [[827, 321]],

       [[828, 321]],

       [[829, 322]],

       [[828, 323]],

       [[827, 323]]], dtype=int32), array([[[825, 321]],

       [[826, 320]],

       [[827, 321]],

       [[826, 322]]], dtype=int32), array([[[876, 320]],

       [[877, 319]],

       [[878, 319]],

       [[879, 320]],

       [[878, 321]],

       [[877, 321]]], dtype=int32), array([[[854, 320]],

       [[855, 319]],

       [[857, 319]],

       [[858, 320]],

       [[859, 320]],

       [[860, 321]],

       [[859, 322]],

       [[855, 322]],

       [[854, 321]]], dtype=int32), array([[[921, 310]],

       [[922, 309]],

       [[924, 309]],

       [[925, 310]],

       [[925, 324]],

       [[924, 325]],

       [[923, 325]],

       [[922, 326]],

       [[922, 348]],

       [[923, 349]],

       [[923, 351]],

       [[924, 351]],

       [[925, 352]],

       [[924, 353]],

       [[924, 356]],

       [[923, 357]],

       [[922, 356]],

       [[922, 355]],

       [[919, 352]],

       [[919, 326]],

       [[915, 326]],

       [[914, 327]],

       [[910, 327]],

       [[909, 328]],

       [[907, 328]],

       [[907, 329]],

       [[906, 330]],

       [[905, 330]],

       [[905, 332]],

       [[904, 333]],

       [[904, 336]],

       [[903, 337]],

       [[902, 337]],

       [[901, 336]],

       [[901, 327]],

       [[902, 326]],

       [[902, 323]],

       [[903, 322]],

       [[904, 322]],

       [[905, 321]],

       [[909, 321]],

       [[910, 320]],

       [[913, 320]],

       [[914, 319]],

       [[917, 319]],

       [[918, 318]],

       [[919, 318]],

       [[920, 317]],

       [[920, 314]],

       [[921, 313]]], dtype=int32), array([[[871, 310]],

       [[872, 309]],

       [[881, 309]],

       [[882, 310]],

       [[882, 311]],

       [[881, 312]],

       [[879, 312]],

       [[878, 311]],

       [[872, 311]]], dtype=int32), array([[[869, 310]],

       [[870, 309]],

       [[871, 310]],

       [[870, 311]]], dtype=int32), array([[[867, 310]],

       [[868, 309]],

       [[869, 310]],

       [[868, 311]]], dtype=int32), array([[[843, 310]],

       [[844, 309]],

       [[855, 309]],

       [[856, 310]],

       [[855, 311]],

       [[853, 311]],

       [[852, 312]],

       [[852, 317]],

       [[853, 318]],

       [[853, 322]],

       [[854, 323]],

       [[854, 326]],

       [[856, 328]],

       [[863, 328]],

       [[864, 329]],

       [[865, 329]],

       [[866, 328]],

       [[874, 328]],

       [[875, 329]],

       [[877, 329]],

       [[878, 330]],

       [[878, 326]],

       [[879, 325]],

       [[879, 322]],

       [[880, 321]],

       [[881, 321]],

       [[882, 320]],

       [[882, 319]],

       [[883, 318]],

       [[884, 319]],

       [[885, 319]],

       [[886, 320]],

       [[886, 321]],

       [[885, 322]],

       [[883, 322]],

       [[882, 323]],

       [[882, 325]],

       [[881, 326]],

       [[881, 331]],

       [[877, 335]],

       [[877, 336]],

       [[873, 340]],

       [[871, 340]],

       [[869, 342]],

       [[869, 348]],

       [[868, 349]],

       [[867, 348]],

       [[867, 345]],

       [[866, 344]],

       [[866, 341]],

       [[859, 341]],

       [[858, 340]],

       [[856, 340]],

       [[853, 337]],

       [[853, 336]],

       [[852, 335]],

       [[852, 329]],

       [[851, 328]],

       [[851, 326]],

       [[849, 326]],

       [[847, 324]],

       [[845, 324]],

       [[844, 323]],

       [[845, 322]],

       [[846, 322]],

       [[848, 320]],

       [[848, 317]],

       [[849, 316]],

       [[849, 313]],

       [[848, 312]],

       [[847, 312]],

       [[846, 311]],

       [[844, 311]]], dtype=int32), array([[[810, 310]],

       [[811, 309]],

       [[821, 309]],

       [[822, 310]],

       [[820, 312]],

       [[820, 319]],

       [[821, 320]],

       [[823, 320]],

       [[824, 321]],

       [[823, 322]],

       [[823, 324]],

       [[822, 325]],

       [[822, 328]],

       [[821, 329]],

       [[821, 332]],

       [[820, 333]],

       [[820, 335]],

       [[819, 336]],

       [[819, 340]],

       [[818, 341]],

       [[818, 347]],

       [[819, 347]],

       [[820, 346]],

       [[821, 346]],

       [[822, 347]],

       [[824, 347]],

       [[826, 349]],

       [[824, 351]],

       [[822, 351]],

       [[820, 349]],

       [[817, 349]],

       [[815, 347]],

       [[815, 346]],

       [[814, 345]],

       [[814, 343]],

       [[815, 342]],

       [[815, 329]],

       [[814, 328]],

       [[813, 328]],

       [[812, 327]],

       [[810, 327]],

       [[809, 326]],

       [[809, 325]],

       [[810, 324]]], dtype=int32), array([[[535, 292]],

       [[535, 295]],

       [[533, 297]],

       [[497, 297]],

       [[497, 447]],

       [[501, 447]],

       [[501, 445]],

       [[502, 444]],

       [[503, 445]],

       [[503, 451]],

       [[504, 451]],

       [[504, 390]],

       [[503, 390]],

       [[503, 393]],

       [[502, 394]],

       [[501, 393]],

       [[501, 389]],

       [[502, 388]],

       [[509, 388]],

       [[510, 389]],

       [[509, 390]],

       [[506, 390]],

       [[506, 451]],

       [[564, 451]],

       [[564, 444]],

       [[565, 443]],

       [[566, 444]],

       [[566, 448]],

       [[567, 448]],

       [[568, 447]],

       [[611, 447]],

       [[611, 346]],

       [[612, 345]],

       [[612, 317]],

       [[611, 316]],

       [[611, 295]],

       [[610, 294]],

       [[610, 292]],

       [[576, 292]],

       [[576, 294]],

       [[574, 296]],

       [[573, 295]],

       [[573, 292]]], dtype=int32), array([[[563, 437]],

       [[564, 436]],

       [[565, 437]],

       [[565, 440]],

       [[564, 441]],

       [[563, 440]]], dtype=int32), array([[[562, 434]],

       [[563, 433]],

       [[564, 434]],

       [[564, 436]],

       [[563, 437]],

       [[562, 436]]], dtype=int32), array([[[561, 431]],

       [[562, 430]],

       [[563, 431]],

       [[563, 432]],

       [[562, 433]],

       [[561, 432]]], dtype=int32), array([[[560, 428]],

       [[561, 427]],

       [[562, 428]],

       [[562, 429]],

       [[561, 430]],

       [[560, 429]]], dtype=int32), array([[[559, 426]],

       [[560, 425]],

       [[561, 426]],

       [[561, 427]],

       [[560, 428]],

       [[559, 427]]], dtype=int32), array([[[558, 424]],

       [[559, 423]],

       [[560, 424]],

       [[559, 425]]], dtype=int32), array([[[557, 422]],

       [[558, 421]],

       [[559, 422]],

       [[558, 423]]], dtype=int32), array([[[556, 420]],

       [[557, 419]],

       [[558, 420]],

       [[557, 421]]], dtype=int32), array([[[555, 418]],

       [[556, 417]],

       [[557, 418]],

       [[556, 419]]], dtype=int32), array([[[554, 417]],

       [[555, 416]],

       [[556, 417]],

       [[555, 418]]], dtype=int32), array([[[553, 415]],

       [[554, 414]],

       [[555, 415]],

       [[555, 416]],

       [[554, 417]],

       [[553, 416]]], dtype=int32), array([[[552, 414]],

       [[553, 413]],

       [[554, 414]],

       [[553, 415]]], dtype=int32), array([[[551, 413]],

       [[552, 412]],

       [[553, 413]],

       [[552, 414]]], dtype=int32), array([[[527, 413]],

       [[528, 412]],

       [[530, 412]],

       [[531, 413]],

       [[531, 415]],

       [[530, 416]],

       [[529, 416]],

       [[527, 414]]], dtype=int32), array([[[546, 407]],

       [[547, 406]],

       [[548, 407]],

       [[547, 408]]], dtype=int32), array([[[545, 406]],

       [[546, 405]],

       [[547, 406]],

       [[546, 407]]], dtype=int32), array([[[544, 405]],

       [[545, 404]],

       [[546, 405]],

       [[545, 406]]], dtype=int32), array([[[553, 401]],

       [[556, 401]],

       [[558, 403]],

       [[559, 403]],

       [[561, 401]],

       [[565, 401]],

       [[567, 403]],

       [[567, 404]],

       [[568, 405]],

       [[568, 414]],

       [[567, 415]],

       [[565, 415]],

       [[564, 414]],

       [[564, 405]],

       [[563, 404]],

       [[561, 404]],

       [[560, 405]],

       [[560, 407]],

       [[559, 408]],

       [[559, 414]],

       [[558, 415]],

       [[557, 415]],

       [[556, 414]],

       [[556, 405]],

       [[555, 404]],

       [[552, 404]],

       [[551, 403]]], dtype=int32), array([[[548, 402]],

       [[549, 401]],

       [[550, 401]],

       [[551, 402]],

       [[551, 403]],

       [[552, 404]],

       [[552, 405]],

       [[551, 406]],

       [[551, 410]],

       [[552, 411]],

       [[552, 412]],

       [[551, 413]],

       [[551, 414]],

       [[550, 415]],

       [[549, 415]],

       [[548, 414]],

       [[548, 409]],

       [[547, 408]],

       [[548, 407]]], dtype=int32), array([[[501, 398]],

       [[502, 397]],

       [[503, 398]],

       [[502, 399]]], dtype=int32), array([[[572, 396]],

       [[576, 396]],

       [[578, 398]],

       [[578, 400]],

       [[577, 401]],

       [[577, 405]],

       [[578, 406]],

       [[578, 407]],

       [[577, 408]],

       [[571, 408]],

       [[570, 407]],

       [[570, 406]],

       [[574, 402]],

       [[574, 398]],

       [[573, 398]],

       [[572, 399]],

       [[571, 399]],

       [[570, 398]]], dtype=int32), array([[[533, 397]],

       [[534, 396]],

       [[542, 396]],

       [[545, 399]],

       [[545, 404]],

       [[540, 409]],

       [[540, 412]],

       [[544, 412]],

       [[545, 413]],

       [[545, 414]],

       [[544, 415]],

       [[540, 415]],

       [[539, 416]],

       [[538, 415]],

       [[533, 415]],

       [[532, 414]],

       [[533, 413]],

       [[533, 412]],

       [[540, 405]],

       [[540, 402]],

       [[539, 401]],

       [[538, 401]],

       [[536, 399]],

       [[535, 400]],

       [[534, 400]],

       [[533, 399]]], dtype=int32), array([[[514, 397]],

       [[515, 396]],

       [[521, 396]],

       [[522, 397]],

       [[523, 397]],

       [[524, 398]],

       [[524, 407]],

       [[525, 408]],

       [[525, 412]],

       [[522, 415]],

       [[521, 415]],

       [[520, 416]],

       [[516, 416]],

       [[515, 415]],

       [[514, 415]],

       [[513, 414]],

       [[513, 413]],

       [[514, 412]],

       [[515, 412]],

       [[516, 413]],

       [[519, 413]],

       [[520, 412]],

       [[521, 412]],

       [[521, 408]],

       [[520, 407]],

       [[516, 407]],

       [[515, 406]],

       [[515, 405]],

       [[516, 404]],

       [[519, 404]],

       [[520, 403]],

       [[520, 399]],

       [[515, 399]],

       [[514, 398]]], dtype=int32), array([[[531, 396]],

       [[532, 395]],

       [[533, 396]],

       [[532, 397]]], dtype=int32), array([[[529, 395]],

       [[530, 394]],

       [[531, 395]],

       [[530, 396]]], dtype=int32), array([[[526, 394]],

       [[527, 393]],

       [[528, 393]],

       [[529, 394]],

       [[528, 395]],

       [[527, 395]]], dtype=int32), array([[[524, 393]],

       [[525, 392]],

       [[526, 392]],

       [[527, 393]],

       [[526, 394]],

       [[525, 394]]], dtype=int32), array([[[521, 392]],

       [[522, 391]],

       [[523, 391]],

       [[524, 392]],

       [[523, 393]],

       [[522, 393]]], dtype=int32), array([[[517, 391]],

       [[518, 390]],

       [[520, 390]],

       [[521, 391]],

       [[520, 392]],

       [[518, 392]]], dtype=int32), array([[[512, 390]],

       [[513, 389]],

       [[516, 389]],

       [[517, 390]],

       [[516, 391]],

       [[513, 391]]], dtype=int32), array([[[559, 367]],

       [[560, 366]],

       [[562, 368]],

       [[562, 384]],

       [[560, 386]],

       [[559, 385]]], dtype=int32), array([[[566, 364]],

       [[567, 363]],

       [[580, 363]],

       [[581, 364]],

       [[581, 384]],

       [[580, 385]],

       [[579, 385]],

       [[578, 386]],

       [[575, 386]],

       [[573, 384]],

       [[574, 383]],

       [[577, 383]],

       [[578, 382]],

       [[578, 365]],

       [[575, 365]],

       [[575, 379]],

       [[574, 380]],

       [[567, 380]],

       [[567, 381]],

       [[566, 382]],

       [[565, 382]],

       [[564, 381]],

       [[564, 369]],

       [[566, 367]]], dtype=int32), array([[[567, 375]],

       [[567, 378]],

       [[572, 378]],

       [[572, 375]]], dtype=int32), array([[[510, 364]],

       [[511, 363]],

       [[530, 363]],

       [[531, 364]],

       [[531, 366]],

       [[530, 367]],

       [[530, 374]],

       [[529, 375]],

       [[529, 376]],

       [[528, 377]],

       [[522, 377]],

       [[521, 376]],

       [[521, 375]],

       [[522, 374]],

       [[526, 374]],

       [[527, 373]],

       [[527, 366]],

       [[520, 366]],

       [[520, 381]],

       [[531, 381]],

       [[533, 383]],

       [[532, 384]],

       [[509, 384]],

       [[508, 383]],

       [[510, 381]],

       [[516, 381]],

       [[516, 366]],

       [[511, 366]],

       [[510, 365]]], dtype=int32), array([[[562, 361]],

       [[565, 364]],

       [[565, 365]],

       [[564, 366]],

       [[563, 366]],

       [[560, 363]]], dtype=int32), array([[[544, 362]],

       [[545, 361]],

       [[546, 361]],

       [[547, 362]],

       [[547, 366]],

       [[555, 366]],

       [[556, 367]],

       [[556, 368]],

       [[555, 369]],

       [[547, 369]],

       [[547, 373]],

       [[554, 373]],

       [[556, 375]],

       [[555, 376]],

       [[547, 376]],

       [[547, 381]],

       [[556, 381]],

       [[558, 383]],

       [[557, 384]],

       [[534, 384]],

       [[533, 383]],

       [[533, 382]],

       [[534, 381]],

       [[544, 381]],

       [[544, 376]],

       [[537, 376]],

       [[536, 375]],

       [[536, 372]],

       [[535, 373]],

       [[534, 373]],

       [[533, 372]],

       [[533, 371]],

       [[536, 368]],

       [[536, 367]],

       [[537, 366]],

       [[537, 365]],

       [[538, 364]],

       [[538, 363]],

       [[539, 362]],

       [[541, 364]],

       [[541, 366]],

       [[544, 366]]], dtype=int32), array([[[538, 369]],

       [[538, 373]],

       [[544, 373]],

       [[544, 369]]], dtype=int32), array([[[598, 314]],

       [[599, 313]],

       [[605, 313]],

       [[606, 314]],

       [[607, 314]],

       [[608, 315]],

       [[607, 316]],

       [[561, 316]],

       [[560, 317]],

       [[560, 318]],

       [[559, 319]],

       [[559, 327]],

       [[558, 328]],

       [[558, 333]],

       [[559, 334]],

       [[559, 342]],

       [[558, 343]],

       [[556, 341]],

       [[556, 340]],

       [[555, 339]],

       [[555, 320]],

       [[556, 319]],

       [[556, 316]],

       [[558, 314]]], dtype=int32), array([[[ 999,   50]],

       [[1000,   49]],

       [[1001,   50]],

       [[1000,   51]]], dtype=int32), array([[[980,  50]],

       [[981,  49]],

       [[982,  50]],

       [[981,  51]]], dtype=int32), array([[[631,  50]],

       [[632,  49]],

       [[633,  50]],

       [[632,  51]]], dtype=int32), array([[[480,  50]],

       [[481,  49]],

       [[482,  50]],

       [[481,  51]]], dtype=int32), array([[[1100,   49]],

       [[1101,   48]],

       [[1102,   48]],

       [[1103,   49]],

       [[1101,   51]],

       [[1100,   50]]], dtype=int32), array([[[ 998,   49]],

       [[ 999,   48]],

       [[1000,   49]],

       [[ 999,   50]]], dtype=int32), array([[[630,  49]],

       [[631,  48]],

       [[632,  49]],

       [[631,  50]]], dtype=int32), array([[[497,  49]],

       [[498,  48]],

       [[499,  48]],

       [[500,  49]],

       [[499,  50]],

       [[498,  50]]], dtype=int32), array([[[481,  49]],

       [[482,  48]],

       [[483,  49]],

       [[482,  50]]], dtype=int32), array([[[361,  49]],

       [[362,  48]],

       [[363,  48]],

       [[364,  49]],

       [[364,  50]],

       [[363,  51]]], dtype=int32), array([[[996,  48]],

       [[997,  47]],

       [[998,  47]],

       [[999,  48]],

       [[998,  49]],

       [[997,  49]]], dtype=int32), array([[[983,  47]],

       [[984,  47]],

       [[985,  48]],

       [[983,  50]],

       [[982,  50]],

       [[981,  49]]], dtype=int32), array([[[628,  48]],

       [[629,  47]],

       [[630,  47]],

       [[631,  48]],

       [[630,  49]],

       [[629,  49]]], dtype=int32), array([[[615,  47]],

       [[616,  47]],

       [[617,  48]],

       [[615,  50]],

       [[614,  50]],

       [[613,  49]]], dtype=int32), array([[[496,  48]],

       [[497,  47]],

       [[498,  48]],

       [[497,  49]]], dtype=int32), array([[[482,  48]],

       [[483,  47]],

       [[484,  47]],

       [[485,  48]],

       [[484,  49]],

       [[483,  49]]], dtype=int32), array([[[587,  43]],

       [[588,  42]],

       [[613,  42]],

       [[614,  43]],

       [[613,  44]],

       [[588,  44]]], dtype=int32), array([[[1109,   38]],

       [[1110,   37]],

       [[1111,   38]],

       [[1111,   49]],

       [[1110,   50]],

       [[1109,   49]],

       [[1109,   45]],

       [[1107,   47]],

       [[1106,   47]],

       [[1104,   49]],

       [[1103,   49]],

       [[1102,   48]],

       [[1103,   47]],

       [[1103,   44]],

       [[1082,   44]],

       [[1081,   43]],

       [[1082,   42]],

       [[1102,   42]],

       [[1102,   39]],

       [[1103,   38]],

       [[1104,   38]],

       [[1106,   40]],

       [[1107,   40]],

       [[1109,   42]]], dtype=int32), array([[[1101,   38]],

       [[1102,   37]],

       [[1103,   38]],

       [[1102,   39]]], dtype=int32), array([[[ 981,   38]],

       [[ 982,   37]],

       [[ 983,   37]],

       [[ 985,   39]],

       [[ 986,   39]],

       [[ 988,   41]],

       [[ 989,   41]],

       [[ 989,   38]],

       [[ 990,   37]],

       [[ 991,   37]],

       [[ 992,   38]],

       [[ 992,   41]],

       [[ 993,   41]],

       [[ 995,   39]],

       [[ 996,   39]],

       [[ 998,   37]],

       [[ 999,   37]],

       [[1000,   38]],

       [[ 999,   39]],

       [[ 999,   42]],

       [[1019,   42]],

       [[1020,   43]],

       [[1019,   44]],

       [[ 997,   44]],

       [[ 997,   47]],

       [[ 996,   48]],

       [[ 995,   47]],

       [[ 994,   47]],

       [[ 993,   46]],

       [[ 992,   46]],

       [[ 992,   49]],

       [[ 991,   50]],

       [[ 990,   50]],

       [[ 989,   49]],

       [[ 989,   46]],

       [[ 988,   46]],

       [[ 986,   48]],

       [[ 985,   48]],

       [[ 984,   47]],

       [[ 984,   44]],

       [[ 838,   44]],

       [[ 837,   43]],

       [[ 838,   42]],

       [[ 982,   42]],

       [[ 982,   39]]], dtype=int32), array([[[497,  38]],

       [[498,  37]],

       [[499,  37]],

       [[500,  38]],

       [[499,  39]],

       [[498,  39]]], dtype=int32), array([[[481,  38]],

       [[482,  37]],

       [[483,  38]],

       [[482,  39]]], dtype=int32), array([[[361,  38]],

       [[362,  37]],

       [[363,  38]],

       [[362,  39]]], dtype=int32), array([[[353,  38]],

       [[354,  37]],

       [[355,  38]],

       [[355,  42]],

       [[357,  40]],

       [[358,  40]],

       [[360,  38]],

       [[361,  38]],

       [[362,  39]],

       [[362,  42]],

       [[391,  42]],

       [[392,  43]],

       [[391,  44]],

       [[361,  44]],

       [[361,  47]],

       [[362,  48]],

       [[361,  49]],

       [[360,  49]],

       [[358,  47]],

       [[357,  47]],

       [[355,  45]],

       [[355,  49]],

       [[354,  50]],

       [[353,  49]]], dtype=int32), array([[[1100,   37]],

       [[1101,   36]],

       [[1102,   37]],

       [[1101,   38]]], dtype=int32), array([[[ 999,   37]],

       [[1000,   36]],

       [[1001,   37]],

       [[1000,   38]]], dtype=int32), array([[[980,  37]],

       [[981,  36]],

       [[982,  37]],

       [[981,  38]]], dtype=int32), array([[[631,  37]],

       [[632,  36]],

       [[633,  37]],

       [[632,  38]]], dtype=int32), array([[[622,  37]],

       [[623,  36]],

       [[624,  37]],

       [[624,  41]],

       [[625,  41]],

       [[627,  39]],

       [[628,  39]],

       [[630,  37]],

       [[631,  37]],

       [[632,  38]],

       [[631,  39]],

       [[631,  42]],

       [[775,  42]],

       [[776,  43]],

       [[775,  44]],

       [[629,  44]],

       [[629,  47]],

       [[628,  48]],

       [[627,  47]],

       [[626,  47]],

       [[624,  45]],

       [[624,  49]],

       [[623,  50]],

       [[622,  50]],

       [[621,  49]],

       [[621,  46]],

       [[620,  46]],

       [[618,  48]],

       [[617,  48]],

       [[616,  47]],

       [[616,  44]],

       [[615,  44]],

       [[614,  43]],

       [[614,  39]],

       [[613,  38]],

       [[614,  37]],

       [[615,  37]],

       [[617,  39]],

       [[618,  39]],

       [[620,  41]],

       [[621,  41]],

       [[621,  39]],

       [[622,  38]]], dtype=int32), array([[[612,  37]],

       [[613,  36]],

       [[614,  37]],

       [[613,  38]]], dtype=int32), array([[[499,  37]],

       [[500,  36]],

       [[501,  37]],

       [[500,  38]]], dtype=int32), array([[[489,  37]],

       [[490,  36]],

       [[491,  37]],

       [[491,  41]],

       [[493,  41]],

       [[495,  39]],

       [[496,  39]],

       [[497,  38]],

       [[498,  39]],

       [[498,  42]],

       [[525,  42]],

       [[526,  43]],

       [[525,  44]],

       [[497,  44]],

       [[497,  47]],

       [[496,  48]],

       [[495,  48]],

       [[493,  46]],

       [[491,  46]],

       [[491,  49]],

       [[490,  50]],

       [[489,  49]],

       [[489,  45]],

       [[487,  47]],

       [[486,  47]],

       [[485,  48]],

       [[484,  47]],

       [[484,  44]],

       [[453,  44]],

       [[452,  43]],

       [[453,  42]],

       [[482,  42]],

       [[482,  39]],

       [[483,  38]],

       [[484,  38]],

       [[486,  40]],

       [[487,  40]],

       [[489,  42]]], dtype=int32), array([[[480,  37]],

       [[481,  36]],

       [[482,  37]],

       [[481,  38]]], dtype=int32), array([[[362,  37]],

       [[363,  36]],

       [[364,  37]],

       [[363,  38]]], dtype=int32), array([[[1068,   34]],

       [[1069,   33]],

       [[1071,   33]],

       [[1072,   34]],

       [[1072,   43]],

       [[1073,   43]],

       [[1074,   44]],

       [[1072,   46]],

       [[1072,   48]],

       [[1070,   50]],

       [[1069,   49]],

       [[1069,   46]],

       [[1063,   46]],

       [[1062,   45]],

       [[1062,   43]],

       [[1064,   41]],

       [[1064,   40]],

       [[1066,   38]],

       [[1066,   37]],

       [[1068,   35]]], dtype=int32), array([[[1069,   37]],

       [[1068,   38]],

       [[1068,   39]],

       [[1067,   40]],

       [[1067,   43]],

       [[1069,   43]]], dtype=int32), array([[[1052,   34]],

       [[1053,   33]],

       [[1059,   33]],

       [[1060,   34]],

       [[1060,   35]],

       [[1059,   36]],

       [[1055,   36]],

       [[1055,   39]],

       [[1057,   39]],

       [[1058,   40]],

       [[1059,   40]],

       [[1061,   42]],

       [[1061,   46]],

       [[1060,   47]],

       [[1060,   48]],

       [[1059,   49]],

       [[1058,   49]],

       [[1057,   50]],

       [[1053,   50]],

       [[1051,   48]],

       [[1052,   47]],

       [[1057,   47]],

       [[1058,   46]],

       [[1058,   43]],

       [[1057,   42]],

       [[1053,   42]],

       [[1052,   41]]], dtype=int32), array([[[1044,   34]],

       [[1045,   33]],

       [[1047,   33]],

       [[1048,   34]],

       [[1048,   43]],

       [[1049,   43]],

       [[1050,   44]],

       [[1048,   46]],

       [[1048,   48]],

       [[1046,   50]],

       [[1045,   49]],

       [[1045,   46]],

       [[1039,   46]],

       [[1038,   45]],

       [[1038,   43]],

       [[1040,   41]],

       [[1040,   40]],

       [[1042,   38]],

       [[1042,   37]],

       [[1044,   35]]], dtype=int32), array([[[1045,   37]],

       [[1044,   38]],

       [[1044,   39]],

       [[1043,   40]],

       [[1043,   43]],

       [[1045,   43]]], dtype=int32), array([[[1031,   34]],

       [[1032,   33]],

       [[1033,   33]],

       [[1034,   34]],

       [[1034,   47]],

       [[1036,   47]],

       [[1037,   48]],

       [[1037,   49]],

       [[1036,   50]],

       [[1029,   50]],

       [[1028,   49]],

       [[1028,   48]],

       [[1029,   47]],

       [[1031,   47]],

       [[1031,   36]],

       [[1030,   37]],

       [[1028,   37]],

       [[1027,   36]],

       [[1029,   34]]], dtype=int32), array([[[822,  33]],

       [[826,  33]],

       [[829,  36]],

       [[829,  38]],

       [[828,  39]],

       [[828,  42]],

       [[829,  43]],

       [[829,  47]],

       [[827,  49]],

       [[826,  49]],

       [[825,  50]],

       [[822,  50]],

       [[821,  49]],

       [[820,  49]],

       [[819,  48]],

       [[820,  47]],

       [[825,  47]],

       [[826,  46]],

       [[826,  43]],

       [[825,  43]],

       [[824,  42]],

       [[822,  42]],

       [[821,  41]],

       [[822,  40]],

       [[824,  40]],

       [[825,  39]],

       [[825,  36]],

       [[821,  36]],

       [[820,  35]]], dtype=int32), array([[[806,  34]],

       [[807,  33]],

       [[816,  33]],

       [[817,  34]],

       [[817,  36]],

       [[816,  37]],

       [[816,  38]],

       [[815,  39]],

       [[815,  41]],

       [[814,  42]],

       [[814,  43]],

       [[813,  44]],

       [[813,  46]],

       [[812,  47]],

       [[812,  48]],

       [[810,  50]],

       [[809,  49]],

       [[809,  47]],

       [[810,  46]],

       [[810,  44]],

       [[811,  43]],

       [[811,  42]],

       [[812,  41]],

       [[812,  40]],

       [[813,  39]],

       [[813,  36]],

       [[807,  36]],

       [[806,  35]]], dtype=int32), array([[[800,  34]],

       [[801,  33]],

       [[803,  33]],

       [[804,  34]],

       [[804,  43]],

       [[805,  43]],

       [[806,  44]],

       [[804,  46]],

       [[804,  48]],

       [[803,  49]],

       [[802,  49]],

       [[801,  48]],

       [[801,  46]],

       [[795,  46]],

       [[794,  45]],

       [[794,  43]],

       [[796,  41]],

       [[796,  40]],

       [[798,  38]],

       [[798,  37]],

       [[800,  35]]], dtype=int32), array([[[801,  37]],

       [[800,  38]],

       [[800,  39]],

       [[799,  40]],

       [[799,  43]],

       [[801,  43]]], dtype=int32), array([[[788,  34]],

       [[789,  33]],

       [[791,  33]],

       [[792,  34]],

       [[792,  43]],

       [[793,  43]],

       [[794,  44]],

       [[792,  46]],

       [[792,  48]],

       [[790,  50]],

       [[789,  49]],

       [[789,  46]],

       [[783,  46]],

       [[782,  45]],

       [[782,  43]],

       [[783,  42]],

       [[783,  41]],

       [[786,  38]],

       [[786,  37]],

       [[788,  35]]], dtype=int32), array([[[789,  37]],

       [[788,  38]],

       [[788,  39]],

       [[787,  40]],

       [[787,  43]],

       [[789,  43]]], dtype=int32), array([[[572,  33]],

       [[576,  33]],

       [[579,  36]],

       [[579,  38]],

       [[580,  39]],

       [[580,  42]],

       [[579,  43]],

       [[579,  46]],

       [[576,  49]],

       [[575,  49]],

       [[574,  50]],

       [[571,  50]],

       [[570,  49]],

       [[570,  48]],

       [[571,  47]],

       [[575,  47]],

       [[576,  46]],

       [[576,  43]],

       [[575,  44]],

       [[573,  44]],

       [[572,  43]],

       [[571,  43]],

       [[569,  41]],

       [[569,  36]]], dtype=int32), array([[[573,  36]],

       [[572,  37]],

       [[572,  40]],

       [[573,  41]],

       [[576,  41]],

       [[576,  36]]], dtype=int32), array([[[561,  33]],

       [[564,  33]],

       [[567,  36]],

       [[567,  37]],

       [[568,  38]],

       [[568,  44]],

       [[567,  45]],

       [[567,  47]],

       [[565,  49]],

       [[564,  49]],

       [[563,  50]],

       [[561,  50]],

       [[557,  46]],

       [[557,  37]]], dtype=int32), array([[[561,  36]],

       [[560,  37]],

       [[560,  46]],

       [[561,  47]],

       [[564,  47]],

       [[564,  46]],

       [[565,  45]],

       [[565,  38]],

       [[564,  37]],

       [[564,  36]]], dtype=int32), array([[[550,  33]],

       [[554,  33]],

       [[555,  34]],

       [[555,  35]],

       [[554,  36]],

       [[550,  36]],

       [[550,  39]],

       [[553,  39]],

       [[555,  41]],

       [[555,  42]],

       [[556,  43]],

       [[556,  46]],

       [[552,  50]],

       [[549,  50]],

       [[546,  47]],

       [[546,  46]],

       [[545,  45]],

       [[545,  39]],

       [[546,  38]],

       [[546,  37]]], dtype=int32), array([[[549,  42]],

       [[549,  47]],

       [[552,  47]],

       [[553,  46]],

       [[553,  43]],

       [[552,  42]]], dtype=int32), array([[[537,  34]],

       [[538,  33]],

       [[539,  33]],

       [[540,  34]],

       [[540,  47]],

       [[542,  47]],

       [[543,  48]],

       [[543,  49]],

       [[542,  50]],

       [[535,  50]],

       [[534,  49]],

       [[534,  48]],

       [[535,  47]],

       [[537,  47]],

       [[537,  36]],

       [[536,  37]],

       [[535,  37]],

       [[534,  36]],

       [[534,  35]],

       [[535,  34]]], dtype=int32), array([[[438,  33]],

       [[442,  33]],

       [[445,  36]],

       [[445,  38]],

       [[444,  39]],

       [[444,  42]],

       [[445,  43]],

       [[445,  47]],

       [[443,  49]],

       [[442,  49]],

       [[441,  50]],

       [[438,  50]],

       [[435,  47]],

       [[435,  36]]], dtype=int32), array([[[438,  43]],

       [[438,  47]],

       [[442,  47]],

       [[442,  44]],

       [[441,  43]]], dtype=int32), array([[[439,  36]],

       [[439,  39]],

       [[440,  40]],

       [[441,  39]],

       [[441,  36]]], dtype=int32), array([[[424,  34]],

       [[425,  33]],

       [[431,  33]],

       [[432,  34]],

       [[432,  35]],

       [[431,  36]],

       [[426,  36]],

       [[426,  39]],

       [[429,  39]],

       [[430,  40]],

       [[431,  40]],

       [[432,  41]],

       [[432,  42]],

       [[433,  43]],

       [[433,  46]],

       [[430,  49]],

       [[429,  49]],

       [[428,  50]],

       [[425,  50]],

       [[423,  48]],

       [[424,  47]],

       [[429,  47]],

       [[430,  46]],

       [[430,  43]],

       [[429,  42]],

       [[425,  42]],

       [[424,  41]]], dtype=int32), array([[[415,  34]],

       [[416,  33]],

       [[419,  33]],

       [[420,  34]],

       [[420,  35]],

       [[419,  36]],

       [[416,  36]],

       [[416,  39]],

       [[418,  39]],

       [[421,  42]],

       [[421,  47]],

       [[419,  49]],

       [[418,  49]],

       [[417,  50]],

       [[415,  50]],

       [[414,  49]],

       [[413,  49]],

       [[412,  48]],

       [[412,  47]],

       [[411,  46]],

       [[411,  38]],

       [[412,  37]],

       [[412,  36]],

       [[414,  34]]], dtype=int32), array([[[414,  42]],

       [[414,  46]],

       [[415,  47]],

       [[418,  47]],

       [[418,  42]]], dtype=int32), array([[[402,  34]],

       [[403,  33]],

       [[405,  33]],

       [[406,  34]],

       [[406,  47]],

       [[408,  47]],

       [[409,  48]],

       [[409,  49]],

       [[408,  50]],

       [[401,  50]],

       [[399,  48]],

       [[400,  47]],

       [[403,  47]],

       [[403,  36]],

       [[402,  37]],

       [[400,  37]],

       [[399,  36]],

       [[399,  35]],

       [[400,  34]]], dtype=int32), array([[[345,  34]],

       [[346,  33]],

       [[348,  33]],

       [[349,  34]],

       [[349,  43]],

       [[350,  43]],

       [[351,  44]],

       [[349,  46]],

       [[349,  48]],

       [[348,  49]],

       [[347,  49]],

       [[346,  48]],

       [[346,  46]],

       [[340,  46]],

       [[339,  45]],

       [[339,  43]],

       [[341,  41]],

       [[341,  40]],

       [[343,  38]],

       [[343,  37]],

       [[345,  35]]], dtype=int32), array([[[346,  37]],

       [[345,  38]],

       [[345,  39]],

       [[344,  40]],

       [[344,  43]],

       [[346,  43]]], dtype=int32), array([[[331,  34]],

       [[332,  33]],

       [[335,  33]],

       [[338,  36]],

       [[338,  38]],

       [[339,  39]],

       [[339,  43]],

       [[338,  44]],

       [[338,  46]],

       [[337,  47]],

       [[337,  48]],

       [[336,  49]],

       [[335,  49]],

       [[334,  50]],

       [[332,  50]],

       [[331,  49]],

       [[330,  49]],

       [[329,  48]],

       [[329,  47]],

       [[328,  46]],

       [[328,  37]],

       [[329,  36]],

       [[329,  35]],

       [[330,  34]]], dtype=int32), array([[[332,  36]],

       [[331,  37]],

       [[331,  46]],

       [[332,  47]],

       [[334,  47]],

       [[335,  46]],

       [[335,  45]],

       [[336,  44]],

       [[336,  39]],

       [[335,  38]],

       [[335,  36]]], dtype=int32), array([[[317,  34]],

       [[318,  33]],

       [[324,  33]],

       [[325,  34]],

       [[325,  35]],

       [[324,  36]],

       [[320,  36]],

       [[320,  39]],

       [[322,  39]],

       [[323,  40]],

       [[324,  40]],

       [[325,  41]],

       [[325,  42]],

       [[326,  43]],

       [[326,  46]],

       [[325,  47]],

       [[325,  48]],

       [[324,  49]],

       [[323,  49]],

       [[322,  50]],

       [[318,  50]],

       [[316,  48]],

       [[317,  47]],

       [[322,  47]],

       [[323,  46]],

       [[323,  43]],

       [[322,  42]],

       [[318,  42]],

       [[317,  41]]], dtype=int32)), array([[[ -1,  -1,   1,  -1],
        [  2,  -1,  -1,   0],
        [  3,   1,  -1,   0],
        ...,
        [660, 656, 659,   0],
        [ -1,  -1,  -1, 658],
        [ -1, 658,  -1,   0]]], dtype=int32))
>>> a,b = cv2.findContours(mor_img, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
>>> a.shape
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'tuple' object has no attribute 'shape'
>>> a[0].sha[e
... 
KeyboardInterrupt
>>> a[0].shape
(4, 1, 2)
>>> a[1].sha[e
... 
KeyboardInterrupt
>>> len(a)
661
>>> a[1].shape
(4, 1, 2)
>>> b.shape
(1, 661, 4)
>>> contorus = a 
>>> sorted_contours = sorted(contours, key=cv2.contourArea, reverse=True)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'contours' is not defined. Did you mean: 'contorus'?
>>> contours = a
>>> sorted_contours = sorted(contours, key=cv2.contourArea, reverse=True)
>>> sorted_contours.shape
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'list' object has no attribute 'shape'
>>> lenn(sorted_contou
KeyboardInterrupt
>>> len(sorted_contours)
661
>>> b = contours
>>> sorted_contours = sorted(contours, key=cv2.contourArea, reverse=True)
>>> for c in sorted_contours[1:]:
...     area = cv2.contourArea(c)
...     if area > 6000:
...         cv2.drawContours(img, [c], -1, (random.randrange(0, 255), random.randrange(0, 256), random.randrange(0, 255)), 3)
... 
array([[[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       ...,

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]]], dtype=uint8)
array([[[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       ...,

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]]], dtype=uint8)
array([[[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       ...,

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]]], dtype=uint8)
array([[[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       ...,

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]]], dtype=uint8)
array([[[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       ...,

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]]], dtype=uint8)
>>> cv2.imshow("mor_img", mor_img); cv2.waitKey(1)
-1
>>> cv2.imshow("img", img); cv2.waitKey(1)
-1
>>> a,b = cv2.findContours(mor_img, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
>>> contours = b
>>> sorted_contours = sorted(contours, key=cv2.contourArea, reverse=True)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
cv2.error: OpenCV(4.7.0) /Users/runner/work/opencv-python/opencv-python/opencv/modules/imgproc/src/shapedescr.cpp:315: error: (-215:Assertion failed) npoints >= 0 && (depth == CV_32F || depth == CV_32S) in function 'contourArea'

>>> 
>>> for c in sorted_contours[1:]:
...     area = cv2.contourArea(c)
...     if area > 6000:
...         cv2.drawContours(img, [c], -1, (random.randrange(0, 255), random.randrange(0, 256), random.randrange(0, 255)), 3)
... 
array([[[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       ...,

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]]], dtype=uint8)
array([[[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       ...,

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]]], dtype=uint8)
array([[[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       ...,

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]]], dtype=uint8)
array([[[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       ...,

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]]], dtype=uint8)
array([[[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       ...,

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]]], dtype=uint8)
>>> cv2.imshow("img", img); cv2.waitKey(1)
-1
>>> contours.shape
(1, 661, 4)
>>> exit()
(base) soyeonm@soyeonm-mbp OGN % python
Python 3.10.9 (main, Mar  1 2023, 12:33:47) [Clang 14.0.6 ] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> import cv2
import numpy as np

>>> import numpy as np
>>> 
>>> def find_rooms(img, noise_removal_threshold=25, corners_threshold=0.1,
...                room_closing_max_length=100, gap_in_wall_threshold=500):
...     """
... 
...     :param img: grey scale image of rooms, already eroded and doors removed etc.
...     :param noise_removal_threshold: Minimal area of blobs to be kept.
...     :param corners_threshold: Threshold to allow corners. Higher removes more of the house.
...     :param room_closing_max_length: Maximum line length to add to close off open doors.
...     :param gap_in_wall_threshold: Minimum number of pixels to identify component as room instead of hole in the wall.
...     :return: rooms: list of numpy arrays containing boolean masks for each detected room
...              colored_house: A colored version of the input image, where each room has a random color.
...     """
...     assert 0 <= corners_threshold <= 1
...     # Remove noise left from door removal
...     #
...     img[img < 128] = 0
...     img[img > 128] = 255
...     _, contours, _ = cv2.findContours(~img, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
...     mask = np.zeros_like(img)
...     for contour in contours:
...         area = cv2.contourArea(contour)
...         if area > noise_removal_threshold:
...             cv2.fillPoly(mask, [contour], 255)
...     #
...     img = ~mask
...     #
...     # Detect corners (you can play with the parameters here)
...     dst = cv2.cornerHarris(img ,2,3,0.04)
...     dst = cv2.dilate(dst,None)
...     corners = dst > corners_threshold * dst.max()
...     #
...     # Draw lines to close the rooms off by adding a line between corners on the same x or y coordinate
...     # This gets some false positives.
...     # You could try to disallow drawing through other existing lines for example.
...     for y,row in enumerate(corners):
...         x_same_y = np.argwhere(row)
...         for x1, x2 in zip(x_same_y[:-1], x_same_y[1:]):
... 
  File "<stdin>", line 38
    
IndentationError: expected an indented block after 'for' statement on line 37
>>>             if x2[0] - x1[0] < room_closing_max_length:
  File "<stdin>", line 1
    if x2[0] - x1[0] < room_closing_max_length:
IndentationError: unexpected indent
>>>                 color = 0
  File "<stdin>", line 1
    color = 0
IndentationError: unexpected indent
>>>                 cv2.line(img, (x1, y), (x2, y), color, 1)
  File "<stdin>", line 1
    cv2.line(img, (x1, y), (x2, y), color, 1)
IndentationError: unexpected indent
>>>     #
>>>     for x,col in enumerate(corners.T):
  File "<stdin>", line 1
    for x,col in enumerate(corners.T):
IndentationError: unexpected indent
>>>         y_same_x = np.argwhere(col)
  File "<stdin>", line 1
    y_same_x = np.argwhere(col)
IndentationError: unexpected indent
>>>         for y1, y2 in zip(y_same_x[:-1], y_same_x[1:]):
  File "<stdin>", line 1
    for y1, y2 in zip(y_same_x[:-1], y_same_x[1:]):
IndentationError: unexpected indent
>>>             if y2[0] - y1[0] < room_closing_max_length:
  File "<stdin>", line 1
    if y2[0] - y1[0] < room_closing_max_length:
IndentationError: unexpected indent
>>>                 color = 0
  File "<stdin>", line 1
    color = 0
IndentationError: unexpected indent
>>>                 cv2.line(img, (x, y1), (x, y2), color, 1)
  File "<stdin>", line 1
    cv2.line(img, (x, y1), (x, y2), color, 1)
IndentationError: unexpected indent
>>>     #
>>>     #
>>>     # Mark the outside of the house as black
>>>     _, contours, _ = cv2.findContours(~img, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
  File "<stdin>", line 1
    _, contours, _ = cv2.findContours(~img, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
IndentationError: unexpected indent
>>>     contour_sizes = [(cv2.contourArea(contour), contour) for contour in contours]
  File "<stdin>", line 1
    contour_sizes = [(cv2.contourArea(contour), contour) for contour in contours]
IndentationError: unexpected indent
>>>     biggest_contour = max(contour_sizes, key=lambda x: x[0])[1]
  File "<stdin>", line 1
    biggest_contour = max(contour_sizes, key=lambda x: x[0])[1]
IndentationError: unexpected indent
>>>     mask = np.zeros_like(mask)
  File "<stdin>", line 1
    mask = np.zeros_like(mask)
IndentationError: unexpected indent
>>>     cv2.fillPoly(mask, [biggest_contour], 255)
  File "<stdin>", line 1
    cv2.fillPoly(mask, [biggest_contour], 255)
IndentationError: unexpected indent
>>>     img[mask == 0] = 0
  File "<stdin>", line 1
    img[mask == 0] = 0
IndentationError: unexpected indent
>>>     #
>>>     # Find the connected components in the house
>>>     ret, labels = cv2.connectedComponents(img)
  File "<stdin>", line 1
    ret, labels = cv2.connectedComponents(img)
IndentationError: unexpected indent
>>>     img = cv2.cvtColor(img,cv2.COLOR_GRAY2RGB)
  File "<stdin>", line 1
    img = cv2.cvtColor(img,cv2.COLOR_GRAY2RGB)
IndentationError: unexpected indent
>>>     unique = np.unique(labels)
  File "<stdin>", line 1
    unique = np.unique(labels)
IndentationError: unexpected indent
>>>     rooms = []
  File "<stdin>", line 1
    rooms = []
IndentationError: unexpected indent
>>>     for label in unique:
  File "<stdin>", line 1
    for label in unique:
IndentationError: unexpected indent
>>>         component = labels == label
  File "<stdin>", line 1
    component = labels == label
IndentationError: unexpected indent
>>>         if img[component].sum() == 0 or np.count_nonzero(component) < gap_in_wall_threshold:
  File "<stdin>", line 1
    if img[component].sum() == 0 or np.count_nonzero(component) < gap_in_wall_threshold:
IndentationError: unexpected indent
>>>             color = 0
  File "<stdin>", line 1
    color = 0
IndentationError: unexpected indent
>>>         else:
  File "<stdin>", line 1
    else:
IndentationError: unexpected indent
>>>             rooms.append(component)
  File "<stdin>", line 1
    rooms.append(component)
IndentationError: unexpected indent
>>>             color = np.random.randint(0, 255, size=3)
  File "<stdin>", line 1
    color = np.random.randint(0, 255, size=3)
IndentationError: unexpected indent
>>>         img[component] = color
  File "<stdin>", line 1
    img[component] = color
IndentationError: unexpected indent
>>>     #
>>>     return rooms, img
  File "<stdin>", line 1
    return rooms, img
IndentationError: unexpected indent
>>> 
>>> def find_rooms(img, noise_removal_threshold=25, corners_threshold=0.1,
...                room_closing_max_length=100, gap_in_wall_threshold=500):
...     """
...     #
...     :param img: grey scale image of rooms, already eroded and doors removed etc.
...     :param noise_removal_threshold: Minimal area of blobs to be kept.
...     :param corners_threshold: Threshold to allow corners. Higher removes more of the house.
...     :param room_closing_max_length: Maximum line length to add to close off open doors.
...     :param gap_in_wall_threshold: Minimum number of pixels to identify component as room instead of hole in the wall.
...     :return: rooms: list of numpy arrays containing boolean masks for each detected room
...              colored_house: A colored version of the input image, where each room has a random color.
...     """
...     assert 0 <= corners_threshold <= 1
...     # Remove noise left from door removal
...     #
...     img[img < 128] = 0
...     img[img > 128] = 255
...     _, contours, _ = cv2.findContours(~img, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
...     mask = np.zeros_like(img)
...     for contour in contours:
...         area = cv2.contourArea(contour)
...         if area > noise_removal_threshold:
...             cv2.fillPoly(mask, [contour], 255)
...     #
...     img = ~mask
...     #
...     # Detect corners (you can play with the parameters here)
...     dst = cv2.cornerHarris(img ,2,3,0.04)
...     dst = cv2.dilate(dst,None)
...     corners = dst > corners_threshold * dst.max()
...     #
...     # Draw lines to close the rooms off by adding a line between corners on the same x or y coordinate
...     # This gets some false positives.
...     # You could try to disallow drawing through other existing lines for example.
...     for y,row in enumerate(corners):
...         x_same_y = np.argwhere(row)
...         for x1, x2 in zip(x_same_y[:-1], x_same_y[1:]):
... 
  File "<stdin>", line 38
    
IndentationError: expected an indented block after 'for' statement on line 37
>>>             if x2[0] - x1[0] < room_closing_max_length:
  File "<stdin>", line 1
    if x2[0] - x1[0] < room_closing_max_length:
IndentationError: unexpected indent
>>>                 color = 0
  File "<stdin>", line 1
    color = 0
IndentationError: unexpected indent
>>>                 cv2.line(img, (x1, y), (x2, y), color, 1)
  File "<stdin>", line 1
    cv2.line(img, (x1, y), (x2, y), color, 1)
IndentationError: unexpected indent
>>>     #
>>>     for x,col in enumerate(corners.T):
  File "<stdin>", line 1
    for x,col in enumerate(corners.T):
IndentationError: unexpected indent
>>>         y_same_x = np.argwhere(col)
  File "<stdin>", line 1
    y_same_x = np.argwhere(col)
IndentationError: unexpected indent
>>>         for y1, y2 in zip(y_same_x[:-1], y_same_x[1:]):
  File "<stdin>", line 1
    for y1, y2 in zip(y_same_x[:-1], y_same_x[1:]):
IndentationError: unexpected indent
>>>             if y2[0] - y1[0] < room_closing_max_length:
  File "<stdin>", line 1
    if y2[0] - y1[0] < room_closing_max_length:
IndentationError: unexpected indent
>>>                 color = 0
  File "<stdin>", line 1
    color = 0
IndentationError: unexpected indent
>>>                 cv2.line(img, (x, y1), (x, y2), color, 1)
  File "<stdin>", line 1
    cv2.line(img, (x, y1), (x, y2), color, 1)
IndentationError: unexpected indent
>>>     #
>>>     #
>>>     # Mark the outside of the house as black
>>>     _, contours, _ = cv2.findContours(~img, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
  File "<stdin>", line 1
    _, contours, _ = cv2.findContours(~img, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
IndentationError: unexpected indent
>>>     contour_sizes = [(cv2.contourArea(contour), contour) for contour in contours]
  File "<stdin>", line 1
    contour_sizes = [(cv2.contourArea(contour), contour) for contour in contours]
IndentationError: unexpected indent
>>>     biggest_contour = max(contour_sizes, key=lambda x: x[0])[1]
  File "<stdin>", line 1
    biggest_contour = max(contour_sizes, key=lambda x: x[0])[1]
IndentationError: unexpected indent
>>>     mask = np.zeros_like(mask)
  File "<stdin>", line 1
    mask = np.zeros_like(mask)
IndentationError: unexpected indent
>>>     cv2.fillPoly(mask, [biggest_contour], 255)
  File "<stdin>", line 1
    cv2.fillPoly(mask, [biggest_contour], 255)
IndentationError: unexpected indent
>>>     img[mask == 0] = 0
  File "<stdin>", line 1
    img[mask == 0] = 0
IndentationError: unexpected indent
>>>     #
>>>     # Find the connected components in the house
>>>     ret, labels = cv2.connectedComponents(img)
  File "<stdin>", line 1
    ret, labels = cv2.connectedComponents(img)
IndentationError: unexpected indent
>>>     img = cv2.cvtColor(img,cv2.COLOR_GRAY2RGB)
  File "<stdin>", line 1
    img = cv2.cvtColor(img,cv2.COLOR_GRAY2RGB)
IndentationError: unexpected indent
>>>     unique = np.unique(labels)
  File "<stdin>", line 1
    unique = np.unique(labels)
IndentationError: unexpected indent
>>>     rooms = []
  File "<stdin>", line 1
    rooms = []
IndentationError: unexpected indent
>>>     for label in unique:
  File "<stdin>", line 1
    for label in unique:
IndentationError: unexpected indent
>>>         component = labels == label
  File "<stdin>", line 1
    component = labels == label
IndentationError: unexpected indent
>>>         if img[component].sum() == 0 or np.count_nonzero(component) < gap_in_wall_threshold:
  File "<stdin>", line 1
    if img[component].sum() == 0 or np.count_nonzero(component) < gap_in_wall_threshold:
IndentationError: unexpected indent
>>>             color = 0
  File "<stdin>", line 1
    color = 0
IndentationError: unexpected indent
>>>         else:
  File "<stdin>", line 1
    else:
IndentationError: unexpected indent
>>>             rooms.append(component)
  File "<stdin>", line 1
    rooms.append(component)
IndentationError: unexpected indent
>>>             color = np.random.randint(0, 255, size=3)
  File "<stdin>", line 1
    color = np.random.randint(0, 255, size=3)
IndentationError: unexpected indent
>>>         img[component] = color
  File "<stdin>", line 1
    img[component] = color
IndentationError: unexpected indent
>>>     #
>>>     return rooms, img
  File "<stdin>", line 1
    return rooms, img
IndentationError: unexpected indent
>>> 
>>> def find_rooms(img, noise_removal_threshold=25, corners_threshold=0.1,
...                        room_closing_max_length=100, gap_in_wall_threshold=500):
...     """
...     #
...     :param img: grey scale image of rooms, already eroded and doors removed etc.
...     :param noise_removal_threshold: Minimal area of blobs to be kept.
...     :param corners_threshold: Threshold to allow corners. Higher removes more of the house.
...     :param room_closing_max_length: Maximum line length to add to close off open doors.
...     :param gap_in_wall_threshold: Minimum number of pixels to identify component as room instead of hole in the wall.
...     :return: rooms: list of numpy arrays containing boolean masks for each detected room
...                      colored_house: A colored version of the input image, where each room has a random color.
...     """
...     assert 0 <= corners_threshold <= 1
...     # Remove noise left from door removal
...     #
...     img[img < 128] = 0
...     img[img > 128] = 255
...     _, contours, _ = cv2.findContours(~img, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
...     mask = np.zeros_like(img)
...     for contour in contours:
...             area = cv2.contourArea(contour)
...             if area > noise_removal_threshold:
...                     cv2.fillPoly(mask, [contour], 255)
...     #
...     img = ~mask
...     #
...     # Detect corners (you can play with the parameters here)
...     dst = cv2.cornerHarris(img ,2,3,0.04)
...     dst = cv2.dilate(dst,None)
...     corners = dst > corners_threshold * dst.max()
...     #
...     # Draw lines to close the rooms off by adding a line between corners on the same x or y coordinate
...     # This gets some false positives.
...     # You could try to disallow drawing through other existing lines for example.
...     for y,row in enumerate(corners):
...             x_same_y = np.argwhere(row)
...             for x1, x2 in zip(x_same_y[:-1], x_same_y[1:]):
... 
  File "<stdin>", line 38
    
IndentationError: expected an indented block after 'for' statement on line 37
>>>                     if x2[0] - x1[0] < room_closing_max_length:
  File "<stdin>", line 1
    if x2[0] - x1[0] < room_closing_max_length:
IndentationError: unexpected indent
>>>                             color = 0
  File "<stdin>", line 1
    color = 0
IndentationError: unexpected indent
>>>                             cv2.line(img, (x1, y), (x2, y), color, 1)
  File "<stdin>", line 1
    cv2.line(img, (x1, y), (x2, y), color, 1)
IndentationError: unexpected indent
>>>     #
>>>     for x,col in enumerate(corners.T):
  File "<stdin>", line 1
    for x,col in enumerate(corners.T):
IndentationError: unexpected indent
>>>             y_same_x = np.argwhere(col)
  File "<stdin>", line 1
    y_same_x = np.argwhere(col)
IndentationError: unexpected indent
>>>             for y1, y2 in zip(y_same_x[:-1], y_same_x[1:]):
  File "<stdin>", line 1
    for y1, y2 in zip(y_same_x[:-1], y_same_x[1:]):
IndentationError: unexpected indent
>>>                     if y2[0] - y1[0] < room_closing_max_length:
  File "<stdin>", line 1
    if y2[0] - y1[0] < room_closing_max_length:
IndentationError: unexpected indent
>>>                             color = 0
  File "<stdin>", line 1
    color = 0
IndentationError: unexpected indent
>>>                             cv2.line(img, (x, y1), (x, y2), color, 1)
  File "<stdin>", line 1
    cv2.line(img, (x, y1), (x, y2), color, 1)
IndentationError: unexpected indent
>>>     #
>>>     #
>>>     # Mark the outside of the house as black
>>>     _, contours, _ = cv2.findContours(~img, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
  File "<stdin>", line 1
    _, contours, _ = cv2.findContours(~img, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
IndentationError: unexpected indent
>>>     contour_sizes = [(cv2.contourArea(contour), contour) for contour in contours]
  File "<stdin>", line 1
    contour_sizes = [(cv2.contourArea(contour), contour) for contour in contours]
IndentationError: unexpected indent
>>>     biggest_contour = max(contour_sizes, key=lambda x: x[0])[1]
  File "<stdin>", line 1
    biggest_contour = max(contour_sizes, key=lambda x: x[0])[1]
IndentationError: unexpected indent
>>>     mask = np.zeros_like(mask)
  File "<stdin>", line 1
    mask = np.zeros_like(mask)
IndentationError: unexpected indent
>>>     cv2.fillPoly(mask, [biggest_contour], 255)
  File "<stdin>", line 1
    cv2.fillPoly(mask, [biggest_contour], 255)
IndentationError: unexpected indent
>>>     img[mask == 0] = 0
  File "<stdin>", line 1
    img[mask == 0] = 0
IndentationError: unexpected indent
>>>     #
>>>     # Find the connected components in the house
>>>     ret, labels = cv2.connectedComponents(img)
  File "<stdin>", line 1
    ret, labels = cv2.connectedComponents(img)
IndentationError: unexpected indent
>>>     img = cv2.cvtColor(img,cv2.COLOR_GRAY2RGB)
  File "<stdin>", line 1
    img = cv2.cvtColor(img,cv2.COLOR_GRAY2RGB)
IndentationError: unexpected indent
>>>     unique = np.unique(labels)
  File "<stdin>", line 1
    unique = np.unique(labels)
IndentationError: unexpected indent
>>>     rooms = []
  File "<stdin>", line 1
    rooms = []
IndentationError: unexpected indent
>>>     for label in unique:
  File "<stdin>", line 1
    for label in unique:
IndentationError: unexpected indent
>>>             component = labels == label
  File "<stdin>", line 1
    component = labels == label
IndentationError: unexpected indent
>>>             if img[component].sum() == 0 or np.count_nonzero(component) < gap_in_wall_threshold:
  File "<stdin>", line 1
    if img[component].sum() == 0 or np.count_nonzero(component) < gap_in_wall_threshold:
IndentationError: unexpected indent
>>>                     color = 0
  File "<stdin>", line 1
    color = 0
IndentationError: unexpected indent
>>>             else:
  File "<stdin>", line 1
    else:
IndentationError: unexpected indent
>>>                     rooms.append(component)
  File "<stdin>", line 1
    rooms.append(component)
IndentationError: unexpected indent
>>>                     color = np.random.randint(0, 255, size=3)
  File "<stdin>", line 1
    color = np.random.randint(0, 255, size=3)
IndentationError: unexpected indent
>>>             img[component] = color
  File "<stdin>", line 1
    img[component] = color
IndentationError: unexpected indent
>>>     #
>>>     return rooms, img
  File "<stdin>", line 1
    return rooms, img
IndentationError: unexpected indent
>>> 
>>> def find_rooms(img, noise_removal_threshold=25, corners_threshold=0.1,
...                        room_closing_max_length=100, gap_in_wall_threshold=500):
...     """
...     :param img: grey scale image of rooms, already eroded and doors removed etc.
...     :param noise_removal_threshold: Minimal area of blobs to be kept.
...     :param corners_threshold: Threshold to allow corners. Higher removes more of the house.
...     :param room_closing_max_length: Maximum line length to add to close off open doors.
...     :param gap_in_wall_threshold: Minimum number of pixels to identify component as room instead of hole in the wall.
...     :return: rooms: list of numpy arrays containing boolean masks for each detected room
...                      colored_house: A colored version of the input image, where each room has a random color.
...     """
...     return
... 
>>> def find_rooms(img, noise_removal_threshold=25, corners_threshold=0.1,
...                        room_closing_max_length=100, gap_in_wall_threshold=500):
...     """
...     :param img: grey scale image of rooms, already eroded and doors removed etc.
...     :param noise_removal_threshold: Minimal area of blobs to be kept.
...     :param corners_threshold: Threshold to allow corners. Higher removes more of the house.
...     :param room_closing_max_length: Maximum line length to add to close off open doors.
...     :param gap_in_wall_threshold: Minimum number of pixels to identify component as room instead of hole in the wall.
...     :return: rooms: list of numpy arrays containing boolean masks for each detected room
...                      colored_house: A colored version of the input image, where each room has a random color.
...     """
...     assert 0 <= corners_threshold <= 1
...     # Remove noise left from door removal
...     #
...     img[img < 128] = 0
...     img[img > 128] = 255
...     _, contours, _ = cv2.findContours(~img, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
...     mask = np.zeros_like(img)
...     for contour in contours:
...             area = cv2.contourArea(contour)
...             if area > noise_removal_threshold:
...                     cv2.fillPoly(mask, [contour], 255)
...     #
...     img = ~mask
... 
>>> def find_rooms(img, noise_removal_threshold=25, corners_threshold=0.1,
...                        room_closing_max_length=100, gap_in_wall_threshold=500):
...     """
...     :param img: grey scale image of rooms, already eroded and doors removed etc.
...     :param noise_removal_threshold: Minimal area of blobs to be kept.
...     :param corners_threshold: Threshold to allow corners. Higher removes more of the house.
...     :param room_closing_max_length: Maximum line length to add to close off open doors.
...     :param gap_in_wall_threshold: Minimum number of pixels to identify component as room instead of hole in the wall.
...     :return: rooms: list of numpy arrays containing boolean masks for each detected room
...                      colored_house: A colored version of the input image, where each room has a random color.
...     """
...     assert 0 <= corners_threshold <= 1
...     # Remove noise left from door removal
...     #
...     img[img < 128] = 0
...     img[img > 128] = 255
...     _, contours, _ = cv2.findContours(~img, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
...     mask = np.zeros_like(img)
...     for contour in contours:
...             area = cv2.contourArea(contour)
...             if area > noise_removal_threshold:
...                     cv2.fillPoly(mask, [contour], 255)
...     #
...     img = ~mask
...     #
...     # Detect corners (you can play with the parameters here)
...     dst = cv2.cornerHarris(img ,2,3,0.04)
...     dst = cv2.dilate(dst,None)
...     corners = dst > corners_threshold * dst.max()
...     #
...     # Draw lines to close the rooms off by adding a line between corners on the same x or y coordinate
...     # This gets some false positives.
...     # You could try to disallow drawing through other existing lines for example.
...     for y,row in enumerate(corners):
...             x_same_y = np.argwhere(row)
...             for x1, x2 in zip(x_same_y[:-1], x_same_y[1:]):
... 
  File "<stdin>", line 37
    
IndentationError: expected an indented block after 'for' statement on line 36
>>>                     if x2[0] - x1[0] < room_closing_max_length:
  File "<stdin>", line 1
    if x2[0] - x1[0] < room_closing_max_length:
IndentationError: unexpected indent
>>>                             color = 0
  File "<stdin>", line 1
    color = 0
IndentationError: unexpected indent
>>>                             cv2.line(img, (x1, y), (x2, y), color, 1)
  File "<stdin>", line 1
    cv2.line(img, (x1, y), (x2, y), color, 1)
IndentationError: unexpected indent
>>>     #
>>> def find_rooms(img, noise_removal_threshold=25, corners_threshold=0.1,
...                        room_closing_max_length=100, gap_in_wall_threshold=500):
...     """
...     :param img: grey scale image of rooms, already eroded and doors removed etc.
...     :param noise_removal_threshold: Minimal area of blobs to be kept.
...     :param corners_threshold: Threshold to allow corners. Higher removes more of the house.
...     :param room_closing_max_length: Maximum line length to add to close off open doors.
...     :param gap_in_wall_threshold: Minimum number of pixels to identify component as room instead of hole in the wall.
...     :return: rooms: list of numpy arrays containing boolean masks for each detected room
...                      colored_house: A colored version of the input image, where each room has a random color.
...     """
...     assert 0 <= corners_threshold <= 1
...     # Remove noise left from door removal
...     #
...     img[img < 128] = 0
...     img[img > 128] = 255
...     _, contours, _ = cv2.findContours(~img, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
...     mask = np.zeros_like(img)
...     for contour in contours:
...             area = cv2.contourArea(contour)
...             if area > noise_removal_threshold:
...                     cv2.fillPoly(mask, [contour], 255)
...     #
...     img = ~mask
...     #
...     # Detect corners (you can play with the parameters here)
...     dst = cv2.cornerHarris(img ,2,3,0.04)
...     dst = cv2.dilate(dst,None)
...     corners = dst > corners_threshold * dst.max()
...     #
...     # Draw lines to close the rooms off by adding a line between corners on the same x or y coordinate
...     # This gets some false positives.
...     # You could try to disallow drawing through other existing lines for example.
...     for y,row in enumerate(corners):
...             x_same_y = np.argwhere(row)
...             for x1, x2 in zip(x_same_y[:-1], x_same_y[1:]):
...                     if x2[0] - x1[0] < room_closing_max_length:
...                             color = 0
...                             cv2.line(img, (x1, y), (x2, y), color, 1)
...     #
...     for x,col in enumerate(corners.T):
...             y_same_x = np.argwhere(col)
...             for y1, y2 in zip(y_same_x[:-1], y_same_x[1:]):
...                     if y2[0] - y1[0] < room_closing_max_length:
...                             color = 0
...                             cv2.line(img, (x, y1), (x, y2), color, 1)
...     #
...     #
...     # Mark the outside of the house as black
...     _, contours, _ = cv2.findContours(~img, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
...     contour_sizes = [(cv2.contourArea(contour), contour) for contour in contours]
...     biggest_contour = max(contour_sizes, key=lambda x: x[0])[1]
...     mask = np.zeros_like(mask)
...     cv2.fillPoly(mask, [biggest_contour], 255)
...     img[mask == 0] = 0
...     #
...     # Find the connected components in the house
...     ret, labels = cv2.connectedComponents(img)
...     img = cv2.cvtColor(img,cv2.COLOR_GRAY2RGB)
...     unique = np.unique(labels)
...     rooms = []
...     for label in unique:
...             component = labels == label
...             if img[component].sum() == 0 or np.count_nonzero(component) < gap_in_wall_threshold:
...                     color = 0
...             else:
...                     rooms.append(component)
...                     color = np.random.randint(0, 255, size=3)
...             img[component] = color
...     #
...     return rooms, img
... 
>>> /Users/soyeonm/Downloads/room.
KeyboardInterrupt
>>> img = cv2.imread("/Users/soyeonm/Downloads/room.png", 0)
>>> rooms, colored_house = find_rooms(img.copy())
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 17, in find_rooms
ValueError: not enough values to unpack (expected 3, got 2)
>>> cv2.imshow('result', colored_house); cv2.waitKey(1)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'colored_house' is not defined
>>> img.shape
(543, 808)
>>> def find_rooms(img, noise_removal_threshold=25, corners_threshold=0.1,
...                        room_closing_max_length=100, gap_in_wall_threshold=500):
...     """
...     :param img: grey scale image of rooms, already eroded and doors removed etc.
...     :param noise_removal_threshold: Minimal area of blobs to be kept.
...     :param corners_threshold: Threshold to allow corners. Higher removes more of the house.
...     :param room_closing_max_length: Maximum line length to add to close off open doors.
...     :param gap_in_wall_threshold: Minimum number of pixels to identify component as room instead of hole in the wall.
...     :return: rooms: list of numpy arrays containing boolean masks for each detected room
...                      colored_house: A colored version of the input image, where each room has a random color.
...     """
...     assert 0 <= corners_threshold <= 1
...     # Remove noise left from door removal
...     #
...     img[img < 128] = 0
...     img[img > 128] = 255
...     #_, contours, _ = cv2.findContours(~img, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
...     _, contours= cv2.findContours(~img, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
...     mask = np.zeros_like(img)
...     for contour in contours:
...             area = cv2.contourArea(contour)
...             if area > noise_removal_threshold:
...                     cv2.fillPoly(mask, [contour], 255)
...     #
...     img = ~mask
...     #
...     # Detect corners (you can play with the parameters here)
...     dst = cv2.cornerHarris(img ,2,3,0.04)
...     dst = cv2.dilate(dst,None)
...     corners = dst > corners_threshold * dst.max()
...     #
...     # Draw lines to close the rooms off by adding a line between corners on the same x or y coordinate
...     # This gets some false positives.
...     # You could try to disallow drawing through other existing lines for example.
...     for y,row in enumerate(corners):
...             x_same_y = np.argwhere(row)
...             for x1, x2 in zip(x_same_y[:-1], x_same_y[1:]):
...                     if x2[0] - x1[0] < room_closing_max_length:
...                             color = 0
...                             cv2.line(img, (x1, y), (x2, y), color, 1)
...     #
...     for x,col in enumerate(corners.T):
...             y_same_x = np.argwhere(col)
...             for y1, y2 in zip(y_same_x[:-1], y_same_x[1:]):
...                     if y2[0] - y1[0] < room_closing_max_length:
...                             color = 0
...                             cv2.line(img, (x, y1), (x, y2), color, 1)
...     #
...     #
...     # Mark the outside of the house as black
...     _, contours, _ = cv2.findContours(~img, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
...     contour_sizes = [(cv2.contourArea(contour), contour) for contour in contours]
...     biggest_contour = max(contour_sizes, key=lambda x: x[0])[1]
...     mask = np.zeros_like(mask)
...     cv2.fillPoly(mask, [biggest_contour], 255)
...     img[mask == 0] = 0
...     #
...     # Find the connected components in the house
...     ret, labels = cv2.connectedComponents(img)
...     img = cv2.cvtColor(img,cv2.COLOR_GRAY2RGB)
...     unique = np.unique(labels)
...     rooms = []
...     for label in unique:
...             component = labels == label
...             if img[component].sum() == 0 or np.count_nonzero(component) < gap_in_wall_threshold:
...                     color = 0
...             else:
...                     rooms.append(component)
...                     color = np.random.randint(0, 255, size=3)
...             img[component] = color
...     #
...     return rooms, img
... 
>>> img = cv2.imread("/Users/soyeonm/Downloads/room.png", 0)
>>> rooms, colored_house = find_rooms(img.copy())
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 21, in find_rooms
cv2.error: OpenCV(4.7.0) /Users/runner/work/opencv-python/opencv-python/opencv/modules/imgproc/src/shapedescr.cpp:315: error: (-215:Assertion failed) npoints >= 0 && (depth == CV_32F || depth == CV_32S) in function 'contourArea'

>>> cv2.imshow('result', colored_house); cv2.waitKey(1)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'colored_house' is not defined
>>> def find_rooms(img, noise_removal_threshold=25, corners_threshold=0.1,
...                        room_closing_max_length=100, gap_in_wall_threshold=500):
...     """
...     :param img: grey scale image of rooms, already eroded and doors removed etc.
...     :param noise_removal_threshold: Minimal area of blobs to be kept.
...     :param corners_threshold: Threshold to allow corners. Higher removes more of the house.
...     :param room_closing_max_length: Maximum line length to add to close off open doors.
...     :param gap_in_wall_threshold: Minimum number of pixels to identify component as room instead of hole in the wall.
...     :return: rooms: list of numpy arrays containing boolean masks for each detected room
...                      colored_house: A colored version of the input image, where each room has a random color.
...     """
...     assert 0 <= corners_threshold <= 1
...     # Remove noise left from door removal
...     #
...     img[img < 128] = 0
...     img[img > 128] = 255
...     #_, contours, _ = cv2.findContours(~img, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
...     contours, _= cv2.findContours(~img, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
...     mask = np.zeros_like(img)
...     for contour in contours:
...             area = cv2.contourArea(contour)
...             if area > noise_removal_threshold:
...                     cv2.fillPoly(mask, [contour], 255)
...     #
...     img = ~mask
...     #
...     # Detect corners (you can play with the parameters here)
...     dst = cv2.cornerHarris(img ,2,3,0.04)
...     dst = cv2.dilate(dst,None)
...     corners = dst > corners_threshold * dst.max()
...     #
...     # Draw lines to close the rooms off by adding a line between corners on the same x or y coordinate
...     # This gets some false positives.
...     # You could try to disallow drawing through other existing lines for example.
...     for y,row in enumerate(corners):
...             x_same_y = np.argwhere(row)
...             for x1, x2 in zip(x_same_y[:-1], x_same_y[1:]):
...                     if x2[0] - x1[0] < room_closing_max_length:
...                             color = 0
...                             cv2.line(img, (x1, y), (x2, y), color, 1)
...     #
...     for x,col in enumerate(corners.T):
...             y_same_x = np.argwhere(col)
...             for y1, y2 in zip(y_same_x[:-1], y_same_x[1:]):
...                     if y2[0] - y1[0] < room_closing_max_length:
...                             color = 0
...                             cv2.line(img, (x, y1), (x, y2), color, 1)
...     #
...     #
...     # Mark the outside of the house as black
...     _, contours, _ = cv2.findContours(~img, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
...     contour_sizes = [(cv2.contourArea(contour), contour) for contour in contours]
...     biggest_contour = max(contour_sizes, key=lambda x: x[0])[1]
...     mask = np.zeros_like(mask)
...     cv2.fillPoly(mask, [biggest_contour], 255)
...     img[mask == 0] = 0
...     #
...     # Find the connected components in the house
...     ret, labels = cv2.connectedComponents(img)
...     img = cv2.cvtColor(img,cv2.COLOR_GRAY2RGB)
...     unique = np.unique(labels)
...     rooms = []
...     for label in unique:
...             component = labels == label
...             if img[component].sum() == 0 or np.count_nonzero(component) < gap_in_wall_threshold:
...                     color = 0
...             else:
...                     rooms.append(component)
...                     color = np.random.randint(0, 255, size=3)
...             img[component] = color
...     #
...     return rooms, img
... 
>>> 
>>> img = cv2.imread("/Users/soyeonm/Downloads/room.png", 0)
>>> rooms, colored_house = find_rooms(img.copy())
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 40, in find_rooms
cv2.error: OpenCV(4.7.0) :-1: error: (-5:Bad argument) in function 'line'
> Overload resolution failed:
>  - Can't parse 'pt1'. Sequence item with index 0 has a wrong type
>  - Can't parse 'pt1'. Sequence item with index 0 has a wrong type

>>> cv2.imshow('result', colored_house); cv2.waitKey(1)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'colored_house' is not defined
>>> def find_rooms(img, noise_removal_threshold=25, corners_threshold=0.1,
...                        room_closing_max_length=100, gap_in_wall_threshold=500):
...     """
...     :param img: grey scale image of rooms, already eroded and doors removed etc.
...     :param noise_removal_threshold: Minimal area of blobs to be kept.
...     :param corners_threshold: Threshold to allow corners. Higher removes more of the house.
...     :param room_closing_max_length: Maximum line length to add to close off open doors.
...     :param gap_in_wall_threshold: Minimum number of pixels to identify component as room instead of hole in the wall.
...     :return: rooms: list of numpy arrays containing boolean masks for each detected room
...                      colored_house: A colored version of the input image, where each room has a random color.
...     """
...     assert 0 <= corners_threshold <= 1
...     # Remove noise left from door removal
...     #
...     img[img < 128] = 0
...     img[img > 128] = 255
...     #_, contours, _ = cv2.findContours(~img, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
...     contours, _= cv2.findContours(~img, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE) #_ is heirachy
...     mask = np.zeros_like(img)
...     for contour in contours:
...             area = cv2.contourArea(contour)
...             if area > noise_removal_threshold:
...                     cv2.fillPoly(mask, [contour], 255)
...     #
...     img = ~mask
...     #
...     # Detect corners (you can play with the parameters here)
...     dst = cv2.cornerHarris(img ,2,3,0.04)
...     dst = cv2.dilate(dst,None)
...     corners = dst > corners_threshold * dst.max()
...     #
...     # Draw lines to close the rooms off by adding a line between corners on the same x or y coordinate
...     # This gets some false positives.
...     # You could try to disallow drawing through other existing lines for example.
...     for y,row in enumerate(corners):
...             x_same_y = np.argwhere(row)
...             for x1, x2 in zip(x_same_y[:-1], x_same_y[1:]):
...                     if x2[0] - x1[0] < room_closing_max_length:
...                             color = 0
...                             cv2.line(img, (x1, y), (x2, y), color, 1)
... 
>>> find_rooms(img.copy())
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 40, in find_rooms
cv2.error: OpenCV(4.7.0) :-1: error: (-5:Bad argument) in function 'line'
> Overload resolution failed:
>  - Can't parse 'pt1'. Sequence item with index 0 has a wrong type
>  - Can't parse 'pt1'. Sequence item with index 0 has a wrong type

>>> cv2.__version__
'4.7.0'
>>> map0
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'map0' is not defined. Did you mean: 'map'?
>>> map[0].numpy()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'type' object is not subscriptable
>>> map
<class 'map'>
>>> map.shape
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: type object 'map' has no attribute 'shape'
>>> a= pickle.load(open('/Users/soyeonm/Documents/SocialNavigation/OGN/fbe_maps/sep_17_replay_18_just_map_with_sp_only/success_spot_init/18/fbe_map.p', 'rb')) 
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'pickle' is not defined
>>> import pickle
>>> a= pickle.load(open('/Users/soyeonm/Documents/SocialNavigation/OGN/fbe_maps/sep_17_replay_18_just_map_with_sp_only/success_spot_init/18/fbe_map.p', 'rb')) 
>>> a.numpy()
array([[[0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        ...,
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.]],

       [[0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        ...,
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.]],

       [[0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        ...,
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.]],

       ...,

       [[0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        ...,
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.]],

       [[0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        ...,
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.]],

       [[0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        ...,
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.]]], dtype=float32)
>>> a.numpy().shape
(17, 720, 720)
>>> a.numpy()[0].shape
(720, 720)
>>> pickle.dump(a.numpy()[0], open('/Users/soyeonm/Documents/SocialNavigation/OGN/fbe_maps/sep_17_replay_18_just_map_with_sp_only/success_spot_init/18/fbe_map_obs_numpy.p', 'wb'))
>>> cv2.imshow('mapmap', a.numpy()[0]); cv2.waitKey(1)
-1
>>> a.numpy()[0].shape
(720, 720)
>>> map_pickle = a.numpy()[0]
>>> if 1==1:
...     import skimage.morphology
...     selem = skimage.morphology.square(5)
...     dilated = skimage.morphology.binary_dilation(map_pickle, selem)
...     cv2.imshow("dilated", dilated); cv2.waitKey(1)
... 

Traceback (most recent call last):
  File "<stdin>", line 5, in <module>
cv2.error: OpenCV(4.7.0) :-1: error: (-5:Bad argument) in function 'imshow'
> Overload resolution failed:
>  - mat data type = 0 is not supported
>  - Expected Ptr<cv::cuda::GpuMat> for argument 'mat'
>  - Expected Ptr<cv::UMat> for argument 'mat'

>>> 
>>> dilated = dilated*1.0
>>> cv2.imshow("dilated", dilated); cv2.waitKey(1)
-1
>>> if 1==1:
...     import skimage.morphology
...     selem = skimage.morphology.square(10)
...     dilated = skimage.morphology.binary_dilation(map_pickle, selem)*1.0
...     cv2.imshow("dilated", dilated); cv2.waitKey(1)
... 
-1
>>> #Maybe remove all the semantic part
>>> a.shpae
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'Tensor' object has no attribute 'shpae'. Did you mean: 'shape'?
>>> a.shape
torch.Size([17, 720, 720])
>>> a[4:].shape
torch.Size([13, 720, 720])
>>> np.max(a[4:].numpy(), 0).shape
(720, 720)
>>> sem = np.max(a[4:].numpy(), 0)
>>> cv2.imshow('sem', sem); cv2.waitKey(1)
-1
>>> np.max(a[4:9].numpy(), 0).shape
KeyboardInterrupt
>>> (a[4:9].numpy() + a[10:].numpy())>0
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: operands could not be broadcast together with shapes (5,720,720) (7,720,720) 
>>> np.max(a[4:9].numpy(), 0).shape
(720, 720)
>>> np.max(a[4:9].numpy(), 0) + np.max(a[10:].numpy())
array([[1., 1., 1., ..., 1., 1., 1.],
       [1., 1., 1., ..., 1., 1., 1.],
       [1., 1., 1., ..., 1., 1., 1.],
       ...,
       [1., 1., 1., ..., 1., 1., 1.],
       [1., 1., 1., ..., 1., 1., 1.],
       [1., 1., 1., ..., 1., 1., 1.]], dtype=float32)
>>> (np.max(a[4:9].numpy(), 0) + np.max(a[10:].numpy()))>0
array([[ True,  True,  True, ...,  True,  True,  True],
       [ True,  True,  True, ...,  True,  True,  True],
       [ True,  True,  True, ...,  True,  True,  True],
       ...,
       [ True,  True,  True, ...,  True,  True,  True],
       [ True,  True,  True, ...,  True,  True,  True],
       [ True,  True,  True, ...,  True,  True,  True]])
>>> (np.max(a[4:9].numpy(), 0) + np.max(a[10:].numpy()))>0 * 1.0
array([[ True,  True,  True, ...,  True,  True,  True],
       [ True,  True,  True, ...,  True,  True,  True],
       [ True,  True,  True, ...,  True,  True,  True],
       ...,
       [ True,  True,  True, ...,  True,  True,  True],
       [ True,  True,  True, ...,  True,  True,  True],
       [ True,  True,  True, ...,  True,  True,  True]])
>>> cv2.imshow('sem', (np.max(a[4:9].numpy(), 0) + np.max(a[10:].numpy()))>0 * 1.0); cv2.waitKey(1)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
cv2.error: OpenCV(4.7.0) :-1: error: (-5:Bad argument) in function 'imshow'
> Overload resolution failed:
>  - mat data type = 0 is not supported
>  - Expected Ptr<cv::cuda::GpuMat> for argument 'mat'
>  - Expected Ptr<cv::UMat> for argument 'mat'

>>> (np.max(a[4:9].numpy(), 0) + np.max(a[10:].numpy()))>0 * 1.0
array([[ True,  True,  True, ...,  True,  True,  True],
       [ True,  True,  True, ...,  True,  True,  True],
       [ True,  True,  True, ...,  True,  True,  True],
       ...,
       [ True,  True,  True, ...,  True,  True,  True],
       [ True,  True,  True, ...,  True,  True,  True],
       [ True,  True,  True, ...,  True,  True,  True]])
>>> ((np.max(a[4:9].numpy(), 0) + np.max(a[10:].numpy()))>0) * 1.0
array([[1., 1., 1., ..., 1., 1., 1.],
       [1., 1., 1., ..., 1., 1., 1.],
       [1., 1., 1., ..., 1., 1., 1.],
       ...,
       [1., 1., 1., ..., 1., 1., 1.],
       [1., 1., 1., ..., 1., 1., 1.],
       [1., 1., 1., ..., 1., 1., 1.]])
>>> cv2.imshow('sem', ((np.max(a[4:9].numpy(), 0) + np.max(a[10:].numpy()))>0) * 1.0); cv2.waitKey(1)
-1
>>> cv2.imshow('semsem', ((np.max(a[4:9].numpy(), 0) + np.max(a[10:].numpy()))>0) * 1.0); cv2.waitKey(1)
-1
>>> cv2.imshow('semsem', ((np.max(a[4:9].numpy(), 0) + np.max(a[10:].numpy(), 0))>0) * 1.0); cv2.waitKey(1)
-1
>>> (np.max(a[4:9].numpy(), 0)
... 
KeyboardInterrupt
>>> np.max(a[4:9].numpy(), 0)
array([[0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       ...,
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.]], dtype=float32)
>>> np.max(a[10:].numpy(), 0)
array([[0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       ...,
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.]], dtype=float32)
>>> (np.max(a[4:9].numpy(), 0) + np.max(a[10:].numpy(), 0))>0
array([[False, False, False, ..., False, False, False],
       [False, False, False, ..., False, False, False],
       [False, False, False, ..., False, False, False],
       ...,
       [False, False, False, ..., False, False, False],
       [False, False, False, ..., False, False, False],
       [False, False, False, ..., False, False, False]])
>>> np.concatenate((a[4:9].numpy(), a[10:].numpy()), axis=0).shape
(12, 720, 720)
>>> sem_no_counter = np.concatenate((a[4:9].numpy(), a[10:].numpy()), axis=0)
>>> sem_no_counter = np.max(sem_no_counter.numpy(), 0)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'numpy.ndarray' object has no attribute 'numpy'. Did you mean: 'dump'?
>>> sem_no_counter = np.max(sem_no_counter, 0)
>>> cv2.imshow('sem', sem_no_counter); cv2.waitKey(1)
-1
>>> sem_no_counter = np.concatenate((a[4:13].numpy(), a[14:].numpy()), axis=0)
>>> sem_no_counter = np.max(sem_no_counter, 0)
>>> cv2.imshow('sem', sem_no_counter); cv2.waitKey(1)
-1
>>> cv2.imshow('counter', a[13].numpy()); cv2.waitKey(1)
-1
>>> cv2.imshow('counter', a[14].numpy()); cv2.waitKey(1)
-1
>>> cv2.imshow('counter', a[12].numpy()); cv2.waitKey(1)
-1
>>> cv2.imshow('counter', a[4].numpy()); cv2.waitKey(1)
-1
>>> cv2.imshow('counter', a[5].numpy()); cv2.waitKey(1)
-1
>>> cv2.imshow('counter', a[6].numpy()); cv2.waitKey(1)
-1
>>> cv2.imshow('counter', a[7].numpy()); cv2.waitKey(1)
-1
>>> cv2.imshow('counter', a[8].numpy()); cv2.waitKey(1)
-1
>>> cv2.imshow('counter', a[9].numpy()); cv2.waitKey(1)
-1
>>> cv2.imshow('counter', a[10].numpy()); cv2.waitKey(1)
-1
>>> cv2.imshow('counter', a[11].numpy()); cv2.waitKey(1)
-1
>>> cv2.imshow('counter', a[12].numpy()); cv2.waitKey(1)
-1
>>> cv2.imshow('counter', a[13].numpy()); cv2.waitKey(1)
-1
>>> cv2.imshow('counter', a[14].numpy()); cv2.waitKey(1)
-1
>>> cv2.imshow('counter', a[15].numpy()); cv2.waitKey(1)
-1
>>> sem_no_counter = np.concatenate((a[4:15].numpy(), a[16:].numpy()), axis=0)
>>> sem_no_counter = np.max(sem_no_counter, 0)
>>> cv2.imshow('sem', sem_no_counter); cv2.waitKey(1)
-1
>>> cv2.imshow('counter', a[15].numpy()); cv2.waitKey(1)
-1
>>> cv2.imshow('sem', sem_no_counter); cv2.waitKey(1)
-1
>>> pickle.dump(sem_no_counter, open('/Users/soyeonm/Documents/SocialNavigation/OGN/fbe_maps/sep_17_replay_18_just_map_with_sp_only/success_spot_init/18/fbe_map_sem_no_counter.p', 'wb'))
>>> import skimage.morphology
>>> no_sem_counter = skimage.morphology.binary_dilation(no_sem_counter , selem)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'no_sem_counter' is not defined
>>> no_sem_counter = sem_no_counter 
>>> no_sem_counter = skimage.morphology.binary_dilation(no_sem_counter , selem)
>>> cv2.imshow('no sem counter', no_sem_counter*1.0);cv2.waitKey(1)
-1
>>> selem
array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], dtype=uint8)
>>> selem = skimage.morphology.square(10)
>>> selem
array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], dtype=uint8)
>>> selem = skimage.morphology.square(1)
>>> selem
array([[1]], dtype=uint8)
>>> no_sem_counter
array([[False, False, False, ..., False, False, False],
       [False, False, False, ..., False, False, False],
       [False, False, False, ..., False, False, False],
       ...,
       [False, False, False, ..., False, False, False],
       [False, False, False, ..., False, False, False],
       [False, False, False, ..., False, False, False]])
>>> no_sem_counter.shape
(720, 720)
>>> no_sem_counter = pickle.load(open('/Users/soyeonm/Documents/SocialNavigation/OGN/fbe_maps/sep_17_replay_18_just_map_with_sp_only/success_spot_init/18/fbe_map_sem_no_counter.p', 'rb'))
>>> no_sem_counter
array([[0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       ...,
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.]], dtype=float32)
>>> map_pickle
array([[0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       ...,
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.]], dtype=float32)
>>> map_pickle.shape
(720, 720)
>>> skimage.morphology.binary_dilation(map_pickle, selem)
array([[False, False, False, ..., False, False, False],
       [False, False, False, ..., False, False, False],
       [False, False, False, ..., False, False, False],
       ...,
       [False, False, False, ..., False, False, False],
       [False, False, False, ..., False, False, False],
       [False, False, False, ..., False, False, False]])
>>> cv2.imshow('map pickle dil', skimage.morphology.binary_dilation(map_pickle, selem)*1.0); cv2.waitKey(1)
-1
>>> np.max(no_sem_counter)
1.0
>>> np.max(map_pickle)
1.0
>>> cv2.imshow('no sem counter', skimage.morphology.binary_dilation(no_sem_counter, selem)*1.0); cv2.waitKey(1)
-1
>>> cv2.imshow('no sem counter', skimage.morphology.binary_dilation(no_sem_counter, selem)*1.0); cv2.waitKey(1)
-1
>>> selem = skimage.morphology.square(10)
>>> cv2.imshow('no sem counter', skimage.morphology.binary_dilation(no_sem_counter, selem)*1.0); cv2.waitKey(1)
-1
>>> cv2.imshow('no sem counter works', skimage.morphology.binary_dilation(no_sem_counter, selem)*1.0); cv2.waitKey(1)
-1
>>> selem = skimage.morphology.square(1)
>>> cv2.imshow('no sem counter works', skimage.morphology.binary_dilation(no_sem_counter, selem)*1.0); cv2.waitKey(1)
-1
>>> cv2.imshow('no sem counter works',no_sem_counter); cv2.waitKey(1)
-1
>>> np.max(no_sem_counter)
1.0
>>> no_sem_counter.shape
(720, 720)
>>> map_pickle.shape
(720, 720)
>>> map_pickle*no_sem_counter
array([[0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       ...,
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.]], dtype=float32)
>>> cv2.imshow('no sem counter works', skimage.morphology.binary_dilation(map_pickle * no_sem_counter, selem)*1.0); cv2.waitKey(1)
-1
>>> np.sum(map_pickle)
11007.895
>>> np.sum(map_pickle * no_sem_counter)
1656.1805
>>> cv2.imshow('no sem counter works', skimage.morphology.binary_dilation(map_pickle * no_sem_counter, selem)*1.0); cv2.waitKey(1)
-1
>>> cv2.imshow('mult', map_pickle * no_sem_counter); cv2.waitKey(1)
-1
>>> mult = map_pickle * no_sem_counter
>>> cv2.imshow('mult works', skimage.morphology.binary_dilation(mult, selem)*1.0); cv2.waitKey(1)
-1
>>> import os
>>> os.getcwd()
'/Users/soyeonm/Documents/SocialNavigation/OGN'
>>> os.makedirs('/Users/soyeonm/Documents/debug_viz')
>>> cv2.imwrite('/Users/soyeonm/Documents/debug_viz/mult_works.png', skimage.morphology.binary_dilation(mult, selem)*1.0)
True
>>> cv2.imwrite('/Users/soyeonm/Documents/debug_viz/mult_works.png', (skimage.morphology.binary_dilation(mult, selem)*255).astype(np.uint8))
True
>>> cv2.imwrite('/Users/soyeonm/Documents/debug_viz/mult.png', (mult*255).astype(np.uint8))
True
>>> cv2.imwrite('/Users/soyeonm/Documents/debug_viz/mult_bool.png', ((mult>0)*255).astype(np.uint8))
True
>>> cv2.imwrite('/Users/soyeonm/Documents/debug_viz/no_sem_counter_bool.png', ((no_sem_counter>0)*255).astype(np.uint8))
True
>>> cv2.imwrite('/Users/soyeonm/Documents/debug_viz/no_sem_counter_bool.png', ((no_sem_counter>0.5)*255).astype(np.uint8))
True
>>> cv2.imwrite('/Users/soyeonm/Documents/debug_viz/no_sem_counter_bool.png', ((no_sem_counter>0.1)*255).astype(np.uint8))
True
>>> cv2.imwrite('/Users/soyeonm/Documents/debug_viz/no_sem_counter_bool.png', ((no_sem_counter>0.01)*255).astype(np.uint8))
True
>>> cv2.imwrite('/Users/soyeonm/Documents/debug_viz/no_sem_counter_bool.png', ((no_sem_counter>0.001)*255).astype(np.uint8))
True
>>> selem = skimage.morphology.disk(5)
>>> cv2.imwrite('/Users/soyeonm/Documents/debug_viz/dilate_5_no_sem.png', ((skimage.morphology.binary_dilation(no_sem_counter>0.001, selem) *255.0).astype(np.uint8)))
True
>>> dilate_5_no_sem = ((skimage.morphology.binary_dilation(no_sem_counter>0.001, selem) *255.0).astype(np.uint8))
>>> map_no_fur = map_pickle * (1-dilate_5_no_sem)
>>> cv2.imwrite(''/Users/soyeonm/Documents/debug_viz/map_no_fur.png'', map_no_fur)
  File "<stdin>", line 1
    cv2.imwrite(''/Users/soyeonm/Documents/debug_viz/map_no_fur.png'', map_no_fur)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
SyntaxError: invalid syntax. Perhaps you forgot a comma?
>>> cv2.imwrite(''/Users/soyeonm/Documents/debug_viz/map_no_fur.png', map_no_fur)
  File "<stdin>", line 1
    cv2.imwrite(''/Users/soyeonm/Documents/debug_viz/map_no_fur.png', map_no_fur)
                                                                   ^
SyntaxError: unterminated string literal (detected at line 1)
>>> cv2.imwrite('/Users/soyeonm/Documents/debug_viz/map_no_fur.png', map_no_fur)
True
>>> cv2.imwrite('/Users/soyeonm/Documents/debug_viz/map_no_fur.png', map_no_fur.astype(np.uint8))
True
>>> cv2.imwrite('/Users/soyeonm/Documents/debug_viz/map_no_fur.png', (map_no_fur*255).astype(np.uint8))
True
>>> map_pickle
array([[0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       ...,
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.]], dtype=float32)
>>> (1-dilate_5_no_sem)
array([[1, 1, 1, ..., 1, 1, 1],
       [1, 1, 1, ..., 1, 1, 1],
       [1, 1, 1, ..., 1, 1, 1],
       ...,
       [1, 1, 1, ..., 1, 1, 1],
       [1, 1, 1, ..., 1, 1, 1],
       [1, 1, 1, ..., 1, 1, 1]], dtype=uint8)
>>> (1-dilate_5_no_sem)
array([[1, 1, 1, ..., 1, 1, 1],
       [1, 1, 1, ..., 1, 1, 1],
       [1, 1, 1, ..., 1, 1, 1],
       ...,
       [1, 1, 1, ..., 1, 1, 1],
       [1, 1, 1, ..., 1, 1, 1],
       [1, 1, 1, ..., 1, 1, 1]], dtype=uint8)
>>> (1-dilate_5_no_sem)*1.0
array([[1., 1., 1., ..., 1., 1., 1.],
       [1., 1., 1., ..., 1., 1., 1.],
       [1., 1., 1., ..., 1., 1., 1.],
       ...,
       [1., 1., 1., ..., 1., 1., 1.],
       [1., 1., 1., ..., 1., 1., 1.],
       [1., 1., 1., ..., 1., 1., 1.]])
>>> map_pickle * ((1-dilate_5_no_sem)*1.0)
array([[0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       ...,
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.]])
>>> map_no_fur =map_pickle * ((1-dilate_5_no_sem)*1.0)
>>> cv2.imwrite('/Users/soyeonm/Documents/debug_viz/map_no_fur.png', (map_no_fur*255).astype(np.uint8))
True
>>> np.max(dilate_5_no_sem)
255
>>> cv2.imwrite('/Users/soyeonm/Documents/debug_viz/map_no_fur.png', (map_no_fur*255).astype(np.uint8))
KeyboardInterrupt
>>> dilate_5_no_sem = skimage.morphology.binary_dilation(no_sem_counter>0.001, selem)
>>> map_no_fur =map_pickle * ((1-dilate_5_no_sem)*1.0)
>>> cv2.imwrite('/Users/soyeonm/Documents/debug_viz/map_no_fur.png', (map_no_fur*255).astype(np.uint8))
True
>>> #erode back
>>> dilate_5_no_sem = skimage.morphology.binary_dilation(no_sem_counter>0.001, selem)
>>> no_sem_fill5 = skimage.morphology.binary_erosion(no_sem_counter>0.001, selem)
>>> map_no_fur =map_pickle * ((1-no_sem_fill5)*1.0)
>>> cv2.imwrite('/Users/soyeonm/Documents/debug_viz/map_no_fur.png', (map_no_fur*255).astype(np.uint8))
True
>>> blank_img
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'blank_img' is not defined
>>> fbe_map = pickle.load(open('/Users/soyeonm/Documents/SocialNavigation/OGN/fbe_maps/sep_18_map_for_wall/success_spot_init/18/fbe_map.p', 'rb'))
>>> fbe_map.shape
torch.Size([17, 720, 720])
>>> fbe_map[4]
tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]])
>>> cv2.imshow('fbe_map_4', fbe_map[4].numpy()); cv2.waitKey(1)
-1
>>> contour = pickle.load(open('/Users/soyeonm/Documents/SocialNavigation/OGN/fbe_maps/sep_18_map_for_wall/success_spot_init/18/blank_contour_thick_1.p', 'rb'))
>>> contour
array([[0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       ...,
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.]])
>>> fbe_map[4].numpy() + contour
array([[0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       ...,
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.]])
>>> fbe_map[4].numpy() + contour 
KeyboardInterrupt
>>> (fbe_map[4].numpy() + contour)>0
array([[False, False, False, ..., False, False, False],
       [False, False, False, ..., False, False, False],
       [False, False, False, ..., False, False, False],
       ...,
       [False, False, False, ..., False, False, False],
       [False, False, False, ..., False, False, False],
       [False, False, False, ..., False, False, False]])
>>> (fbe_map[4].numpy() + contour)>0 * 1.0
array([[False, False, False, ..., False, False, False],
       [False, False, False, ..., False, False, False],
       [False, False, False, ..., False, False, False],
       ...,
       [False, False, False, ..., False, False, False],
       [False, False, False, ..., False, False, False],
       [False, False, False, ..., False, False, False]])
>>> ((fbe_map[4].numpy() + contour)>0) * 1.0
array([[0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       ...,
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.]])
>>> cv2.imshow('added', ((fbe_map[4].numpy() + contour)>0) * 1.0); cv2.waitKey(1)
-1
>>> cv2.imshow('added', ((fbe_map[4].numpy() + contour + fbe_map[15].numpy())>0) * 1.0); cv2.waitKey(1)
-1
>>> added = ((fbe_map[4].numpy() + contour + fbe_map[15].numpy())>0) * 1.0
>>> added 
array([[0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       ...,
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.]])
>>> added 
array([[0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       ...,
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.]])
>>> #dilate this added
>>> 
>>> selem
array([[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
       [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0],
       [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
       [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
       [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
       [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
       [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
       [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
       [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0],
       [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0]], dtype=uint8)
>>> selem = skimage.morphology.square(5)
>>> dilated = skimage.morphology.binary_dilation(added, selem) * 1.0
>>> cv2.imshow('dilated', dilated); cv2.waitKey(1)
-1
>>> selem = skimage.morphology.square(15)
>>> dilated = skimage.morphology.binary_dilation(added, selem) * 1.0
>>> cv2.imshow('dilated', dilated); cv2.waitKey(1)
-1
>>> cv2.imshow('dilated', dilated); cv2.waitKey(1)
-1
>>> import numpy as np
>>> import matplotlib.pyplot as plt
from scipy import ndimage as ndi

from skimage.segmentation import watershed
from skimage.feature import peak_local_max


# Generate an initial image with two overlapping circles
x, y = np.indices((80, 80))
x1, y1, x2, y2 = 28, 28, 44, 52
r1, r2 = 16, 20
mask_circle1 = (x - x1)**2 + (y - y1)**2 < r1**2
mask_circle2 = (x - x2)**2 + (y - y2)**2 < r2**2
image = np.logical_or(mask_circle1, mask_circle2)

>>> from scipy import ndimage as ndi
>>> 
>>> from skimage.segmentation import watershed
from skimage.feature import peak_local_max


# Generate an initial image with two overlapping circles
x, y = np.indices((80, 80))
x1, y1, x2, y2 = 28, 28, 44, 52
r1, r2 = 16, 20
mask_circle1 = (x - x1)**2 + (y - y1)**2 < r1**2
mask_circle2 = (x - x2)**2 + (y - y2)**2 < r2**2
image = np.logical_or(mask_circle1, mask_circle2)



>>> from skimage.feature import peak_local_max
>>> 
>>> 
>>> # Generate an initial image with two overlapping circles
>>> x, y = np.indices((80, 80))
>>> x1, y1, x2, y2 = 28, 28, 44, 52
>>> r1, r2 = 16, 20
>>> mask_circle1 = (x - x1)**2 + (y - y1)**2 < r1**2
>>> mask_circle2 = (x - x2)**2 + (y - y2)**2 < r2**2
>>> image = np.logical_or(mask_circle1, mask_circle2)
>>> 
>>> 
>>> 
>>> 
>>> # Now we want to separate the two objects in image
>>> # Generate the markers as local maxima of the distance to the background
>>> distance = ndi.distance_transform_edt(image)
>>> coords = peak_local_max(distance, footprint=np.ones((3, 3)), labels=image)
>>> mask = np.zeros(distance.shape, dtype=bool)
>>> mask[tuple(coords.T)] = True
>>> markers, _ = ndi.label(mask)
>>> labels = watershed(-distance, markers, mask=image)
>>> 
>>> fig, axes = plt.subplots(ncols=3, figsize=(9, 3), sharex=True, sharey=True)
ax = axes.ravel()

ax[0].imshow(image, cmap=plt.cm.gray)
ax[0].set_title('Overlapping objects')
ax[1].imshow(-distance, cmap=plt.cm.gray)
ax[1].set_title('Distances')
ax[2].imshow(labels, cmap=plt.cm.nipy_spectral)
ax[2].set_title('Separated objects')

>>> ax = axes.ravel()
>>> 
>>> ax[0].imshow(image, cmap=plt.cm.gray)
<matplotlib.image.AxesImage object at 0x7fe519858790>
>>> ax[0].set_title('Overlapping objects')
Text(0.5, 1.0, 'Overlapping objects')
>>> ax[1].imshow(-distance, cmap=plt.cm.gray)
<matplotlib.image.AxesImage object at 0x7fe519858610>
>>> ax[1].set_title('Distances')
Text(0.5, 1.0, 'Distances')
>>> ax[2].imshow(labels, cmap=plt.cm.nipy_spectral)
<matplotlib.image.AxesImage object at 0x7fe51985b3a0>
>>> ax[2].set_title('Separated objects')
Text(0.5, 1.0, 'Separated objects')
>>> 
>>> for a in ax:
...     a.set_axis_off()
... 
>>> fig.tight_layout()
>>> plt.show()


^C^C
^C
^C
Traceback (most recent call last):
  File "/Users/soyeonm/anaconda3/lib/python3.10/site-packages/matplotlib/backend_bases.py", line 1335, in __init__
    def __init__(self, name, canvas, x, y, guiEvent=None, *, modifiers=None):
KeyboardInterrupt
^C
Traceback (most recent call last):
  File "/Users/soyeonm/anaconda3/lib/python3.10/site-packages/matplotlib/backend_bases.py", line 1335, in __init__
    def __init__(self, name, canvas, x, y, guiEvent=None, *, modifiers=None):
KeyboardInterrupt
>>> 
>>> labels
array([[0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       ...,
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0]], dtype=int32)
>>> np.max(labels)
2
>>> image.shape
(80, 80)
>>> added
array([[0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       ...,
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.]])
>>> added.shape
(720, 720)
>>> image
array([[False, False, False, ..., False, False, False],
       [False, False, False, ..., False, False, False],
       [False, False, False, ..., False, False, False],
       ...,
       [False, False, False, ..., False, False, False],
       [False, False, False, ..., False, False, False],
       [False, False, False, ..., False, False, False]])
>>> image = added >0
>>> 
>>> distance = ndi.distance_transform_edt(image)
>>> coords = peak_local_max(distance, footprint=np.ones((3, 3)), labels=image)
>>> mask = np.zeros(distance.shape, dtype=bool)
>>> mask[tuple(coords.T)] = True
>>> markers, _ = ndi.label(mask)
>>> labels = watershed(-distance, markers, mask=image)
>>> 
>>> image = (1-dilated)>0
>>> distance = ndi.distance_transform_edt(image)
>>> coords = peak_local_max(distance, footprint=np.ones((3, 3)), labels=image)
>>> mask = np.zeros(distance.shape, dtype=bool)
>>> mask[tuple(coords.T)] = True
>>> markers, _ = ndi.label(mask)
>>> labels = watershed(-distance, markers, mask=image)
>>> 
>>> labels
array([[  1,   1,   1, ...,   3,   3,   3],
       [  1,   1,   1, ...,   3,   3,   3],
       [  1,   1,   1, ...,   3,   3,   3],
       ...,
       [124, 124, 124, ..., 126, 126, 126],
       [124, 124, 124, ..., 126, 126, 126],
       [124, 124, 124, ..., 126, 126, 126]], dtype=int32)
>>> cv2.imshow('labels', labels); cv2.waitKey(1)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
cv2.error: OpenCV(4.7.0) /Users/runner/work/opencv-python/opencv-python/opencv/modules/highgui/src/precomp.hpp:155: error: (-215:Assertion failed) src_depth != CV_16F && src_depth != CV_32S in function 'convertToShow'

>>> np.max(labels)
126
>>> cv2.imshow('labels', labels.astype(np.uint8)); cv2.waitKey(1)
-1
>>> #Let's first get labels like film 
>>> connected_regions = skimage.morphology.label(1-added, connectivity=2)
>>> len(connected_regions)
720
>>> np.max(connected_regions)
13
>>> connected_regions = skimage.morphology.label(1-dilated, connectivity=2)
>>> np.max(connected_regions)
5
>>> cv2.imshow('0', ((connected_regions==0) * 255.0).astype(np.uint8)); cv2.waitKey(1)
-1
>>> cv2.imshow('1', ((connected_regions==1) * 255.0).astype(np.uint8)); cv2.waitKey(1)
-1
>>> cv2.imshow('2', ((connected_regions==2) * 255.0).astype(np.uint8)); cv2.waitKey(1)
-1
>>> cv2.imshow('2', ((connected_regions==3) * 255.0).astype(np.uint8)); cv2.waitKey(1)
-1
>>> cv2.imshow('3', ((connected_regions==3) * 255.0).astype(np.uint8)); cv2.waitKey(1)
-1
>>> cv2.imshow('4', ((connected_regions==4) * 255.0).astype(np.uint8)); cv2.waitKey(1)
-1
>>> cv2.imshow('5', ((connected_regions==5) * 255.0).astype(np.uint8)); cv2.waitKey(1)
-1
>>> connected_regions==3
array([[False, False, False, ..., False, False, False],
       [False, False, False, ..., False, False, False],
       [False, False, False, ..., False, False, False],
       ...,
       [False, False, False, ..., False, False, False],
       [False, False, False, ..., False, False, False],
       [False, False, False, ..., False, False, False]])
>>> pickle.dump((connected_regions==3)*1.0, open('/Users/soyeonm/Documents/SocialNavigation/OGN/fbe_maps/sep_18_map_for_wall/success_spot_init/18/connected_regions_3.p', 'wb')) 
>>> con3 = (connected_regions==3)*1.0
>>> selem = skimage.morphology.square(5)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
KeyboardInterrupt
>>> selem = skimage.morphology.square(5)
>>> con3_erode5 = skimage.morphology.binary_erosion(con3, selem)
>>> cv2.imshow('con3_erode5', ((con3_erode5) * 255.0).astype(np.uint8)); cv2.waitKey(1)
-1
>>> selem = skimage.morphology.square(10)
>>> con3_erode10 = skimage.morphology.binary_erosion(con3, selem)
>>> cv2.imshow('con3_erode10', ((con3_erode10) * 255.0).astype(np.uint8)); cv2.waitKey(1)
-1
>>> if 1==1:
...     #img = cv2.imread('/Users/soyeonm/Downloads/floorplan_img.jpg')
...     #
...     #gray = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)
...     #gray =
...     #
...     import skimage.morphology
...     map_pickle = pickle.load(open('/Users/soyeonm/Documents/SocialNavigation/OGN/fbe_maps/sep_17_replay_18_just_map_with_sp_only/success_spot_init/18/fbe_map_obs_numpy.p', 'rb'))
...     #map_pickle = 1-con3
...     #selem = skimage.morphology.square(1)
...     #dilated = skimage.morphology.binary_dilation(map_pickle, selem)*1.0
...     #erode back
...     #map_pickle = skimage.morphology.binary_erosion(map_pickle, selem)*1.0
...     map_pickle = dilated
...     #img =  
...     img_reshaped = map_pickle[:, :, np.newaxis]
...     arr_repeated = np.repeat(img_reshaped, 3, axis=2)
...     img = ((1-arr_repeated)*255).astype(np.uint8)
...     gray = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)
...     #
...     _, thresh = cv2.threshold(gray, 127, 255, cv2.THRESH_BINARY)
...     #
...     cv2.imshow("thresh", thresh)
...     #
...     mor_img = cv2.morphologyEx(thresh, cv2.MORPH_OPEN, (5, 5), iterations=3)
...     #
...     _, contours, _ = cv2.findContours(mor_img, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
...     #
...     sorted_contours = sorted(contours, key=cv2.contourArea, reverse=True)
...     #
...     for c in sorted_contours[1:]:
...             area = cv2.contourArea(c)
...             print("area is ", area)
...             if area >600: #40000: #600: #>20000: #< 20000 and area>150: #> 600:#100: #6000:
...                     save_c = c
...                     cv2.drawContours(img, [c], -1, (random.randrange(0, 255), random.randrange(0, 256), random.randrange(0, 255)), 3)
...                     blank_img = (np.ones(img.shape)*255).astype(np.uint8)
...                     #cv2.drawContours(blank_img, [c], -1, (0, 0, 0), thickness=cv2.FILLED)
...                     cv2.drawContours(blank_img, [c], -1, (0, 0, 0), 1)
...                     #
...     cv2.imshow("mor_img", mor_img); cv2.waitKey(1)
...     cv2.imshow("img", img); cv2.waitKey(1)
... 
Traceback (most recent call last):
  File "<stdin>", line 27, in <module>
ValueError: not enough values to unpack (expected 3, got 2)
>>> if 1==1:
...     #img = cv2.imread('/Users/soyeonm/Downloads/floorplan_img.jpg')
...     #
...     #gray = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)
...     #gray =
...     #
...     import skimage.morphology
...     map_pickle = pickle.load(open('/Users/soyeonm/Documents/SocialNavigation/OGN/fbe_maps/sep_17_replay_18_just_map_with_sp_only/success_spot_init/18/fbe_map_obs_numpy.p', 'rb'))
...     #map_pickle = 1-con3
...     #selem = skimage.morphology.square(1)
...     #dilated = skimage.morphology.binary_dilation(map_pickle, selem)*1.0
...     #erode back
...     #map_pickle = skimage.morphology.binary_erosion(map_pickle, selem)*1.0
...     #map_pickle = dilated
...     #img =  
...     img_reshaped = map_pickle[:, :, np.newaxis]
...     arr_repeated = np.repeat(img_reshaped, 3, axis=2)
...     img = ((1-arr_repeated)*255).astype(np.uint8)
...     gray = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)
...     #
...     _, thresh = cv2.threshold(gray, 127, 255, cv2.THRESH_BINARY)
...     #
...     cv2.imshow("thresh", thresh)
...     #
...     mor_img = cv2.morphologyEx(thresh, cv2.MORPH_OPEN, (5, 5), iterations=3)
...     #
...     _, contours, _ = cv2.findContours(mor_img, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
...     #
...     sorted_contours = sorted(contours, key=cv2.contourArea, reverse=True)
...     #
...     for c in sorted_contours[1:]:
...             area = cv2.contourArea(c)
...             print("area is ", area)
...             if area >600: #40000: #600: #>20000: #< 20000 and area>150: #> 600:#100: #6000:
...                     save_c = c
...                     cv2.drawContours(img, [c], -1, (random.randrange(0, 255), random.randrange(0, 256), random.randrange(0, 255)), 3)
...                     blank_img = (np.ones(img.shape)*255).astype(np.uint8)
...                     #cv2.drawContours(blank_img, [c], -1, (0, 0, 0), thickness=cv2.FILLED)
...                     cv2.drawContours(blank_img, [c], -1, (0, 0, 0), 1)
...                     #
...     cv2.imshow("mor_img", mor_img); cv2.waitKey(1)
...     cv2.imshow("img", img); cv2.waitKey(1)
... 
Traceback (most recent call last):
  File "<stdin>", line 27, in <module>
ValueError: not enough values to unpack (expected 3, got 2)
>>> contours_0_to_6 = pickle.load(open('/Users/soyeonm/Documents/SocialNavigation/OGN/fbe_maps/sep_18_map_for_wall/success_spot_init/18/contours_0_to_6.p', 'rb'))
>>> import os
>>> os.getcwd()
'/Users/soyeonm/Documents/SocialNavigation/OGN'
>>> from envs.utils.fmm_planner import FMMPlanner

tTraceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/Users/soyeonm/Documents/SocialNavigation/OGN/envs/__init__.py", line 3, in <module>
    from .habitat import construct_envs
  File "/Users/soyeonm/Documents/SocialNavigation/OGN/envs/habitat/__init__.py", line 7, in <module>
    from habitat_baselines.config.default import get_config as cfg_env
  File "/Users/soyeonm/Documents/SocialNavigation/habitat-lab_soyeonm/habitat-baselines/habitat_baselines/__init__.py", line 7, in <module>
    from habitat_baselines.common.base_il_trainer import BaseILTrainer
  File "/Users/soyeonm/Documents/SocialNavigation/habitat-lab_soyeonm/habitat-baselines/habitat_baselines/common/base_il_trainer.py", line 13, in <module>
    from habitat_baselines.common.base_trainer import BaseTrainer
  File "/Users/soyeonm/Documents/SocialNavigation/habitat-lab_soyeonm/habitat-baselines/habitat_baselines/common/base_trainer.py", line 15, in <module>
    from habitat import logger
  File "/Users/soyeonm/Documents/SocialNavigation/habitat-lab_soyeonm/habitat-lab/habitat/__init__.py", line 9, in <module>
    from habitat.core.benchmark import Benchmark
  File "/Users/soyeonm/Documents/SocialNavigation/habitat-lab_soyeonm/habitat-lab/habitat/core/benchmark.py", line 20, in <module>
    from habitat.core.env import Env
  File "/Users/soyeonm/Documents/SocialNavigation/habitat-lab_soyeonm/habitat-lab/habitat/core/env.py", line 28, in <module>
    from habitat.core.embodied_task import EmbodiedTask, Metrics
  File "/Users/soyeonm/Documents/SocialNavigation/habitat-lab_soyeonm/habitat-lab/habitat/core/embodied_task.py", line 26, in <module>
    from habitat.tiffany_utils.navmesh_utils import get_largest_island_index #*
  File "/Users/soyeonm/Documents/SocialNavigation/habitat-lab_soyeonm/habitat-lab/habitat/tiffany_utils/navmesh_utils.py", line 3, in <module>
    import magnum as mn
ModuleNotFoundError: No module named 'magnum'
>>> 
>>> added * (1-(((connected_regions==1) + (connected_regions==2) + (connected_regions==4) + (connected_regions==5))>0)*1.0) 
array([[0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       ...,
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.]])
>>> cv2.imshow('leave3mostly', added * (1-(((connected_regions==1) + (connected_regions==2) + (connected_regions==4) + (connected_regions==5))>0)*1.0)); cv2.waitKey(1)
-1
>>> cv2.imshow('leave3mostly', added + ((((connected_regions==1) + (connected_regions==2) + (connected_regions==4) + (connected_regions==5))>0)*1.0)); cv2.waitKey(1)
-1
>>> selem = skimage.morphology.square(15)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
KeyboardInterrupt
>>> selem = skimage.morphology.square(15)
>>> skimage.morphology.binary_dilation(
... s)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
KeyboardInterrupt
>>> cv2.imshow('leave3mostly', added + (((skimage.morphology.binary_dilation(connected_regions==2, selem) + skimage.morphology.binary_dilation(connected_regions==4, selem) + skimage.morphology.binary_dilation(connected_regions==5, selem))>0)*1.0)); cv2.waitKey(1)
-1
>>> selem = skimage.morphology.disk(15)
>>> cv2.imshow('leave3mostly', added + (((skimage.morphology.binary_dilation(connected_regions==2, selem) + skimage.morphology.binary_dilation(connected_regions==4, selem) + skimage.morphology.binary_dilation(connected_regions==5, selem))>0)*1.0)); cv2.waitKey(1)
-1
>>> selem = skimage.morphology.disk(20)
>>> cv2.imshow('leave3mostly', added + (((skimage.morphology.binary_dilation(connected_regions==2, selem) + skimage.morphology.binary_dilation(connected_regions==4, selem) + skimage.morphology.binary_dilation(connected_regions==5, selem))>0)*1.0)); cv2.waitKey(1)
-1
>>> leave3mostly = added + (((skimage.morphology.binary_dilation(connected_regions==2, selem) + skimage.morphology.binary_dilation(connected_regions==4, selem) + skimage.morphology.binary_dilation(connected_regions==5, selem))>0)*1.0)
>>> cv2.imshow('leave3mostly', added + (((skimage.morphology.binary_dilation(connected_regions==1, selem) + (skimage.morphology.binary_dilation(connected_regions==2, selem) + skimage.morphology.binary_dilation(connected_regions==4, selem) + skimage.morphology.binary_dilation(connected_regions==5, selem))>0)*1.0)); cv2.waitKey(1)
  File "<stdin>", line 1
    cv2.imshow('leave3mostly', added + (((skimage.morphology.binary_dilation(connected_regions==1, selem) + (skimage.morphology.binary_dilation(connected_regions==2, selem) + skimage.morphology.binary_dilation(connected_regions==4, selem) + skimage.morphology.binary_dilation(connected_regions==5, selem))>0)*1.0)); cv2.waitKey(1)
                                                                                                                                                                                                                                                                                                                          ^
SyntaxError: invalid syntax
>>> leave3mostly = added + (((skimage.morphology.binary_dilation(connected_regions==1, selem) + skimage.morphology.binary_dilation(connected_regions==2, selem) + skimage.morphology.binary_dilation(connected_regions==4, selem) + skimage.morphology.binary_dilation(connected_regions==5, selem))>0)*1.0)
>>> 
>>> cv2.imshow('leave3mostly',  leave3mostly) ; cv2.waitKey(1)
-1
>>> #Now set traversible as 1-leave3mostly
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
KeyboardInterrupt
>>> traversible = 1-leave3mostly
>>> traversible =1-leave3mostly
>>> planner = FMMPlanner(traversible)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'FMMPlanner' is not defined
>>> from envs.utils.fmm_planner import FMMPlanner
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/Users/soyeonm/Documents/SocialNavigation/OGN/envs/__init__.py", line 3, in <module>
    from .habitat import construct_envs
  File "/Users/soyeonm/Documents/SocialNavigation/OGN/envs/habitat/__init__.py", line 7, in <module>
    from habitat_baselines.config.default import get_config as cfg_env
  File "/Users/soyeonm/Documents/SocialNavigation/habitat-lab_soyeonm/habitat-baselines/habitat_baselines/__init__.py", line 7, in <module>
    from habitat_baselines.common.base_il_trainer import BaseILTrainer
  File "/Users/soyeonm/Documents/SocialNavigation/habitat-lab_soyeonm/habitat-baselines/habitat_baselines/common/base_il_trainer.py", line 13, in <module>
    from habitat_baselines.common.base_trainer import BaseTrainer
  File "/Users/soyeonm/Documents/SocialNavigation/habitat-lab_soyeonm/habitat-baselines/habitat_baselines/common/base_trainer.py", line 15, in <module>
    from habitat import logger
  File "/Users/soyeonm/Documents/SocialNavigation/habitat-lab_soyeonm/habitat-lab/habitat/__init__.py", line 9, in <module>
    from habitat.core.benchmark import Benchmark
  File "/Users/soyeonm/Documents/SocialNavigation/habitat-lab_soyeonm/habitat-lab/habitat/core/benchmark.py", line 20, in <module>
    from habitat.core.env import Env
  File "/Users/soyeonm/Documents/SocialNavigation/habitat-lab_soyeonm/habitat-lab/habitat/core/env.py", line 28, in <module>
    from habitat.core.embodied_task import EmbodiedTask, Metrics
  File "/Users/soyeonm/Documents/SocialNavigation/habitat-lab_soyeonm/habitat-lab/habitat/core/embodied_task.py", line 26, in <module>
    from habitat.tiffany_utils.navmesh_utils import get_largest_island_index #*
  File "/Users/soyeonm/Documents/SocialNavigation/habitat-lab_soyeonm/habitat-lab/habitat/tiffany_utils/navmesh_utils.py", line 3, in <module>
    import magnum as mn
ModuleNotFoundError: No module named 'magnum'
>>> pickle.dump(leave3mostly, open('/Users/soyeonm/Documents/SocialNavigation/OGN/fbe_maps/sep_18_map_for_wall/success_spot_init/18/leave3mostly.p', 'wb')) 
>>> np.unique(connected_regions)
array([0, 1, 2, 3, 4, 5])
>>> 
>>> 
>>> 
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
KeyboardInterrupt
>>> 
>>> 
>>> 
>>> fbe_map = pickle.load(open('/Users/soyeonm/Documents/SocialNavigation/OGN/fbe_maps/sep_18_map_for_wall/success_spot_init/18/fbe_map.p', 'rb')) 
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
KeyboardInterrupt
>>> fbe_map = pickle.load(open('/Users/soyeonm/Documents/SocialNavigation/OGN/fbe_maps/sep_18_map_for_wall/success_spot_init/18/fbe_map.p', 'rb')) 
>>> fbe_map
tensor([[[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],

        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]]])
>>> fbe_map.shape
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
KeyboardInterrupt
>>> pickle.dump(fbe_map.numpy(), open('/Users/soyeonm/Documents/SocialNavigation/OGN/fbe_maps/sep_18_map_for_wall/success_spot_init/18/fbe_map_numpy.p', 'wb'))
>>> leave3mostly = pickle.load(open('/Users/soyeonm/Documents/SocialNavigation/OGN/fbe_maps/sep_18_map_for_wall/success_spot_init/18/leave3mostly.p', 'rb')) 
>>> 
>>> #CHANGE THIS TOO!
>>> 
>>> #4.Divide list_of_too_big_regions into smaller rooms
>>> #Match closest contour multiple
>>> for cr in list_of_too_big_regions:
...     traversible =1-leave3mostly
...     planner = FMMPlanner(traversible)
...     dist_to_contour_dict = {}
...     for mc, mc_contour in contour_multiple_dict.items():
...             planner.set_multi_goal(mc_contour[:, :, 0])
...             dist_to_contour_dict[mc] = copy.deepcopy(planner.fmm_dist)
...     #stacked_dist = np.stack((dist_to_contour0, dist_to_contour1, dist_to_contour2, dist_to_contour3, dist_to_contour4, dist_to_contour5, dist_to_contour6))
...     stacked_dist = np.stack(list(dist_to_contour_dict.values()))
...     dist_argmin = np.argmin(stacked_dist, 0)
...     #
...     unique_room_numbers = np.unique(dist_argmin)
...     splitted_room_dict = {u:dist_argmin==u for u in unique_room_numbers if np.sum(dist_argmin==u)>0}
... 
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'list_of_too_big_regions' is not defined
>>> np.sum(dist_argmin/Users/soyeonm/Documents/SocialNavigation/OGN/tmp/dump/aug20_937pm/episodes/thread_0/eps_24 
... 
... 
... /Users/soyeonm/Documents/SocialNavigation/OGN/tmp/dump/aug20_937pm/episodes/thread_0/eps_31 +1
... 
... 
... 
... /Users/soyeonm/Documents/SocialNavigation/OGN/tmp/dump/aug20_937pm/episodes/thread_0/eps_28 /Users/soyeonm/Documents/SocialNavigation/OGN/tmp/dump/aug20_937pm/episodes/thread_0/eps_5/0-12-Vis-1078.png /Users/soyeonm/Documents/SocialNavigation/OGN/tmp/dump/aug20_937pm/episodes/thread_0/eps_12 
